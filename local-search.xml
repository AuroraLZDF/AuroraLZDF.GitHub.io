<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Debian11最小化部署k8s集群</title>
    <link href="/2022/01/25/Debian11%E6%9C%80%E5%B0%8F%E5%8C%96%E9%83%A8%E7%BD%B2k8s%E9%9B%86%E7%BE%A4/"/>
    <url>/2022/01/25/Debian11%E6%9C%80%E5%B0%8F%E5%8C%96%E9%83%A8%E7%BD%B2k8s%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/36d18712ea8a">Debian11最小化部署k8s集群</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>k8s、kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Debian11安装Docker</title>
    <link href="/2022/01/25/Debian11%E5%AE%89%E8%A3%85Docker/"/>
    <url>/2022/01/25/Debian11%E5%AE%89%E8%A3%85Docker/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/be64e10070de">Debian11安装docker</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Debian11基本配置</title>
    <link href="/2022/01/25/Debian11%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/01/25/Debian11%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/316a13474cac">Debian11基本配置</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux、Debian</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Debian11安装教程</title>
    <link href="/2022/01/14/Debian11%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <url>/2022/01/14/Debian11%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/b0b6e3115c72">Debian11安装简述</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux、Debian</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/12/31/hello-world/"/>
    <url>/2021/12/31/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP反射机制</title>
    <link href="/2020/05/21/php/PHP%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <url>/2020/05/21/php/PHP%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="转：PHP反射机制"><a href="#转：PHP反射机制" class="headerlink" title="转：PHP反射机制"></a><a href="https://www.cnblogs.com/daxiaohaha/p/11542374.html">转：PHP反射机制</a></h1><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>就算是类成员定义为 <strong>private</strong> 也可以在外部访问，不用创建类的实例也可以访问类的成员和方法。</p><p>PHP自5.0版本以后添加了反射机制，它提供了一套强大的反射API，允许你在PHP运行环境中，访问和使用类、方法、属性、参数和注释等，其功能十分强大，经常用于高扩展的PHP框架，自动加载插件，自动生成文档，甚至可以用来扩展PHP语言。由于它是PHP內建的oop扩展，为语言本身自带的特性，所以不需要额外添加扩展或者配置就可以使用。更多内容见官方文档。</p><h1 id="反射类型"><a href="#反射类型" class="headerlink" title="反射类型"></a>反射类型</h1><p>PHP反射API会基于类，方法，属性，参数等维护相应的反射类，已提供相应的调用API。</p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>Reflector</td><td>Reflector 是一个接口，被所有可导出的反射类所实现（implement）</td></tr><tr><td>Reflection</td><td>反射（reflection）类</td></tr><tr><td>ReflectionClass</td><td>报告了一个类的有关信息</td></tr><tr><td>ReflectionClassConstant</td><td>报告有关类常量的信息</td></tr><tr><td>ReflectionZendExtension</td><td>报告Zend扩展的相关信息</td></tr><tr><td>ReflectionExtension</td><td>报告了PHP扩展的有关信息</td></tr><tr><td>ReflectionFunction</td><td>报告了一个函数的有关信息</td></tr><tr><td>ReflectionFunctionAbstract</td><td>ReflectionFunction 的父类</td></tr><tr><td>ReflectionMethod</td><td>报告了一个方法的有关信息</td></tr><tr><td>ReflectionObject</td><td>报告了一个对象（object）的相关信息</td></tr><tr><td>ReflectionParameter</td><td>取回了函数或方法参数的相关信息</td></tr><tr><td>ReflectionProperty</td><td>报告了类的属性的相关信息</td></tr><tr><td>ReflectionType</td><td>获取函数、类方法的参数或者返回值的类型</td></tr><tr><td>ReflectionGenerator</td><td>获取生成器的信息</td></tr><tr><td>ReflectionException</td><td>反射异常类</td></tr></tbody></table><h1 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h1><p>假设定义了一个类 User，我们首先需要建立这个类的反射类实例，然后基于这个实例可以访问 User 中的属性或者方法。不管类中定义的成员权限声明是否为 public，都可以获取到。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Extend</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">ReflectionClass</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Exception</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Class User</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@package</span> Extend</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-keyword">const</span> ROLE = <span class="hljs-string">&#x27;Students&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取用户名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> string</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUsername</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;username;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置用户名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $username</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setUsername</span>(<span class="hljs-params"><span class="hljs-variable">$username</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> string</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getPassword</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;password;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $password</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setPassowrd</span>(<span class="hljs-params"><span class="hljs-variable">$password</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$class</span> = <span class="hljs-keyword">new</span> ReflectionClass(<span class="hljs-string">&#x27;Extend\User&#x27;</span>);  <span class="hljs-comment">// 将类名User作为参数，即可建立User类的反射类</span><br><span class="hljs-variable">$properties</span> = <span class="hljs-variable">$class</span>-&gt;getProperties();  <span class="hljs-comment">// 获取User类的所有属性，返回ReflectionProperty的数组</span><br><span class="hljs-variable">$property</span> = <span class="hljs-variable">$class</span>-&gt;getProperty(<span class="hljs-string">&#x27;password&#x27;</span>); <span class="hljs-comment">// 获取User类的password属性ReflectionProperty</span><br><span class="hljs-variable">$methods</span> = <span class="hljs-variable">$class</span>-&gt;getMethods();   <span class="hljs-comment">// 获取User类的所有方法，返回ReflectionMethod数组</span><br><span class="hljs-variable">$method</span> = <span class="hljs-variable">$class</span>-&gt;getMethod(<span class="hljs-string">&#x27;getUsername&#x27;</span>);  <span class="hljs-comment">// 获取User类的getUsername方法的ReflectionMethod</span><br><span class="hljs-variable">$constants</span> = <span class="hljs-variable">$class</span>-&gt;getConstants();   <span class="hljs-comment">// 获取所有常量，返回常量定义数组</span><br><span class="hljs-variable">$constant</span> = <span class="hljs-variable">$class</span>-&gt;getConstant(<span class="hljs-string">&#x27;ROLE&#x27;</span>);   <span class="hljs-comment">// 获取ROLE常量</span><br><span class="hljs-variable">$namespace</span> = <span class="hljs-variable">$class</span>-&gt;getNamespaceName();  <span class="hljs-comment">// 获取类的命名空间</span><br><span class="hljs-variable">$comment_class</span> = <span class="hljs-variable">$class</span>-&gt;getDocComment();  <span class="hljs-comment">// 获取User类的注释文档，即定义在类之前的注释</span><br><span class="hljs-variable">$comment_method</span> = <span class="hljs-variable">$class</span>-&gt;getMethod(<span class="hljs-string">&#x27;getUsername&#x27;</span>)-&gt;getDocComment();  <span class="hljs-comment">// 获取User类中getUsername方法的注释文档</span><br></code></pre></td></tr></table></figure><h1 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h1><p>一旦创建了反射类的实例，我们不仅可以通过反射类访问原来类的方法和属性，还能创建原来类的实例或则直接调用类里面的方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$class</span> = <span class="hljs-keyword">new</span> ReflectionClass(<span class="hljs-string">&#x27;Extend\User&#x27;</span>);  <span class="hljs-comment">// 将类名User作为参数，即可建立User类的反射类</span><br><span class="hljs-variable">$instance</span> = <span class="hljs-variable">$class</span>-&gt;newInstance(<span class="hljs-string">&#x27;youyou&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;***&#x27;</span>);  <span class="hljs-comment">// 创建User类的实例</span><br><br><span class="hljs-variable">$instance</span>-&gt;setUsername(<span class="hljs-string">&#x27;youyou_2&#x27;</span>);  <span class="hljs-comment">// 调用User类的实例调用setUsername方法设置用户名</span><br><span class="hljs-variable">$value</span> = <span class="hljs-variable">$instance</span>-&gt;getUsername();   <span class="hljs-comment">// 用过User类的实例调用getUsername方法获取用户名</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$value</span>;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;   <span class="hljs-comment">// 输出 youyou_2</span><br><br><span class="hljs-variable">$class</span>-&gt;getProperty(<span class="hljs-string">&#x27;username&#x27;</span>)-&gt;setValue(<span class="hljs-variable">$instance</span>, <span class="hljs-string">&#x27;youyou_3&#x27;</span>);  <span class="hljs-comment">// 通过反射类ReflectionProperty设置指定实例的username属性值</span><br><span class="hljs-variable">$value</span> = <span class="hljs-variable">$class</span>-&gt;getProperty(<span class="hljs-string">&#x27;username&#x27;</span>)-&gt;getValue(<span class="hljs-variable">$instance</span>);  <span class="hljs-comment">// 通过反射类ReflectionProperty获取username的属性值</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$value</span>;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;   <span class="hljs-comment">// 输出 youyou_3</span><br><br><span class="hljs-variable">$class</span>-&gt;getMethod(<span class="hljs-string">&#x27;setUsername&#x27;</span>)-&gt;invoke(<span class="hljs-variable">$instance</span>, <span class="hljs-string">&#x27;youyou_4&#x27;</span>); <span class="hljs-comment">// 通过反射类ReflectionMethod调用指定实例的方法，并且传送参数</span><br><span class="hljs-variable">$value</span> = <span class="hljs-variable">$class</span>-&gt;getMethod(<span class="hljs-string">&#x27;getUsername&#x27;</span>)-&gt;invoke(<span class="hljs-variable">$instance</span>);    <span class="hljs-comment">// 通过反射类ReflectionMethod调用指定实例的方法</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$value</span>;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;   <span class="hljs-comment">// 输出 youyou_4</span><br><br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-variable">$property</span> = <span class="hljs-variable">$class</span>-&gt;getProperty(<span class="hljs-string">&#x27;password_1&#x27;</span>);<br>    <span class="hljs-variable">$property</span>-&gt;setAccessible(<span class="hljs-literal">true</span>);   <span class="hljs-comment">// 修改 $property 对象的可访问性</span><br>    <span class="hljs-variable">$property</span>-&gt;setValue(<span class="hljs-variable">$instance</span>, <span class="hljs-string">&#x27;password_2&#x27;</span>);  <span class="hljs-comment">// 可以执行</span><br>    <span class="hljs-variable">$value</span> = <span class="hljs-variable">$property</span>-&gt;getValue(<span class="hljs-variable">$instance</span>);     <span class="hljs-comment">// 可以执行</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$value</span>;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;   <span class="hljs-comment">// 输出 password_2</span><br>    <span class="hljs-variable">$class</span>-&gt;getProperty(<span class="hljs-string">&#x27;password&#x27;</span>)-&gt;setAccessible(<span class="hljs-literal">true</span>);    <span class="hljs-comment">// 修改临时ReflectionProperty对象的可访问性</span><br>    <span class="hljs-variable">$class</span>-&gt;getProperty(<span class="hljs-string">&#x27;password&#x27;</span>)-&gt;setValue(<span class="hljs-variable">$instance</span>, <span class="hljs-string">&#x27;password&#x27;</span>);<span class="hljs-comment">// 不能执行，抛出不能访问异常</span><br>    <span class="hljs-variable">$value</span> = <span class="hljs-variable">$class</span>-&gt;getProperty(<span class="hljs-string">&#x27;password&#x27;</span>)-&gt;getValue(<span class="hljs-variable">$instance</span>);   <span class="hljs-comment">// 不能执行，抛出不能访问异常</span><br>    <span class="hljs-variable">$value</span> = <span class="hljs-variable">$instance</span>-&gt;password;   <span class="hljs-comment">// 不能执行，类本身的属性没有被修改，仍然是private</span><br>&#125;<span class="hljs-keyword">catch</span>(<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>)&#123;<span class="hljs-keyword">echo</span> <span class="hljs-variable">$e</span>;&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020个人面试题汇总</title>
    <link href="/2020/05/15/2020%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <url>/2020/05/15/2020%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL-如何优化"><a href="#MySQL-如何优化" class="headerlink" title="MySQL 如何优化"></a>MySQL 如何优化</h1><p>当 MySQL 单表记录数过大时，增删改查性能都会急剧下降，可以参考以下步骤来优化：</p><p><strong>单表优化</strong>、<strong>字段</strong>、<strong>索引</strong>、<strong>查询SQL</strong>、<strong>存储引擎</strong>、<strong>升级硬件</strong>、<strong>读写分离</strong>、<strong>缓存</strong>、<strong>分表分区</strong>、使用<strong>NoSQL</strong>等。</p><ul><li><p><strong>单表优化</strong>——除非单表数据未来会一直不断上涨，否则不要一开始就考虑拆分，拆分会带来逻辑、部署、运维的各种复杂度，一般以整型值为主的表在千万级以下，字符串为主的表在五百万以下是没有太大问题的。而事实上很多时候 MySQL 单表的性能依然有不少优化空间，甚至能正常支撑千万级以上的数据量。</p></li><li><p><strong>字段</strong></p><ul><li>尽量使用 <strong>TINYINT</strong>、<strong>SMALLINT</strong>、<strong>MEDIUM_INT</strong> 作为整数类型而非 <strong>INT</strong>，如果非负则加上 <strong>UNSIGNED</strong></li><li><strong>VARCHAR</strong> 的长度只分配真正需要的空间</li><li>使用枚举或整数代替字符串类型</li><li>尽量使用 <strong>TIMESTAMP</strong> 而非 <strong>DATETIME</strong></li><li>单表不要有太多字段，建议在 <code>20</code> 以内</li><li>避免使用 <strong>NULL</strong> 字段，很难查询优化且占用额外索引空间</li><li>用整型来存IP（PHP:：<code>ip2long</code>， <code>long2ip</code>；MySQL：<code>INET_ATON</code>，<code>INET_NTOA</code>）</li></ul></li><li><p><strong>索引</strong></p><ul><li>索引并不是越多越好，要根据查询有针对性的创建。考虑在 <code>WHERE</code> 和 <code>ORDER BY</code> 命令上涉及的列建立索引，可根据 <strong>EXPLAIN</strong> 来查看是否用了索引还是全表扫描</li><li>不用外键，由程序保证约束</li><li>尽量不用 <strong>UNIQUE</strong>，由程序保证约束</li><li>使用多列索引时主意顺序和查询条件保持一致，同时删除不必要的单列索引</li></ul></li><li><p><strong>查询SQL</strong></p><ul><li>可通过开启慢查询日志来找出较慢的SQL，针对优化</li><li>避免 sql 中做运算操作</li><li>sql 语句尽可能简单：一条 sql 只能在一个 cpu 运算;大语句拆小语句，减少锁时间;一条大 sql 可以堵死整个库</li><li>尽量不用 <code>SELECT *</code></li><li><strong>OR</strong> 改写成 <strong>IN</strong>：<strong>OR</strong> 的效率是 <code>n</code> 级别，<strong>IN</strong> 的效率是 <code>log(n)</code> 级别，<strong>IN</strong> 的个数建议控制在 <strong>200</strong> 以内</li><li>不用函数和触发器，在应用程序实现</li><li>少用JOIN</li><li>避免模糊查询</li><li>尽量避免在 <strong>WHERE</strong> 子句中使用 <code>!=</code> 或 <code>&lt;&gt;</code> 操作符，否则将引擎放弃使用索引而进行全表扫描</li><li>对于连续数值，使用 **BETWEEN **不用 **IN **：<code>SELECT id FROM t WHERE num BETWEEN 1 AND 5</code></li><li>列表数据不要拿全表，要使用LIMIT来分页，每页数量也不要太大</li></ul></li><li><p><strong>存储引擎</strong></p><p>目前广泛使用的是 <strong>MyISAM</strong> 和 <strong>InnoDB</strong> 两种引擎。</p><ul><li><p><strong>MyISAM</strong> 特点：</p><ul><li>不支持行锁，读取时对需要读到的所有表加锁，写入时则对表加排它锁</li><li>不支持事务</li><li>不支持外键</li><li>不支持崩溃后的安全恢复</li><li>在表有读取查询的同时，支持往表中插入新纪录</li><li>支持 <strong>BLOB</strong> 和 <strong>TEXT</strong> 的前 <strong>500</strong> 个字符索引，支持全文索引</li><li>支持延迟更新索引，极大提升写入性能</li><li>对于不会进行修改的表，支持压缩表，极大减少磁盘空间占用</li></ul></li><li><p><strong>InnoDB</strong> 特点：</p><ul><li>支持行锁，采用 MVCC（多版本并发控制） 来支持高并发</li><li>支持事务</li><li>支持外键</li><li>支持崩溃后的安全恢复</li><li>不支持全文索引</li></ul></li></ul><p>总体来讲，MyISAM 适合 SELECT 密集型的表，而 InnoDB 适合 INSERT 和 UPDATE 密集型的表。</p></li><li><p><strong>升级硬件</strong></p><p>软件不够，硬件来凑</p></li><li><p><strong>读写分离</strong></p><p>是目前常用的优化，从库读主库写，一般不要采用双主或多主引入很多复杂性，尽量采用其他方案来提高性能。同时目前很多拆分的解决方案同时也兼顾考虑了读写分离。</p></li><li><p><strong>缓存</strong></p><ul><li>MySQL 内部</li><li>应用服务层，及通过代码对大量相同查询做缓存处理</li><li>Web层：针对 web 页面做缓存</li><li>浏览器客户端：用户端的缓存</li></ul></li><li><p>分表</p><p>在可提前遇见某张表将来会有大量数据需要入表，可以通过一定规则将数据平均存储到多张表中，查询也从分表中查询。既可以提高数据存储量，也可以提高查询效率。</p></li><li><p><strong>表分区</strong></p><p><strong>MySQL</strong> 在 <strong>5.1</strong> 版引入的分区是一种简单的水平拆分，用户需要在建表的时候加上分区参数，对应用是透明的无需修改代码。</p><p>对用户来说，分区表是一个独立的逻辑表，但是底层由多个物理子表组成，实现分区的代码实际上是通过对一组底层表的对象封装，但对 <strong>SQL</strong> 层来说是一个完全封装底层的黑盒子。<strong>MySQL</strong> 实现分区的方式也意味着索引也是按照分区的子表定义，没有全局索引。</p><p>可以通过 <code>EXPLAIN PARTITIONS</code> 来查看某条 <strong>SQL</strong> 语句会落在那些分区上，从而进行 <strong>SQL</strong> 优化</p></li><li><p><strong>NoSQL</strong></p><p>结合 Redis、Memcached 等我不工具提升性能。</p></li></ul><h1 id="MySQL-如何确定命中索引"><a href="#MySQL-如何确定命中索引" class="headerlink" title="MySQL 如何确定命中索引"></a>MySQL 如何确定命中索引</h1><p>在项目开发中 SQL 是必不可少的，表索也一样。这些 SQL 的运行性能不知道吗？有多少是命中了索引的？命中哪个索引？索引中有哪个是无效索引？这些无效索引是否会影响系统的性能？带着这些问题我们一起来学习一下。</p><p><strong>MySql</strong> 中是通过 <strong>Explain</strong> 命令来分析低效 SQL 的执行计划。命令的使用很简单.</p><p>示例 <code>explain select * from user</code></p><p>执行结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql @192.168.13.201:<span class="hljs-built_in">test</span>&gt; explain select * from app_member;<br>+----+-------------+----------------+------+---------------+--------+---------+--------+--------+--------+<br>| id | select_type | table          | <span class="hljs-built_in">type</span> | possible_keys | key    | key_len | ref    | rows   | Extra  |<br>+----+-------------+----------------+------+---------------+--------+---------+--------+--------+--------+<br>| 1  | SIMPLE      | app_member | ALL  | &lt;null&gt;        | &lt;null&gt; | &lt;null&gt;  | &lt;null&gt; | 102776 | &lt;null&gt; |<br>+----+-------------+----------------+------+---------------+--------+---------+--------+--------+--------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span><br>Time: 0.009s<br></code></pre></td></tr></table></figure><p>执行结果每一列的说明：</p><ul><li><p><strong>select_type</strong> : 查询类型，常见的值：</p><ul><li><code>SIMPLE</code>：简单表，不使用表连接或子查询。</li><li><code>PRIMARY</code> : 主查询，外层的查询。</li><li><code>UNION</code> 第二个或者后面的查询语句。</li><li><code>SUBQUERY</code> : 子查询中的第一个select</li></ul></li><li><p><strong>table</strong> ：输出结果的表</p></li><li><p><strong>type</strong> : 表示MySql在表中找到所需行的方式，或者叫访问类型。常见的类型：</p><p>ALL、index、range、ref、eq_ref、const,system、NULL。</p><p>从左到右，性能由最差到最好。</p></li><li><p><strong>possible_keys</strong> : 可能使用的索引列表.</p></li><li><p><strong>key</strong> : 实现执行使用索引列表</p></li><li><p><strong>key_len</strong> : 索引的长度</p></li><li><p><strong>ref</strong> : 显示使用哪个列或常数与 key 一起从表中选择行。</p></li><li><p><strong>row</strong> : 执行查询的行数，简单且重要，数值越大越不好，说明没有用好索引</p></li><li><p><strong>Extra</strong>: 该列包含 MySQ L解决查询的详细信息。</p></li></ul><p>详解查看： <a href="https://www.cnblogs.com/stevenchen2016/p/5770214.html">MySql优化-你的SQL命中索引了吗</a></p><h1 id="Laravel-和-ThinkPHP"><a href="#Laravel-和-ThinkPHP" class="headerlink" title="Laravel 和 ThinkPHP"></a>Laravel 和 ThinkPHP</h1><ul><li><p>ThinkPHP简单、快速，基于MVC和面向对象，易用性较高，是一款简洁实用的轻量级框架。</p></li><li><p>Lavavel一直秉承着优雅的原则，很好的支持了composer，实现了更丰富的扩展，社区文档活跃，相较于TP，Lavavel更庞大，安全性也更高，更适合开发大中型项目，被称为“巨匠型开发框架”。</p></li><li><p>Laravel 提供了 <code>.env</code> 文件存放公共配置信息，在经常切换工作地点、服务器更加灵活方便。</p></li><li><p>Laravel 在表单提交的时候会有 csrf  跨站请求伪造验证，Tp5则没有。</p></li><li><p>Laravel 通过 <code>make:migration</code> 创建表迁移文件，使得表迁移更加方便。</p></li><li><p>Laravel 模板语法功能丰富，强大</p></li><li><p>Laravel 使用范围广，热度高，文档齐全；ThinkPHP 主要服务在国内。</p></li></ul><h1 id="Laravel亮点"><a href="#Laravel亮点" class="headerlink" title="Laravel亮点"></a>Laravel亮点</h1><p>Laravel 框架的设计思想比较先进，非常适合应用各种开发模式，作为一个框架，它为你准备好了一切。composer 是 php 的未来，没有 composer，php 肯定要走向没落。 laravel 框架最大的特点和优秀之处就是集合了 php 比较新的特性，以及各种各样的设计模式,、Ioc模式、依赖注入等。</p><p><strong>特点</strong></p><ul><li><strong>强大的 router路由功能</strong>：用简单的回调函数就可以调用，快速绑定 controller 和 router</li><li><strong>artisan</strong>：命令行工具，很多手动的工作都自动化</li><li>可继承的模，简化 view 的开发和管理</li><li><strong>blade模板</strong>：渲染速度更快</li><li>ORM 操作数据库</li><li><strong>migration</strong>：管理数据库和版本控制</li><li>测试功能也很强大</li><li>composer也是亮点</li><li>laravel 框架引入了门面、依赖注入、Ioc模式、以及各种各样的设计模式等</li></ul><p><strong>为什么使用 Laravel</strong></p><ul><li><p>使用了大量设计模式以及 PHP 的新特性，框架完全符合设计模式的五大基本原则（面向对象设计模式有5大基本原则：单一职责原则、开发封闭原则、依赖倒置原则、接口隔离原则、Liskov(里是替换)原则。），模块之间耦合度很低，服务容器可以方便的扩展框架功能以及编写测试。</p></li><li><p>能快速开发出功能，自带各种方便的服务，比如数据验证、队列、缓存、数据迁移、测试、artisan 命令行等等，还有强大的 ORM 。</p></li></ul><h1 id="PHP7新特性"><a href="#PHP7新特性" class="headerlink" title="PHP7新特性"></a>PHP7新特性</h1><ul><li><p><strong>允许标量类型声明</strong></p><p>函数/方法中的参数，是可以加一个类型声明的（字符串(<a href="https://www.php.net/manual/zh/language.types.string.php">string</a>), 整数 (<em>int</em>), 浮点数 (<a href="https://www.php.net/manual/zh/language.types.float.php">float</a>), 以及布尔值 (<em>bool</em>)等）</p></li><li><p><strong>返回值类型声明</strong></p><p>PHP 7 增加了对<a href="https://www.php.net/manual/zh/functions.returning-values.php#functions.returning-values.type-declaration">返回类型声明</a>的支持。 类似于<a href="https://www.php.net/manual/zh/functions.arguments.php#functions.arguments.type-declaration">参数类型声明</a>，返回类型声明指明了函数返回值的类型。可用的<a href="https://www.php.net/manual/zh/functions.arguments.php#functions.arguments.type-declaration.types">类型</a>与参数声明中可用的类型相同。</p></li><li><p><strong>null合并运算符<code>??</code></strong></p><p>如果变量存在且值不为**<code>NULL</code>**， 它就会返回自身的值，否则返回它的第二个操作数。</p></li><li><p><strong>太空船操作符</strong></p><p>太空船操作符用于比较两个表达式。当$a小于、等于或大于$b时它分别返回-1、0或1。</p></li><li><p><strong>define允许定义常量数组</strong></p><p><a href="https://www.php.net/manual/zh/language.types.array.php">Array</a> 类型的常量现在可以通过 <a href="https://www.php.net/manual/zh/function.define.php">define()</a> 来定义。在 PHP5.6 中仅能通过 <a href="https://www.php.net/manual/zh/language.constants.syntax.php"><em>const</em></a> 定义。</p></li><li><p> <strong>匿名类</strong></p></li></ul><p>  现在支持通过<em>new class</em> 来实例化一个匿名类，这可以用来替代一些“用后即焚”的完整类定义。</p><ul><li><p><strong>Unicode codepoint 转译语法</strong></p><p>这接受一个以16进制形式的 Unicode codepoint，并打印出一个双引号或heredoc包围的 UTF-8 编码格式的字符串。 可以接受任何有效的 codepoint，并且开头的 0 是可以省略的。</p></li><li><p><strong>use分组命名空间</strong></p><p>从同一 <a href="https://www.php.net/manual/zh/language.namespaces.definition.php"><em>namespace</em></a> 导入的类、函数和常量现在可以通过单个 <a href="https://www.php.net/manual/zh/language.namespaces.importing.php"><em>use</em></a> 语句 一次性导入了。</p></li><li><p><strong>新增整数整除的函数intdiv()</strong></p><p>新加的函数 <a href="https://www.php.net/manual/zh/function.intdiv.php">intdiv()</a> 用来进行 整数的除法运算。</p></li><li><p><strong>新增的随机函数</strong></p></li></ul><h1 id="MySQL索引类型"><a href="#MySQL索引类型" class="headerlink" title="MySQL索引类型"></a>MySQL索引类型</h1><p>普通索引、主键索引、唯一索引、组合索引、全文索引</p><h1 id="MySQL事务隔离级别"><a href="#MySQL事务隔离级别" class="headerlink" title="MySQL事务隔离级别"></a>MySQL事务隔离级别</h1><table><thead><tr><th align="left">事务隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td align="left">读未提交（read-uncommitted）</td><td>是</td><td>是</td><td>是</td></tr><tr><td align="left">不可重复读（read-committed）</td><td>否</td><td>是</td><td>是</td></tr><tr><td align="left">可重复读（repeatable-read）</td><td>否</td><td>否</td><td>是</td></tr><tr><td align="left">串行化（serializable）</td><td>否</td><td>否</td><td>否</td></tr></tbody></table><ul><li>1、事务隔离级别为读提交时，写数据只会锁住相应的行</li><li>2、事务隔离级别为可重复读时，如果检索条件有索引（包括主键索引）的时候，默认加锁方式是next-key 锁；如果检索条件没有索引，更新数据时会锁住整张表。一个间隙被事务加了锁，其他事务是不能在这个间隙插入记录的，这样可以防止幻读。</li><li>3、事务隔离级别为串行化时，读写数据都会锁住整张表</li><li>4、隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。</li></ul><h1 id="Linux命令查找出日志文件中访问量最大的10个ip"><a href="#Linux命令查找出日志文件中访问量最大的10个ip" class="headerlink" title="Linux命令查找出日志文件中访问量最大的10个ip"></a>Linux命令查找出日志文件中访问量最大的10个ip</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat ip.txt|awk -F<span class="hljs-string">&quot; &quot;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>|sort|uniq -c|sort -nrt <span class="hljs-string">&quot; &quot;</span>|awk -F<span class="hljs-string">&quot; &quot;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>|head -10  <br></code></pre></td></tr></table></figure><p>每一步命令解释:</p><ul><li><p><code>cat ip.txt</code> ：将 ip.txt 文件内容输出到终端</p></li><li><p><code>|</code> ：通过管道符|将左边命令输出作为右边命令输入（后面|功能类似）</p></li><li><p><code>awk -F&quot; &quot; &#39;&#123;print $2&#125;&#39;</code></p></li></ul><ul><li><code>-F</code>： 指定输入文件拆分分隔符 -F” “: 以空格分隔<ul><li><code>&#123;print $2&#125;</code>:  分隔后每一行就分成了时间戳和 ip 两个单元 $1 指时间 $2 指 ip， print $2 即输出 ip。</li></ul></li></ul><ul><li><p><code>sort</code>： 对输出ip进行排序</p></li><li><p><code>uniq -c</code> 检查及删除文本文件中重复出现的行列 -c 或 –count 在每列旁边显示该行重复出现的次数。此时输出的数据格式为 出现次数 ip。</p></li><li><p><code>sort -nrt &quot; &quot;</code> 对输出结果排序。 -n ： 依照数值的大小排序 -r : 以相反的顺序来排序 -t : &lt;分隔字符&gt; 指定排序时所用的栏位分隔字符。</p></li><li><p>接着继续用 awk 将数据第二列 ip 输出</p></li><li><p>head -10 取前十条数据</p></li></ul><p>原文链接：<a href="https://blog.csdn.net/qq_33722172/java/article/details/84257910">https://blog.csdn.net/qq_33722172/java/article/details/84257910</a></p><h1 id="MySQL-最左原则原理"><a href="#MySQL-最左原则原理" class="headerlink" title="MySQL 最左原则原理"></a>MySQL 最左原则原理</h1><p><strong>什么是最左匹配原则</strong></p><p>最左优先，以<strong>最左边</strong>的为<strong>起点</strong>任何<strong>连续</strong>的<strong>索引</strong>都能匹配上。同时遇到<em>范围查询</em>(&gt;、&lt;、between、like就会停止匹配。</p><p><strong>最左匹配原则的原理</strong></p><p>最左匹配原则都是针对<strong>联合索引</strong>来说的。索引的底层是一颗 <code>B+树</code>，那么联合索引当然还是一颗B+树，只不过联合索引的健值数量不是一个，而是多个。构建一颗 <code>B+树</code> <strong>只能根据一个值来构建</strong>，因此<strong>数据库依据联合索引最左的字段来构建</strong> <code>B+树</code>。</p><h1 id="MySQL在查询主键信息，当表中存在其他索引时，会命中其他索引而非主键索引"><a href="#MySQL在查询主键信息，当表中存在其他索引时，会命中其他索引而非主键索引" class="headerlink" title="MySQL在查询主键信息，当表中存在其他索引时，会命中其他索引而非主键索引"></a>MySQL在查询主键信息，当表中存在其他索引时，会命中其他索引而非主键索引</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sql">MySQL <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> log;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `login_log` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `user_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;会员id&#x27;</span>,<br>  `country_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;国家&#x27;</span>,<br>  `country_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">45</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>  `province_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;省&#x27;</span>,<br>  `province_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">45</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>  `city_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;市&#x27;</span>,<br>  `city_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">45</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>  `login_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;登录ip&#x27;</span>,  <br>  `login_at` <span class="hljs-type">timestamp</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0000-00-00 00:00:00&#x27;</span> COMMENT <span class="hljs-string">&#x27;登录时间&#x27;</span>,<br>  `created_at` <span class="hljs-type">timestamp</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  KEY `cpc` (`country_id`,`province_id`,`city_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.003</span> sec)<br><br>MySQL [molbase]<span class="hljs-operator">&gt;</span> explain <span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> log;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------+---------------+-----+---------+-----+------+-------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> type <span class="hljs-operator">|</span> possible_keys <span class="hljs-operator">|</span> key <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> Extra <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------+---------------+-----+---------+-----+------+-------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">1</span>  <span class="hljs-operator">|</span>  SIMPLE  <span class="hljs-operator">|</span>  log  <span class="hljs-operator">|</span>index <span class="hljs-operator">|</span>   <span class="hljs-keyword">NULL</span>        <span class="hljs-operator">|</span> cpc <span class="hljs-operator">|</span>   <span class="hljs-number">15</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span><span class="hljs-operator">|</span> <span class="hljs-number">16613</span><span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> index<span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------+---------------+-----+---------+-----+------+-------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.003</span> sec)<br><br>MySQL [molbase]<span class="hljs-operator">&gt;</span> explain <span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> log force index(<span class="hljs-keyword">PRIMARY</span>);# 强制使用 <span class="hljs-keyword">primary</span> 索引<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------+---------------+-----+---------+-----+------+-------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> type <span class="hljs-operator">|</span> possible_keys <span class="hljs-operator">|</span> key <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> Extra <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------+---------------+-----+---------+-----+------+-------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE    <span class="hljs-operator">|</span>  log  <span class="hljs-operator">|</span> index <span class="hljs-operator">|</span>   <span class="hljs-keyword">NULL</span>        <span class="hljs-operator">|</span><span class="hljs-keyword">PRIMARY</span><span class="hljs-operator">|</span> <span class="hljs-number">15</span>    <span class="hljs-operator">|</span><span class="hljs-keyword">NULL</span><span class="hljs-operator">|</span> <span class="hljs-number">16613</span><span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> index<span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------+---------------+-----+---------+-----+------+-------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.003</span> sec)<br></code></pre></td></tr></table></figure><h1 id="Golang-特点，-goroutine-和-channel-如何配合工作的"><a href="#Golang-特点，-goroutine-和-channel-如何配合工作的" class="headerlink" title="Golang 特点， goroutine 和 channel 如何配合工作的"></a>Golang 特点， goroutine 和 channel 如何配合工作的</h1><h3 id="Golang-特点"><a href="#Golang-特点" class="headerlink" title="Golang 特点"></a>Golang 特点</h3><p>强类型静态编译型语言。</p><ul><li>更丰富的内置类型</li><li>函数多返回值</li><li>错误处理：defer、panic、recover</li><li>匿名函数和闭包</li><li>类型和接口</li><li><strong>并发编程</strong></li><li>反射</li><li>语言交互性</li><li>自动垃圾回收</li></ul><p><a href="https://studygolang.com/articles/14352">Golang九大特性</a></p><h3 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h3><p><strong>goroutine</strong> 是 go 语言中最为 NB 的设计，也是其魅力所在，goroutine 的本质是协程，是实现并行计算的核心。goroutine 使用方式非常的简单，只需使用 <code>go</code> 关键字即可启动一个协程，并且它是处于异步方式运行，你不需要等它运行完成以后在执行以后的代码。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs GO"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span> // 通过<span class="hljs-title">go</span>关键字启动一个协程来运行函数</span><br></code></pre></td></tr></table></figure><p>Go 语言最大的特色就是从语言层面支持并发（Goroutine），Goroutine 是 Go中最基本的执行单元。事实上每一个 Go 程序至少有一个 Goroutine：主 Goroutine。当程序启动时，它会自动创建。</p><h3 id="goroutine内部原理"><a href="#goroutine内部原理" class="headerlink" title="goroutine内部原理"></a>goroutine内部原理</h3><p>先理解几个概念：</p><ul><li><p><strong>并发</strong>：一个 cpu 上能同时执行多项任务，在很短时间内，cpu来回切换任务执行。</p></li><li><p><strong>并行</strong>：当系统有多个CPU时,每个CPU同一时刻都运行任务，互不抢占自己所在的CPU资源，同时进行，称为并行。</p></li><li><p><strong>进程</strong>：cpu在切换程序的时候，如果不保存上一个程序的状态（也就是我们常说的context–上下文），直接切换下一个程序，就会丢失上一个程序的一系列状态，于是引入了进程这个概念，用以划分好程序运行时所需要的资源。因此进程就是一个程序运行时候的所需要的基本资源单位（也可以说是程序运行的一个实体）。</p></li><li><p><strong>线程</strong>：有时被称为轻量级进程(Lightweight Process，LWP），是程序执行流的最小单元。一个标准的线程由线程ID，当前指令指针(PC），寄存器集合和堆(heap， 一般由程序员分配释放) 栈(stack，由编译器自动分配释放 ，存放函数的参数值，局部变量的值等)组成。另外，线程是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不拥有系统资源，只拥有一点儿在运行中必不可少的资源，但它可与同属一个进程的其它线程共享进程所拥有的全部资源。</p></li><li><p><strong>协程</strong>：又称微线程与子例程（或者称为函数）一样，协程（coroutine）也是一种程序组件。相对子例程而言，协程更为一般和灵活，但在实践中使用没有子例程那样广泛。</p><p>和线程类似，共享堆，不共享栈，协程的切换一般由程序员在代码中显式控制。它避免了上下文切换的额外耗费，兼顾了多线程的优点，简化了高并发程序的复杂。</p></li></ul><p>Goroutine和其他语言的协程（coroutine）在使用方式上类似，但从字面意义上来看不同（一个是Goroutine，一个是coroutine），再就是协程是一种协作任务控制机制，在最简单的意义上，协程不是并发的，而Goroutine支持并发的。因此Goroutine可以理解为一种Go语言的协程。同时它可以运行在一个或多个线程上。</p><h3 id="GO并发的实现原理"><a href="#GO并发的实现原理" class="headerlink" title="GO并发的实现原理"></a>GO并发的实现原理</h3><p>Go实现了两种并发形式。第一种是大家普遍认知的：多线程共享内存。其实就是Java或者C++等语言中的多线程开发。另外一种是Go语言特有的，也是Go语言推荐的：CSP（communicating sequential processes）并发模型。</p><p>CSP并发模型是在1970年左右提出的概念，属于比较新的概念，不同于传统的多线程通过共享内存来通信，CSP讲究的是“以通信的方式来共享内存”。</p><p>请记住下面这句话：<br><em>DO NOT COMMUNICATE BY SHARING MEMORY; INSTEAD, SHARE MEMORY BY COMMUNICATING.</em><br>“不要以共享内存的方式来通信，相反，要通过通信来共享内存。”</p><p>普通的线程并发模型，就是像Java、C++、或者Python，他们线程间通信都是通过共享内存的方式来进行的。非常典型的方式就是，在访问共享数据（例如数组、Map、或者某个结构体或对象）的时候，通过锁来访问，因此，在很多时候，衍生出一种方便操作的数据结构，叫做“线程安全的数据结构”。例如Java提供的包”java.util.concurrent”中的数据结构。Go中也实现了传统的线程并发模型。</p><p>Go的CSP并发模型，是通过<code>goroutine</code>和<code>channel</code>来实现的。</p><ul><li><code>goroutine</code> 是Go语言中并发的执行单位。有点抽象，其实就是和传统概念上的”线程“类似，可以理解为”线程“。</li><li><code>channel</code>是Go语言中各个并发结构体(<code>goroutine</code>)之前的通信机制。 通俗的讲，就是各个<code>goroutine</code>之间通信的”管道“，有点类似于Linux中的管道。</li></ul><p>生成一个<code>goroutine</code>的方式非常的简单：Go一下，就生成了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> f();<br></code></pre></td></tr></table></figure><p>通信机制<code>channel</code>也很方便，传数据用<code>channel &lt;- data</code>，取数据用<code>&lt;-channel</code>。</p><p>在通信过程中，传数据<code>channel &lt;- data</code>和取数据<code>&lt;-channel</code>必然会成对出现，因为这边传，那边取，两个<code>goroutine</code>之间才会实现通信。</p><p>而且不管传还是取，必阻塞，直到另外的<code>goroutine</code>传或者取为止。</p><p>示例如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>   messages := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">string</span>)<br><br>   <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; messages &lt;- <span class="hljs-string">&quot;ping&quot;</span> &#125;()<br><br>   msg := &lt;-messages<br>   fmt.Println(msg)<br>&#125;<br></code></pre></td></tr></table></figure><p>注意 main()本身也是运行了一个goroutine。</p><p>messages:= make(chan int) 这样就声明了一个阻塞式的无缓冲的通道</p><p>chan 是关键字 代表我要创建一个通道</p><h3 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h3><p>channel 俗称管道，用于数据传递或数据共享，其本质是一个先进先出的队列，使用 <code>goroutine+channel</code> 进行数据通讯简单高效，同时也线程安全，多个 goroutine 可同时修改一个 channel，不需要加锁。</p><p>channel可分为三种类型：</p><p><strong>只读channel</strong>：只能读channel里面数据，不可写入</p><p><strong>只写channel</strong>：只能写数据，不可读</p><p><strong>一般channel</strong>：可读可写</p><h3 id="channel使用"><a href="#channel使用" class="headerlink" title="channel使用"></a><strong>channel使用</strong></h3><p>定义和声明</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> readOnlyChan &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>            <span class="hljs-comment">// 只读chan</span><br><span class="hljs-keyword">var</span> writeOnlyChan <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-keyword">int</span>           <span class="hljs-comment">// 只写chan</span><br><span class="hljs-keyword">var</span> mychan  <span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>                     <span class="hljs-comment">//读写channel</span><br><span class="hljs-comment">//定义完成以后需要make来分配内存空间，不然使用会deadlock</span><br>mychan = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>,<span class="hljs-number">10</span>)<br><br><span class="hljs-comment">//或者</span><br>read_only := <span class="hljs-built_in">make</span> (&lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>,<span class="hljs-number">10</span>)<span class="hljs-comment">//定义只读的channel</span><br>write_only := <span class="hljs-built_in">make</span> (<span class="hljs-keyword">chan</span>&lt;- <span class="hljs-keyword">int</span>,<span class="hljs-number">10</span>)<span class="hljs-comment">//定义只写的channel</span><br>read_write := <span class="hljs-built_in">make</span> (<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>,<span class="hljs-number">10</span>)<span class="hljs-comment">//可同时读写</span><br></code></pre></td></tr></table></figure><p>读写数据需要注意的是：</p><ul><li>管道如果未关闭，在读取超时会则会引发 <code>deadlock</code> 异常</li><li>管道如果关闭进行写入数据会 <code>pannic</code></li><li>当管道中没有数据时候再行读取或读取到默认值，如 int 类型默认值是 0</li></ul><h3 id="goroutine-和-channel-如何配合工作"><a href="#goroutine-和-channel-如何配合工作" class="headerlink" title="goroutine 和 channel 如何配合工作"></a>goroutine 和 channel 如何配合工作</h3><p>goroutine 本质上是协程，可以理解为不受内核调度，而受 go 调度器管理的线程。goroutine 之间可以通过channel 进行通信或者说是数据共享，当然你也可以使用全局变量来进行数据共享。</p><p><a href="https://www.cnblogs.com/wdliu/p/9272220.html">go语言之行–golang核武器goroutine调度原理、channel详解</a></p><h1 id="CI-和-Laravel-区别、优缺点，Laravel-臃肿如何优化"><a href="#CI-和-Laravel-区别、优缺点，Laravel-臃肿如何优化" class="headerlink" title="CI 和 Laravel 区别、优缺点，Laravel 臃肿如何优化"></a>CI 和 Laravel 区别、优缺点，Laravel 臃肿如何优化</h1><p><strong>CodeIgniter</strong>：</p><p>优点：</p><ul><li><p>.框架简单，容易上手，学习成本低，文档详细</p></li><li><p>配置简单，全部的配置使用PHP脚本来配置，执行效率高</p></li><li><p>快速简洁，代码不多，执行性能高</p></li><li><p>自带了很多简单好用的library，框架适合小型应用</p></li><li><p>具有基本的路由功能，能够进行一定程度的路由</p></li><li><p>数据库层封装的不错，具有基本的MVC功能</p></li></ul><p>缺点：</p><ul><li>内部结构过于混乱，虽然简单易用，但缺乏扩展能力</li><li>框架略显简单，只能够满足小型应用，略微不太能够满足中型应用需要</li></ul><p><strong>Laravel</strong>：</p><p>优点：</p><ul><li>laravel的设计思想是很先进的，非常适合应用各种开发模式</li><li>支持composer包管理工具，扩展方便</li><li>集合了php 比较新的特性，以及各种各样的设计模式，Ioc 容器，依赖注入、门面、契约。测试功能等</li></ul><p>缺点：</p><ul><li>基于组件式的框架，所以比较臃肿</li></ul><p><strong>Laravel优化</strong></p><ul><li><p>配置文件缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">php artisan config:cache<span class="hljs-comment"># php artisan config:clear 清除 config 缓存</span><br></code></pre></td></tr></table></figure></li><li><p>route 缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">php artisan route:cache<span class="hljs-comment"># php artisan route:clear 清除 route 缓存</span><br></code></pre></td></tr></table></figure></li><li><p>类映射加载优化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">php artisan optimize --force<span class="hljs-comment"># php artisan clear-compiled 此命令会删除上面 optimize 生成的两个文件</span><br></code></pre></td></tr></table></figure></li><li><p>使用redis/memcached来储存session会话</p><p>在 config/session.php 里修改储存方式 <code>&#39;driver&#39; =&gt; &#39;redis&#39;,</code></p></li><li><p>使用专业的缓存驱动器</p><p>「缓存」是提高应用程序运行效率的法宝之一，默认缓存驱动是 <code>file</code> 文件缓存，建议切换到专业的缓存系统，如 Redis 或者 Memcached，不建议使用数据库缓存。</p><p>可以再配置文件 config/cache.php 里修改：<code>&#39;default&#39; =&gt; &#39;reids&#39;,</code></p></li></ul><h1 id="composer-工作原理，CI-如何引入-composer"><a href="#composer-工作原理，CI-如何引入-composer" class="headerlink" title="composer 工作原理，CI 如何引入 composer"></a>composer 工作原理，CI 如何引入 composer</h1><p><a href="https://www.php.cn/tool/composer/428240.html">https://www.php.cn/tool/composer/428240.html</a></p><p>什么是Composer？**</p><p>Composer 是 PHP 的一个依赖管理工具，简单的说就是我们的项目通常会使用其它代码库，这时仅仅是在项目中申明依赖哪些代码库，默认情况下它不会在全局安装任何东西。</p><p><strong>Composer的意义？</strong></p><p>对于现代语言而言，依赖管理工具基本上是标配。Java 有 Maven，Python 有 pip，Ruby 有 gem，Nodejs 有 npm。PHP 的则是 PEAR，不过 PEAR 坑不少：依赖处理容易出问题，配置非常复杂，难用的命令行接口等等。</p><p>正是因为Composer的出现，解决了项目依赖的问题，并使PHP开发工作因此变得如同堆积木一般。</p><p><strong>Composer工作原理</strong></p><p>Composer又是如何工作的呢，举个例子当我们去安装一个软件的时候，一般是通过app store 去安装。当我们开发PHP项目的时候，也会面临同样的问题。比如我们需要一个工具记录业务log，那这样我们是不是可以通过一个php的应用商店来下载我们需要的工具。</p><p>Packagist 是 Composer 的默认的开发包仓库。你可以将自己的安装包提交到 packagist，你在自己的 VCS （源码管理软件，比如 Github）仓库中新建了 tag 或更新了代码，packagist 都会自动构建一个新的开发包。这就是 packagist 目前的运作方式，packagist 允许直接上传开发包，发布自己的包。</p><p><strong>CI 如何引入 composer</strong></p><ul><li><p>新建<code>composer.json</code>文件，内容大概是</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;require&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;php&quot;</span> : <span class="hljs-string">&quot;&gt;= 5.6.7&quot;</span>,<br>    <span class="hljs-attr">&quot;filp/whoops&quot;</span> : <span class="hljs-string">&quot;*&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;repositories&quot;</span>: &#123;# 切换镜像源<br>    <span class="hljs-attr">&quot;packagist&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;composer&quot;</span>,<br>      <span class="hljs-attr">&quot;url&quot;</span>: <span class="hljs-string">&quot;https://packagist.phpcomposer.com&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在<code>index.php</code>中引入composer库</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//载入composer</span><br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;./vendor/autoload.php&#x27;</span>;<br></code></pre></td></tr></table></figure></li></ul><h1 id="ORM-如何实现链式操作"><a href="#ORM-如何实现链式操作" class="headerlink" title="ORM 如何实现链式操作"></a>ORM 如何实现链式操作</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># db.php</span><br><span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">db</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">where</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//code here</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">order</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//code here</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">limit</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//code here</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment"># index.php</span><br><span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-variable">$db</span> = <span class="hljs-keyword">new</span> db();<br><span class="hljs-variable">$db</span>-&gt;where()-&gt;order()-&gt;limit();<br></code></pre></td></tr></table></figure><p>原理很简单，在每个方法返回 <code>$this</code> Object 即可。</p><h1 id="一个-Class-的-construct-方法属性为-private，外部如何访问该类的方法"><a href="#一个-Class-的-construct-方法属性为-private，外部如何访问该类的方法" class="headerlink" title="一个 Class 的 __construct 方法属性为 private，外部如何访问该类的方法"></a>一个 Class 的 __construct 方法属性为 private，外部如何访问该类的方法</h1><p>题目要说的其实就是 PHP 单例模式的实现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">// 创建静态私有的变量保存该类对象</span><br>    <span class="hljs-built_in">static</span> <span class="hljs-keyword">private</span> <span class="hljs-variable">$instance</span>;<br> <br>    <span class="hljs-comment">// 防止使用 new 直接创建对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br><br>    <span class="hljs-comment">// 防止使用 clone 克隆对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__clone</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br><br>    <span class="hljs-built_in">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInstance</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 判断 $instance 是否是 Singleton 的对象，不是则创建</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">self</span>) &#123;<br>            <span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">self</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;我是一个单例模式&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sing</span> = Singleton::getInstance();<br><span class="hljs-variable">$sing</span>-&gt;test();<span class="hljs-comment">//我是一个单例模式</span><br><span class="hljs-variable">$sing2</span> = <span class="hljs-keyword">new</span> Singleton(); <span class="hljs-comment">//PHP Fatal error:  Uncaught Error: Call to private Singleton::__construct() from invalid context in /www/localhost/singleton.php:31</span><br><span class="hljs-variable">$sing3</span> = <span class="hljs-keyword">clone</span> <span class="hljs-variable">$sing</span>; <span class="hljs-comment">// PHP Fatal error:  Uncaught Error: Call to private Singleton::__clone() from context &#x27;&#x27; in /www/localhost/singleton.php:32</span><br></code></pre></td></tr></table></figure><h1 id="PHP-反射"><a href="#PHP-反射" class="headerlink" title="PHP 反射"></a>PHP 反射</h1><p><a href="https://www.cnblogs.com/daxiaohaha/p/11542374.html">PHP反射机制</a></p><h1 id="mysql中的回表查询与索引覆盖"><a href="#mysql中的回表查询与索引覆盖" class="headerlink" title="mysql中的回表查询与索引覆盖"></a>mysql中的回表查询与索引覆盖</h1><p><a href="https://www.cnblogs.com/yanggb/p/11252966.html">mysql中的回表查询与索引覆盖</a></p><h1 id="nginx反向代理配置"><a href="#nginx反向代理配置" class="headerlink" title="nginx反向代理配置"></a>nginx反向代理配置</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">location</span> / &#123;<br>     <span class="hljs-attribute">proxy_pass</span>  http://localhost:8080;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="nginx负载均衡配置"><a href="#nginx负载均衡配置" class="headerlink" title="nginx负载均衡配置"></a>nginx负载均衡配置</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><br></code></pre></td></tr></table></figure><h1 id="lt-php-echo-count-strlen-quot-http-www-php-net-quot-gt-的执行结果是？"><a href="#lt-php-echo-count-strlen-quot-http-www-php-net-quot-gt-的执行结果是？" class="headerlink" title="&lt;?php echo count(strlen(&quot;http://www.php.net&quot;)); ?&gt; 的执行结果是？"></a><code>&lt;?php echo count(strlen(&quot;http://www.php.net&quot;)); ?&gt;</code> 的执行结果是？</h1><p>执行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ php -r <span class="hljs-string">&#x27;echo count(strlen(&quot;https://www.php.net&quot;));&#x27;</span><br>PHP Warning:  count(): Parameter must be an array or an object that implements Countable <span class="hljs-keyword">in</span> Command line code on line 1<br></code></pre></td></tr></table></figure><p>注：*<code>count</code> — 计算数组中的单元数目，或对象中的属性个数*，即 <code>count</code> 变量只接受数组或者对象，上面给的是数字，所以报错。</p><h1 id="使用-list-函数需要注意什么？"><a href="#使用-list-函数需要注意什么？" class="headerlink" title="使用 list 函数需要注意什么？"></a>使用 list 函数需要注意什么？</h1><blockquote><p>list — 把数组中的值赋给一组变量</p></blockquote><ul><li><p>像 <a href="https://www.php.net/manual/zh/function.array.php">array()</a> 一样，这不是真正的函数，而是语言结构。 <strong>list()</strong> 可以在单次操作内就为一组变量赋值。</p></li><li><p><strong>list()</strong> 仅能用于数字索引的数组，并假定数字索引从 0 开始。</p></li></ul><h1 id="echo-print-print-r-的区别？"><a href="#echo-print-print-r-的区别？" class="headerlink" title="echo(),print(),print_r()的区别？"></a>echo(),print(),print_r()的区别？</h1><p><code>echo</code> 是一个语言结构，输出一个或多个字符串；</p><p><code>print()</code> 实际上不是一个函数（它是一个语言结构），因此你可以不必使用圆括号来括起它的参数列表，它输出一个字符串；</p><p><code>print_r ()</code> 是一个函数，打印变量的信息，基本类型，数组，对象。</p><h1 id="PHP5底层原理之垃圾回收机制"><a href="#PHP5底层原理之垃圾回收机制" class="headerlink" title="PHP5底层原理之垃圾回收机制"></a>PHP5底层原理之垃圾回收机制</h1><p><a href="/2020/05/26/PHP5%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/">PHP5垃圾回收机制</a></p><h1 id="如何在命令行下运行PHP脚本（写出两种方法），如何向PHP脚本传入参数？"><a href="#如何在命令行下运行PHP脚本（写出两种方法），如何向PHP脚本传入参数？" class="headerlink" title="如何在命令行下运行PHP脚本（写出两种方法），如何向PHP脚本传入参数？"></a>如何在命令行下运行PHP脚本（写出两种方法），如何向PHP脚本传入参数？</h1><p>方法：</p><ul><li><code>php </code> + 脚本文件</li><li><code>php -r &#39;PHP脚本&#39;</code></li></ul><p>传参：</p><p>直接在命令后面以空格形式接一个或多个参数即可，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$argc</span> &gt; <span class="hljs-number">1</span>) &#123;<br>    print_r(<span class="hljs-variable">$argv</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ php -r <span class="hljs-string">&#x27;if ($argc &gt; 1) &#123;print_r($argv);&#125; &#x27;</span> hello world, this is a <span class="hljs-built_in">test</span> !<br>Array<br>(<br>    [0] =&gt; Standard input code<br>    [1] =&gt; hello<br>    [2] =&gt; world,<br>    [3] =&gt; this<br>    [4] =&gt; is<br>    [5] =&gt; a<br>    [6] =&gt; <span class="hljs-built_in">test</span><br>    [7] =&gt; !<br>)<br></code></pre></td></tr></table></figure><h1 id="PHP-的-strtolower-和-strtoupper-函数在安装非中文系统的服务器下可能导致将汉字转换为乱码，请写两个替代函数实现兼容-Unicode-文字的字符串大小写转换。"><a href="#PHP-的-strtolower-和-strtoupper-函数在安装非中文系统的服务器下可能导致将汉字转换为乱码，请写两个替代函数实现兼容-Unicode-文字的字符串大小写转换。" class="headerlink" title="PHP 的 strtolower 和 strtoupper 函数在安装非中文系统的服务器下可能导致将汉字转换为乱码，请写两个替代函数实现兼容 Unicode 文字的字符串大小写转换。"></a>PHP 的 strtolower 和 strtoupper 函数在安装非中文系统的服务器下可能导致将汉字转换为乱码，请写两个替代函数实现兼容 Unicode 文字的字符串大小写转换。</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toUpper</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>) </span>&#123;<br>    <span class="hljs-variable">$b</span> = str_split(<span class="hljs-variable">$str</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// 对于多字节字符会按字节切割</span><br>    <span class="hljs-variable">$r</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$b</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$v</span>)&#123;<br>        <span class="hljs-variable">$v</span> = ord(<span class="hljs-variable">$v</span>); <span class="hljs-comment">// 将该字符转成 acsii 码</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$v</span> &gt;= <span class="hljs-number">97</span> &amp;&amp; <span class="hljs-variable">$v</span> &lt;= <span class="hljs-number">122</span>)&#123; <span class="hljs-comment">// 判断是否为小写字母</span><br>            <span class="hljs-variable">$v</span> -= <span class="hljs-number">32</span>; <span class="hljs-comment">// 转换成大写字母</span><br>        &#125;<br>        <span class="hljs-variable">$r</span> .= chr(<span class="hljs-variable">$v</span>); <span class="hljs-comment">// 将 ascii 码再转为相应的字符。</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$r</span>;<br>&#125;<br><span class="hljs-comment">//----------------------------</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toLower</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>) </span>&#123;<br>    <span class="hljs-variable">$b</span> = str_split(<span class="hljs-variable">$str</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// 对于多字节字符会按字节切割</span><br>    <span class="hljs-variable">$r</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$b</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$v</span>)&#123;<br>        <span class="hljs-variable">$v</span> = ord(<span class="hljs-variable">$v</span>); <span class="hljs-comment">// 将该字符转成 acsii 码</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$v</span> &gt;= <span class="hljs-number">65</span> &amp;&amp; <span class="hljs-variable">$v</span> &lt;= <span class="hljs-number">90</span>)&#123; <span class="hljs-comment">// 判断是否为大写字母</span><br>            <span class="hljs-variable">$v</span> += <span class="hljs-number">32</span>; <span class="hljs-comment">// 转换成大写字母</span><br>        &#125;<br>        <span class="hljs-variable">$r</span> .= chr(<span class="hljs-variable">$v</span>); <span class="hljs-comment">// 将 ascii 码再转为相应的字符。</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$r</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注：<em>在php中，不同编码下不相同，在GBK/GB2312编码下一个中文占2个字符，UTF-8/unicode编码下一个中文占3个字符；</em></p><h1 id="PHP-的-is-writable-无法准确判断一个文件或目录是否准确可写，请写一个函数判断文件会目录是否绝对可写"><a href="#PHP-的-is-writable-无法准确判断一个文件或目录是否准确可写，请写一个函数判断文件会目录是否绝对可写" class="headerlink" title="PHP 的 is_writable 无法准确判断一个文件或目录是否准确可写，请写一个函数判断文件会目录是否绝对可写"></a>PHP 的 is_writable 无法准确判断一个文件或目录是否准确可写，请写一个函数判断文件会目录是否绝对可写</h1><p>原文链接：<a href="https://blog.csdn.net/u013474436/java/article/details/50674040">https://blog.csdn.net/u013474436/java/article/details/50674040</a></p><p>is_writable bug存在两个方面，<br>1、在 <strong>windowns</strong> 中，当文件只有只读属性时，<code>is_writeable()</code> 函数才返回 false，当返回 true 时，该文件不一定是可写的。<br>2、在 <strong>Unix</strong> 中，当 php 配置文件中开启 <code>safe_mode</code> 时 (safe_mode=on)，<code>is_writeable()</code>同样不可用。<br>读取配置文件是否 <code>safe_mode</code> 是否开启。</p><p>如果是目录，在目录中新建文件并通过打开文件来判断；<br>如果是文件，可以通过打开文件（fopen），来测试文件是否可写。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_really_writable</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// If we&#x27;re on a Unix server with safe_mode off we call is_writable</span><br>    <span class="hljs-keyword">if</span> (DIRECTORY_SEPARATOR == <span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-keyword">AND</span> @ini_get(<span class="hljs-string">&quot;safe_mode&quot;</span>) == <span class="hljs-literal">FALSE</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> is_writable(<span class="hljs-variable">$file</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// For windows servers and safe_mode &quot;on&quot; installations we&#x27;ll actually</span><br>    <span class="hljs-comment">// write a file then read it.  Bah...</span><br>    <span class="hljs-keyword">if</span> (is_dir(<span class="hljs-variable">$file</span>))<br>    &#123;<br>        <span class="hljs-variable">$file</span> = rtrim(<span class="hljs-variable">$file</span>, <span class="hljs-string">&#x27;/&#x27;</span>).<span class="hljs-string">&#x27;/&#x27;</span>.md5(mt_rand(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>).mt_rand(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>));<br><br>        <span class="hljs-keyword">if</span> ((<span class="hljs-variable">$fp</span> = @fopen(<span class="hljs-variable">$file</span>, FOPEN_WRITE_CREATE)) === <span class="hljs-literal">FALSE</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">FALSE</span>;<br>        &#125;<br><br>        fclose(<span class="hljs-variable">$fp</span>);<br>        @chmod(<span class="hljs-variable">$file</span>, DIR_WRITE_MODE);<br>        @unlink(<span class="hljs-variable">$file</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">TRUE</span>;<br>    &#125;<br>    <span class="hljs-keyword">elseif</span> ( !is_file(<span class="hljs-variable">$file</span>) <span class="hljs-keyword">OR</span> (<span class="hljs-variable">$fp</span> = @fopen(<span class="hljs-variable">$file</span>, FOPEN_WRITE_CREATE)) === <span class="hljs-literal">FALSE</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">FALSE</span>;<br>    &#125;<br><br>    fclose(<span class="hljs-variable">$fp</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">TRUE</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="如何解决Redis雪崩、穿透、并发等5大难题"><a href="#如何解决Redis雪崩、穿透、并发等5大难题" class="headerlink" title="如何解决Redis雪崩、穿透、并发等5大难题"></a>如何解决Redis雪崩、穿透、并发等5大难题</h1><p>原文链接：<a href="https://blog.csdn.net/Chaoren666/java/article/details/89953969">https://blog.csdn.net/Chaoren666/java/article/details/89953969</a></p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>数据未加载到缓存中，或者缓存同一时间大面积的失效，从而导致所有请求都去查数据库，导致数据库CPU和内存负载过高，甚至宕机。</p><p>比如一个雪崩的简单过程：</p><ul><li><p>redis集群大面积故障</p></li><li><p>缓存失效，但依然大量请求访问缓存服务 redis</p></li><li><p>redis大量失效后，大量请求转向到 mysql 数据库</p></li><li><p>mysql的调用量暴增，很快就扛不住了，甚至直接宕机</p></li><li><p>由于大量的应用服务依赖mysql和redis的服务，这个时候很快会演变成各服务器集群的雪崩，最后网站彻底崩溃。</p></li></ul><h4 id="如何预防缓存雪崩："><a href="#如何预防缓存雪崩：" class="headerlink" title="如何预防缓存雪崩："></a>如何预防缓存雪崩：</h4><ul><li><strong>缓存的高可用性</strong></li></ul><p>缓存层设计成高可用，防止缓存大面积故障。即使个别节点、个别机器、甚至是机房宕掉，依然可以提供服务，例如 Redis Sentinel（哨兵） 和 Redis Cluster（集群） 都实现了高可用。</p><ul><li><strong>缓存降级</strong></li></ul><p>可以利用 <strong>ehcache</strong> 等本地缓存(暂时支持)，但主要还是对源服务访问进行限流、资源隔离（熔断）、降级等。</p><p>当访问量剧增、服务出现问题仍然需要保证服务还是可用的。系统可以根据一些关键数据进行自动降级，也可以配置开关实现人工降级，这里会涉及到运维的配合。</p><p>降级的最终目的是保证核心服务可用，即使是有损的。</p><p>比如推荐服务中，很多都是个性化的需求，假如个性化需求不能提供服务了，可以降级补充热点数据，不至于造成前端页面是个大空白。</p><p>在进行降级之前要对系统进行梳理，比如：哪些业务是核心(必须保证)，哪些业务可以容许暂时不提供服务(利用静态页面替换)等，以及配合服务器核心指标，来后设置整体预案，比如：</p><p>（1）一般：比如有些服务偶尔因为网络抖动或者服务正在上线而超时，可以自动降级；</p><p>（2）警告：有些服务在一段时间内成功率有波动（如在95~100%之间），可以自动降级或人工降级，并发送告警；</p><p>（3）错误：比如可用率低于90%，或者数据库连接池被打爆了，或者访问量突然猛增到系统能承受的最大阀值，此时可以根据情况自动降级或者人工降级；</p><p>（4）严重错误：比如因为特殊原因数据错误了，此时需要紧急人工降级。</p><ul><li>Redis备份和快速预热</li></ul><p>1)Redis数据备份和恢复</p><p>2)快速缓存预热</p><p>4.提前演练</p><p>最后，建议还是在项目上线前，演练缓存层宕掉后，应用以及后端的负载情况以及可能出现的问题，对高可用提前预演，提前发现问题。</p><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>缓存穿透是指查询一个一不存在的数据。例如：从缓存redis没有命中，需要从mysql数据库查询，查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，造成缓存穿透。</p><p><strong>解决思路</strong>：</p><p>如果查询数据库也为空，直接<strong>设置一个默认值存放到缓存</strong>，这样第二次到缓冲中获取就有值了，而不会继续访问数据库。设置一个过期时间或者当有值的时候将缓存中的值替换掉即可。</p><p>可以给key设置一些格式规则，然后查询之前先过滤掉不符合规则的 Key。</p><h3 id="缓存并发"><a href="#缓存并发" class="headerlink" title="缓存并发"></a>缓存并发</h3><p>这里的并发指的是多个 redis 的 client 同时 set key 引起的并发问题。其实 redis 自身就是单线程操作，多个 client 并发操作，按照先到先执行的原则，先到的先执行，其余的阻塞。当然，另外的解决方案是把 redis.set 操作放在<strong>队列中使其串行化</strong>，必须的一个一个执行。</p><h3 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热</h3><p>缓存预热就是系统上线后，将相关的缓存数据直接加载到缓存系统。</p><p>这样就可以避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据！</p><p><strong>解决思路</strong>：</p><ul><li><p>直接写个缓存刷新页面，上线时手工操作下；</p></li><li><p>数据量不大，可以在项目启动的时候自动进行加载；</p></li></ul><p>目的就是在系统上线前，将数据加载到缓存中。</p><h2 id="ES（ElasticSearch）"><a href="#ES（ElasticSearch）" class="headerlink" title="ES（ElasticSearch）"></a>ES（ElasticSearch）</h2><p>Elasticsearch 是一个分布式、RESTful 风格的搜索和数据分析引擎，能够解决不断涌现出的各种用例。 作为 Elastic Stack 的核心，它集中存储您的数据，帮助您发现意料之中以及意料之外的情况。</p><ul><li>分布式实时文件存储，并将每一个字段都编入索引，使其可以被搜索。</li><li>实时分析的分布式搜索引擎。</li><li>可以扩展到上百台服务器，处理PB级别的结构化或非结构化数据。</li></ul><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>Elasticsearch 是面向文档型数据库，<strong>一条数据在这里就是一个文档</strong>，用JSON作为文档序列化的格式，比如下面这条用户数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;name&quot;</span> :     <span class="hljs-string">&quot;John&quot;</span>,<br>    <span class="hljs-attr">&quot;sex&quot;</span> :      <span class="hljs-string">&quot;Male&quot;</span>,<br>    <span class="hljs-attr">&quot;age&quot;</span> :      <span class="hljs-number">25</span>,<br>    <span class="hljs-attr">&quot;birthDate&quot;</span>: <span class="hljs-string">&quot;1990/05/01&quot;</span>,<br>    <span class="hljs-attr">&quot;about&quot;</span> :    <span class="hljs-string">&quot;I love to go rock climbing&quot;</span>,<br>    <span class="hljs-attr">&quot;interests&quot;</span>: [ <span class="hljs-string">&quot;sports&quot;</span>, <span class="hljs-string">&quot;music&quot;</span> ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>Elasticsearch最关键的就是提供强大的索引能力。</p><p>Elasticsearch索引的精髓：</p><blockquote><p>一切设计都是为了提高搜索的性能</p></blockquote><p>另一层意思：为了提高搜索的性能，难免会牺牲某些其他方面，比如插入/更新，否则其他数据库不用混了。前面看到往 Elasticsearch 里插入一条记录，其实就是直接PUT一个json的对象，这个对象有多个 fields，比如上面例子中的 <em>name, sex, age, about, interests</em>，那么在插入这些数据到 Elasticsearch 的同时，Elasticsearch 还默默的为这些字段建立索引–倒排索引，因为 Elasticsearch 最<strong>核心功能是搜索</strong>。</p><h1 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h1><p>转载：<a href="https://www.jianshu.com/p/734cf729d77b">https://www.jianshu.com/p/734cf729d77b</a></p><p><strong>前言</strong></p><p>消息队列的性能好坏，其文件存储机制设计是衡量一个消息队列服务技术水平和最关键指标之一。下面将从Kafka文件存储机制和物理结构角度，分析Kafka是如何实现高效文件存储，及实际应用效果。</p><p><strong>1.1  Kafka的特性:</strong></p><ul><li>高吞吐量、低延迟：kafka每秒可以处理几十万条消息，它的延迟最低只有几毫秒，每个topic可以分多个partition, consumer group 对partition进行consume操作。</li><li>可扩展性：kafka集群支持热扩展</li><li>持久性、可靠性：消息被持久化到本地磁盘，并且支持数据备份防止数据丢失</li><li>容错性：允许集群中节点失败（若副本数量为n,则允许n-1个节点失败）</li><li>高并发：支持数千个客户端同时读写</li></ul><p><strong>1.2   Kafka的使用场景：</strong></p><ul><li>日志收集：一个公司可以用Kafka可以收集各种服务的log，通过kafka以统一接口服务的方式开放给各种consumer，例如hadoop、Hbase、Solr等。</li><li>消息系统：解耦和生产者和消费者、缓存消息等。</li><li>用户活动跟踪：Kafka经常被用来记录web用户或者app用户的各种活动，如浏览网页、搜索、点击等活动，这些活动信息被各个服务器发布到kafka的topic中，然后订阅者通过订阅这些topic来做实时的监控分析，或者装载到hadoop、数据仓库中做离线分析和挖掘。</li><li>运营指标：Kafka也经常用来记录运营监控数据。包括收集各种分布式应用的数据，生产各种操作的集中反馈，比如报警和报告。</li><li>流式处理：比如spark streaming和storm</li><li>事件源</li></ul><h1 id="PHP-高并发和大流量的解决方案"><a href="#PHP-高并发和大流量的解决方案" class="headerlink" title="PHP-高并发和大流量的解决方案"></a>PHP-高并发和大流量的解决方案</h1><p>原文链接：<a href="https://blog.csdn.net/m_nanle_xiaobudiu/java/article/details/79261765">https://blog.csdn.net/m_nanle_xiaobudiu/java/article/details/79261765</a></p><p>高并发指的是在一个很短的单位时间内，有大量的用户对你的服务器发起请求。比如商城的“秒杀”或者淘宝的“双11”等。</p><h3 id="高并发架构相关概念"><a href="#高并发架构相关概念" class="headerlink" title="高并发架构相关概念"></a>高并发架构相关概念</h3><ul><li><p><strong>QPS</strong> (每秒查询率) : 每秒钟请求或者查询的数量，在互联网领域，指每秒响应请求数(指HTTP请求)</p></li><li><p><strong>PV</strong>（Page View）：综合浏览量，即页面浏览量或者点击量，一个访客在24小时内访问的页面数量</p></li></ul><p>–注：同一个人浏览你的网站的同一页面，只记做一次pv</p><ul><li><p><strong>吞吐量</strong>（fetches/sec） ：单位时间内处理的请求数量 （通常由QPS和并发数决定）</p></li><li><p><strong>响应时间</strong>：从请求发出到收到响应花费的时间</p></li><li><p><strong>独立访客</strong>（UV）：一定时间范围内，相同访客多次访问网站，只计算为1个独立访客</p></li><li><p><strong>带宽</strong>：计算带宽需关注两个指标，峰值流量和页面的平均大小</p></li><li><p><strong>日网站带宽</strong>： PV/统计时间（换算到秒） * 平均页面大小（kb）* </p></li></ul><h3 id="需要注意点"><a href="#需要注意点" class="headerlink" title="需要注意点"></a>需要注意点</h3><ul><li>QPS不等于并发连接数（QPS是每秒HTTP请求数量，并发连接数是系统同时处理的请求数量）</li><li>峰值每秒请求数（QPS）= （总PV数<em>80%）/ （六小时秒数</em>20%）【代表80%的访问量都集中在20%的时间内】</li><li>压力测试： 测试能承受的最大并发数 以及测试最大承受的QPS值</li><li>常用的性能测试工具：【ab，wrk，httpload，Web Bench，Siege，Apache JMeter】</li></ul><h3 id="对QPS各个层级的相应优化"><a href="#对QPS各个层级的相应优化" class="headerlink" title="对QPS各个层级的相应优化"></a>对QPS各个层级的相应优化</h3><table><thead><tr><th>QPS</th><th>优化方案</th></tr></thead><tbody><tr><td>小于50</td><td>小型网站，不考虑优化</td></tr><tr><td>QPS达到100</td><td>数据查询瓶颈，考虑做数据库缓存层或者数据库的负载均衡</td></tr><tr><td>QPS达到800</td><td>带宽瓶颈，考虑使用CDN加速或者负载均衡</td></tr><tr><td>QPS达到1000</td><td>HTML静态缓存</td></tr><tr><td>QPS达到2000</td><td>业务分离，分布式缓存</td></tr></tbody></table><h3 id="高并发解决方案"><a href="#高并发解决方案" class="headerlink" title="高并发解决方案"></a>高并发解决方案</h3><table><thead><tr><th>模 块</th><th>优 化</th></tr></thead><tbody><tr><td>流量</td><td>防止盗链，限制文件下载的大小</td></tr><tr><td>前端</td><td>减少HTTP请求（CSS，JS合并），异步请求，启用浏览器缓存，文件压缩，CDN加速，建立独立的图片服务器</td></tr><tr><td>服务器</td><td>页面静态化，并发处理，队列处理</td></tr><tr><td>数据库</td><td>数据库缓存，分区、分库、分表，读写分离，负载均衡</td></tr><tr><td>web服务器</td><td>Nginx反向代理实现负载均衡，LVS实现负载均衡</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis哨兵模式</title>
    <link href="/2020/05/14/redis/Redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/05/14/redis/Redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="sentinel-conf"><a href="#sentinel-conf" class="headerlink" title="sentinel.conf"></a>sentinel.conf</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Example sentinel.conf</span><br><br><span class="hljs-comment"># *** IMPORTANT ***</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># By default Sentinel will not be reachable from interfaces different than</span><br><span class="hljs-comment"># localhost, either use the &#x27;bind&#x27; directive to bind to a list of network</span><br><span class="hljs-comment"># interfaces, or disable protected mode with &quot;protected-mode no&quot; by</span><br><span class="hljs-comment"># adding it to this configuration file.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Before doing that MAKE SURE the instance is protected from the outside</span><br><span class="hljs-comment"># world via firewalling or other means.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># For example you may use one of the following:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># bind 127.0.0.1 192.168.1.1</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># protected-mode no</span><br><br><span class="hljs-comment"># port &lt;sentinel-port&gt;</span><br><span class="hljs-comment"># The port that this sentinel instance will run on</span><br>port 26379<br><br><span class="hljs-comment"># By default Redis Sentinel does not run as a daemon. Use &#x27;yes&#x27; if you need it.</span><br><span class="hljs-comment"># Note that Redis will write a pid file in /var/run/redis-sentinel.pid when</span><br><span class="hljs-comment"># daemonized.</span><br>daemonize no<br><br><span class="hljs-comment"># When running daemonized, Redis Sentinel writes a pid file in</span><br><span class="hljs-comment"># /var/run/redis-sentinel.pid by default. You can specify a custom pid file</span><br><span class="hljs-comment"># location here.</span><br>pidfile /var/run/redis-sentinel.pid<br><br><span class="hljs-comment"># Specify the log file name. Also the empty string can be used to force</span><br><span class="hljs-comment"># Sentinel to log on the standard output. Note that if you use standard</span><br><span class="hljs-comment"># output for logging but daemonize, logs will be sent to /dev/null</span><br>logfile <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># sentinel announce-ip &lt;ip&gt;</span><br><span class="hljs-comment"># sentinel announce-port &lt;port&gt;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The above two configuration directives are useful in environments where,</span><br><span class="hljs-comment"># because of NAT, Sentinel is reachable from outside via a non-local address.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># When announce-ip is provided, the Sentinel will claim the specified IP address</span><br><span class="hljs-comment"># in HELLO messages used to gossip its presence, instead of auto-detecting the</span><br><span class="hljs-comment"># local address as it usually does.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Similarly when announce-port is provided and is valid and non-zero, Sentinel</span><br><span class="hljs-comment"># will announce the specified TCP port.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The two options don&#x27;t need to be used together, if only announce-ip is</span><br><span class="hljs-comment"># provided, the Sentinel will announce the specified IP and the server port</span><br><span class="hljs-comment"># as specified by the &quot;port&quot; option. If only announce-port is provided, the</span><br><span class="hljs-comment"># Sentinel will announce the auto-detected local IP and the specified port.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Example:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># sentinel announce-ip 1.2.3.4</span><br><br><span class="hljs-comment"># dir &lt;working-directory&gt;</span><br><span class="hljs-comment"># Every long running process should have a well-defined working directory.</span><br><span class="hljs-comment"># For Redis Sentinel to chdir to /tmp at startup is the simplest thing</span><br><span class="hljs-comment"># for the process to don&#x27;t interfere with administrative tasks such as</span><br><span class="hljs-comment"># unmounting filesystems.</span><br>dir /tmp<br><br><span class="hljs-comment"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Tells Sentinel to monitor this master, and to consider it in O_DOWN</span><br><span class="hljs-comment"># (Objectively Down) state only if at least &lt;quorum&gt; sentinels agree.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Note that whatever is the ODOWN quorum, a Sentinel will require to</span><br><span class="hljs-comment"># be elected by the majority of the known Sentinels in order to</span><br><span class="hljs-comment"># start a failover, so no failover can be performed in minority.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Replicas are auto-discovered, so you don&#x27;t need to specify replicas in</span><br><span class="hljs-comment"># any way. Sentinel itself will rewrite this configuration file adding</span><br><span class="hljs-comment"># the replicas using additional configuration options.</span><br><span class="hljs-comment"># Also note that the configuration file is rewritten when a</span><br><span class="hljs-comment"># replica is promoted to master.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Note: master name should not include special characters or spaces.</span><br><span class="hljs-comment"># The valid charset is A-z 0-9 and the three characters &quot;.-_&quot;.</span><br>sentinel monitor mymaster 127.0.0.1 6379 2<br><br><span class="hljs-comment"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Set the password to use to authenticate with the master and replicas.</span><br><span class="hljs-comment"># Useful if there is a password set in the Redis instances to monitor.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Note that the master password is also used for replicas, so it is not</span><br><span class="hljs-comment"># possible to set a different password in masters and replicas instances</span><br><span class="hljs-comment"># if you want to be able to monitor these instances with Sentinel.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># However you can have Redis instances without the authentication enabled</span><br><span class="hljs-comment"># mixed with Redis instances requiring the authentication (as long as the</span><br><span class="hljs-comment"># password set is the same for all the instances requiring the password) as</span><br><span class="hljs-comment"># the AUTH command will have no effect in Redis instances with authentication</span><br><span class="hljs-comment"># switched off.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Example:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># sentinel auth-pass mymaster MySUPER--secret-0123passw0rd</span><br><br><span class="hljs-comment"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Number of milliseconds the master (or any attached replica or sentinel) should</span><br><span class="hljs-comment"># be unreachable (as in, not acceptable reply to PING, continuously, for the</span><br><span class="hljs-comment"># specified period) in order to consider it in S_DOWN state (Subjectively</span><br><span class="hljs-comment"># Down).</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Default is 30 seconds.</span><br>sentinel down-after-milliseconds mymaster 30000<br><br><span class="hljs-comment"># sentinel parallel-syncs &lt;master-name&gt; &lt;numreplicas&gt;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># How many replicas we can reconfigure to point to the new replica simultaneously</span><br><span class="hljs-comment"># during the failover. Use a low number if you use the replicas to serve query</span><br><span class="hljs-comment"># to avoid that all the replicas will be unreachable at about the same</span><br><span class="hljs-comment"># time while performing the synchronization with the master.</span><br>sentinel parallel-syncs mymaster 1<br><br><span class="hljs-comment"># sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Specifies the failover timeout in milliseconds. It is used in many ways:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># - The time needed to re-start a failover after a previous failover was</span><br><span class="hljs-comment">#   already tried against the same master by a given Sentinel, is two</span><br><span class="hljs-comment">#   times the failover timeout.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># - The time needed for a replica replicating to a wrong master according</span><br><span class="hljs-comment">#   to a Sentinel current configuration, to be forced to replicate</span><br><span class="hljs-comment">#   with the right master, is exactly the failover timeout (counting since</span><br><span class="hljs-comment">#   the moment a Sentinel detected the misconfiguration).</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># - The time needed to cancel a failover that is already in progress but</span><br><span class="hljs-comment">#   did not produced any configuration change (SLAVEOF NO ONE yet not</span><br><span class="hljs-comment">#   acknowledged by the promoted replica).</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># - The maximum time a failover in progress waits for all the replicas to be</span><br><span class="hljs-comment">#   reconfigured as replicas of the new master. However even after this time</span><br><span class="hljs-comment">#   the replicas will be reconfigured by the Sentinels anyway, but not with</span><br><span class="hljs-comment">#   the exact parallel-syncs progression as specified.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Default is 3 minutes.</span><br>sentinel failover-timeout mymaster 180000<br><br><span class="hljs-comment"># SCRIPTS EXECUTION</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># sentinel notification-script and sentinel reconfig-script are used in order</span><br><span class="hljs-comment"># to configure scripts that are called to notify the system administrator</span><br><span class="hljs-comment"># or to reconfigure clients after a failover. The scripts are executed</span><br><span class="hljs-comment"># with the following rules for error handling:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># If script exits with &quot;1&quot; the execution is retried later (up to a maximum</span><br><span class="hljs-comment"># number of times currently set to 10).</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># If script exits with &quot;2&quot; (or an higher value) the script execution is</span><br><span class="hljs-comment"># not retried.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># If script terminates because it receives a signal the behavior is the same</span><br><span class="hljs-comment"># as exit code 1.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># A script has a maximum running time of 60 seconds. After this limit is</span><br><span class="hljs-comment"># reached the script is terminated with a SIGKILL and the execution retried.</span><br><br><span class="hljs-comment"># NOTIFICATION SCRIPT</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># Call the specified notification script for any sentinel event that is</span><br><span class="hljs-comment"># generated in the WARNING level (for instance -sdown, -odown, and so forth).</span><br><span class="hljs-comment"># This script should notify the system administrator via email, SMS, or any</span><br><span class="hljs-comment"># other messaging system, that there is something wrong with the monitored</span><br><span class="hljs-comment"># Redis systems.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The script is called with just two arguments: the first is the event type</span><br><span class="hljs-comment"># and the second the event description.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The script must exist and be executable in order for sentinel to start if</span><br><span class="hljs-comment"># this option is provided.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Example:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># sentinel notification-script mymaster /var/redis/notify.sh</span><br><br><span class="hljs-comment"># CLIENTS RECONFIGURATION SCRIPT</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># When the master changed because of a failover a script can be called in</span><br><span class="hljs-comment"># order to perform application-specific tasks to notify the clients that the</span><br><span class="hljs-comment"># configuration has changed and the master is at a different address.</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># The following arguments are passed to the script:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># &lt;state&gt; is currently always &quot;failover&quot;</span><br><span class="hljs-comment"># &lt;role&gt; is either &quot;leader&quot; or &quot;observer&quot;</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># The arguments from-ip, from-port, to-ip, to-port are used to communicate</span><br><span class="hljs-comment"># the old address of the master and the new address of the elected replica</span><br><span class="hljs-comment"># (now a master).</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># This script should be resistant to multiple invocations.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Example:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># sentinel client-reconfig-script mymaster /var/redis/reconfig.sh</span><br><br><span class="hljs-comment"># SECURITY</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># By default SENTINEL SET will not be able to change the notification-script</span><br><span class="hljs-comment"># and client-reconfig-script at runtime. This avoids a trivial security issue</span><br><span class="hljs-comment"># where clients can set the script to anything and trigger a failover in order</span><br><span class="hljs-comment"># to get the program executed.</span><br><br>sentinel deny-scripts-reconfig yes<br><br><span class="hljs-comment"># REDIS COMMANDS RENAMING</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Sometimes the Redis server has certain commands, that are needed for Sentinel</span><br><span class="hljs-comment"># to work correctly, renamed to unguessable strings. This is often the case</span><br><span class="hljs-comment"># of CONFIG and SLAVEOF in the context of providers that provide Redis as</span><br><span class="hljs-comment"># a service, and don&#x27;t want the customers to reconfigure the instances outside</span><br><span class="hljs-comment"># of the administration console.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># In such case it is possible to tell Sentinel to use different command names</span><br><span class="hljs-comment"># instead of the normal ones. For example if the master &quot;mymaster&quot;, and the</span><br><span class="hljs-comment"># associated replicas, have &quot;CONFIG&quot; all renamed to &quot;GUESSME&quot;, I could use:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># SENTINEL rename-command mymaster CONFIG GUESSME</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># After such configuration is set, every time Sentinel would use CONFIG it will</span><br><span class="hljs-comment"># use GUESSME instead. Note that there is no actual need to respect the command</span><br><span class="hljs-comment"># case, so writing &quot;config guessme&quot; is the same in the example above.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># SENTINEL SET can also be used in order to perform this configuration at runtime.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># In order to set a command back to its original name (undo the renaming), it</span><br><span class="hljs-comment"># is possible to just rename a command to itsef:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># SENTINEL rename-command mymaster CONFIG CONFIG</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis常用配置信息</title>
    <link href="/2020/05/13/redis/Redis%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/"/>
    <url>/2020/05/13/redis/Redis%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis-常用配置信息"><a href="#Redis-常用配置信息" class="headerlink" title="Redis 常用配置信息"></a>Redis 常用配置信息</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ./redis-server /path/to/redis.conf#启动redis服务，</span><br><br><span class="hljs-comment"># 指定 redis 只接收来自于这些地址的请求，如果不进行设置，那么将处理所有请求</span><br><br><span class="hljs-comment"># 允许多个IP只需要在后面空格追加IP即可，例如：</span><br><span class="hljs-comment"># bind 127.0.0.1 192.168.15.75</span><br><span class="hljs-comment">#也可以使用 0.0.0.0 来接受所有 IP 的访问</span><br><span class="hljs-built_in">bind</span> 127.0.0.1 <br><br><span class="hljs-comment"># 保护模式是一层安全保护，以避免任何 Internet 上打开的 Redis 实例访问和利用。开启该参数后，redis只会本地进行访问，拒绝外部访问。</span><br><span class="hljs-comment"># 如下情况需要启用保护模式时：</span><br><span class="hljs-comment"># 1) 服务器未使用 bind 命令明确绑定到一组地址。</span><br><span class="hljs-comment"># 2) 没有配置密码。</span><br><span class="hljs-comment">#</span><br>protected-mode yes<br><br><span class="hljs-comment"># 默认端口 is 6379</span><br>port 6379<br><br><span class="hljs-comment"># requirepass 配置可以让用户使用 AUTH 命令来认证密码，才能使用其他命令。</span><br><span class="hljs-comment"># requirepass foobared</span><br><br><span class="hljs-comment"># 此参数确定了TCP连接中已完成队列(完成三次握手之后)的长度， 当然此值必须不大于Linux系统定义的 /proc/sys/net/core/somaxconn 值，默认是 511，而Linux的默认参数值是128。当系统并发量大并且客户端速度缓慢的时候，可以将这二个参数一起参考设定。</span><br><span class="hljs-comment"># 对于负载很大的服务程序来说大大的不够。一般会将 somaxconn值 修改为2048或者更大。</span><br>tcp-backlog 511<br><br><span class="hljs-comment"># 指定用于监听传入连接的 Unix 套接字的路径。没有默认值，因此在未指定 Redis 的情况下，Redis 不会在 Unix 套接字上侦听。</span><br><span class="hljs-comment"># unixsocket /tmp/redis.sock</span><br><span class="hljs-comment"># unixsocketperm 700</span><br><br><span class="hljs-comment"># 客户端闲置 N 秒后服务端会断开连接 (0 不关闭)</span><br>timeout 0<br><br><span class="hljs-comment"># 定时向 client 发送 tcp_ack 包来探测 client 是否存活的，单位（秒）。</span><br>tcp-keepalive 300<br><br><span class="hljs-comment"># 默认情况下，Redis 不会作为守护进程（守护进程）运行。 如果需要，请使用“是”。请注意，Redis 守护进程将在 /var/run/redis.pid 中写入一个 pid 文件。</span><br>daemonize no<br><br><span class="hljs-comment"># 当服务器在非守护进程下运行时，如果没有 pid 文件，则不会创建在配置中指定。守护服务器时，即使未指定，也会使用pid文件，默认为“ /var/run/redis.pid”。</span><br>pidfile /var/run/redis_6379.pid<br><br><span class="hljs-comment">#指定了服务端日志的级别。级别包括：debug（很多信息，方便开发、测试），verbose（许多有用的信息，但是没有debug级别信息多），notice（适当的日志级别，适合生产环境），warn（只有非常重要的信息）</span><br>loglevel notice<br><br><span class="hljs-comment"># 指定了记录日志的文件。空字符串的话，日志会打印到标准输出设备。后台运行的redis标准输出是/dev/null</span><br>logfile <span class="hljs-string">&quot;/var/log/redis_6379.log&quot;</span><br><br><span class="hljs-comment"># 数据库的数量，默认使用的数据库是0。可以通过”SELECT 【数据库序号】“命令选择一个数据库，序号从0开始</span><br>databases 16<br><br><span class="hljs-comment">################################ SNAPSHOTTING 磁盘快照 ################################</span><br><span class="hljs-comment"># RDB 核心规则配置 save &lt;指定时间间隔&gt; &lt;执行指定次数更新操作&gt;，满足条件就将内存中的数据同步到硬盘中。</span><br><span class="hljs-comment"># 官方出厂配置默认是:</span><br><span class="hljs-comment"># 1) 900 秒内有   1   个更改</span><br><span class="hljs-comment"># 2) 300 秒内有   10  个更改</span><br><span class="hljs-comment"># 3)  60 秒内有 10000 个更改</span><br><span class="hljs-comment"># 则将内存中的数据快照写入磁盘。若不想用RDB方案，可以把 save &quot;&quot; 的注释打开，下面三个注释</span><br><span class="hljs-comment">#   save &quot;&quot;</span><br>save 900 1<br>save 300 10<br>save 60 10000<br><br><span class="hljs-comment"># 但是，如果您设置了对 Redis 服务器和持久性的适当监视，则可能希望禁用此功能，以便即使磁盘，权限等出现问题，Redis 仍将继续照常工作（如果设置了监听，可以考虑关掉此设置）。</span><br>stop-writes-on-bgsave-error yes<br><br><span class="hljs-comment"># 配置存储至本地数据库时是否压缩数据，默认为 yes。Redis 采用 LZF 压缩方式，但占用了一点 CPU 的时间。若关闭该选项，但会导致数据库文件变的巨大。建议开启。</span><br>rdbcompression yes<br><br><span class="hljs-comment"># 从RDB版本5开始，CRC64 校验和位于文件末尾。这使得该格式更能抵抗损坏，但是在保存和加载 RDB文件时会</span><br><span class="hljs-comment"># 付出一定的性能损失（大约10％），因此可以禁用该格式以实现最佳性能。</span><br><span class="hljs-comment"># 在禁用校验和的情况下创建的RDB文件的校验和为零，这将指示加载代码跳过该校验。</span><br>rdbchecksum yes<br><br><span class="hljs-comment"># 数据目录，数据库的写入会在这个目录。rdb、aof文件也会写在这个目录</span><br><span class="hljs-comment"># dir ./</span><br> dir /home/www/redis/data/<br> <br><span class="hljs-comment"># 指定本地数据库文件名</span><br>dbfilename dump.rdb<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis服务器集群实战</title>
    <link href="/2020/05/13/redis/Redis%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E5%AE%9E%E6%88%98/"/>
    <url>/2020/05/13/redis/Redis%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Cluster-集群"><a href="#Cluster-集群" class="headerlink" title="Cluster 集群"></a>Cluster 集群</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><strong>sentinel</strong> 哨兵模式基本可以满足一般生产的需求，具备高可用性。但是当数据量过大到一台服务器存放不下的情况时，<strong>主从模式</strong>或 <strong>sentinel</strong> 模式就不能满足需求了，这个时候需要对存储的数据进行分片，将数据存储到多个<strong>Redis</strong>实例中。<strong>Cluster</strong> 模式的出现就是为了解决单机 <strong>Redis</strong> 容量有限的问题，将 <strong>Redis</strong> 的数据根据一定的规则分配到多台机器。</p><p><strong>Cluster</strong> 可以说是 <strong>sentinel</strong> 和 <strong>主从模式</strong> 的结合体，通过 <strong>Cluster</strong> 可以实现主从和 master 重选功能，所以如果配置两个副本三个分片的话，就需要六个 <strong>Redis</strong> 实例。因为 <strong>Redis</strong> 的数据是根据一定规则分配到 <strong>Cluster</strong> 的不同机器的，当数据量过大时，可以新增机器进行扩容。</p><p><strong>Redis-Cluster</strong> 采用无中心结构，它的特点如下：</p><ul><li>所有的 <strong>redis</strong> 节点彼此互联(PING-PONG机制)，内部使用二进制协议优化传输速度和带宽。</li><li>节点的 <code>fail</code> 是通过集群中超过半数的节点检测失效时才生效。</li><li>所有的节点都是一主一从（也可以是一主多从），其中从不提供服务，仅作为备用</li><li>客户端与 <strong>redis</strong> 节点直连，不需要中间代理层。客户端不需要连接集群所有节点，连接集群中任何一个可用节点即可。</li></ul><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><p>使用集群，只需要将 <strong>Redis</strong> 配置文件中的 <code>cluster-enable</code> 配置打开即可。每个集群中至少需要三个主数据库才能正常运行。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p><strong>Redis</strong> 集群需要三个服务器，每个服务器有需要要一个 <strong>salve</strong> 服务器，所以最少要准备六个 <strong>Redis</strong> 服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">两台机器，分别开启三个 redis 服务（端口）<br>192.168.15.68端口：7001,7002,7003<br>192.168.15.66端口：7001,7002,7003<br></code></pre></td></tr></table></figure><ul><li>修改配置文件</li></ul><p>192.168.15.68：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mkdir /usr/<span class="hljs-built_in">local</span>/redis-5.0.8/cluster<br>$ cp /usr/<span class="hljs-built_in">local</span>/redis-5.0.8/redis.conf /usr/<span class="hljs-built_in">local</span>/redis-5.0.8/cluster/redis_7001.conf<br>$ cp /usr/<span class="hljs-built_in">local</span>/redis-5.0.8/redis.conf /usr/<span class="hljs-built_in">local</span>/redis-5.0.8/cluster/redis_7002.conf<br>$ cp /usr/<span class="hljs-built_in">local</span>/redis-5.0.8/redis.conf /usr/<span class="hljs-built_in">local</span>/redis-5.0.8/cluster/redis_7003.conf<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ vim /usr/<span class="hljs-built_in">local</span>/redis-5.0.8/cluster/redis_7001.conf<br><br><span class="hljs-built_in">bind</span> 192.168.17.66 192.168.15.68<br>port 7001<br>daemonize yes<br>pidfile /var/run/redis_7001.pid<br>logfile <span class="hljs-string">&quot;/var/log/redis/redis_7001.log&quot;</span><br>dbfilename dump_7001.rdb<br>dir /var/lib/redis/<br>appendonly yes<br>appendfilename <span class="hljs-string">&quot;appendonly_7001.aof&quot;</span><br>cluster-enabled yes<br>cluster-config-file nodes_7001.conf<br>cluster-node-timeout 15000<br>masterauth 123456<br>requirepass 123456<br><br>......<br></code></pre></td></tr></table></figure><p>其它 **5 **个配置与 <code>redis_7001.conf</code> 一致，此处省略。</p><ul><li>开放端口，启动 <strong>redis</strong> 服务：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ firewall-cmd --zone=public --add-port=7001/tcp --permanent<br>success<br>$ firewall-cmd --zone=public --add-port=17001/tcp --permanent<br>success<br>$ firewall-cmd --zone=public --add-port=7002/tcp --permanent<br>success<br>$ firewall-cmd --zone=public --add-port=17002/tcp --permanent<br>success<br>$ firewall-cmd --zone=public --add-port=7003/tcp --permanent<br>success<br>$ firewall-cmd --zone=public --add-port=17003/tcp --permanent<br>success<br>$ firewall-cmd --reload<br>success<br>$ firewall-cmd --list-ports<br>80/tcp 6379/tcp 7001/tcp 7002/tcp 7003/tcp 17001/tcp 17002/tcp 17003/tcp 7004/tcp 17004/tcp<br>$ redis-server /usr/<span class="hljs-built_in">local</span>/redis-5.0.8/cluster/redis_7001.conf<br>$ redis-server /usr/<span class="hljs-built_in">local</span>/redis-5.0.8/cluster/redis_7002.conf<br>$ redis-server /usr/<span class="hljs-built_in">local</span>/redis-5.0.8/cluster/redis_7003.conf<br></code></pre></td></tr></table></figure><p>另一台服务器进行同样的配置。<strong>注意</strong>，这里在启动一个端口时，同时启动了 <code>+10000</code> 端口（请注意，重新映射时，如果未设置总线端口，通常将使用 <code>10000</code> 的固定偏移量。）。</p><h2 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h2><p>所有环境准备完毕后，开始创建集群：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ redis-cli -a 123456 --cluster create 192.168.15.68:7001 192.168.15.68:7002 192.168.15.68:7003 192.168.17.66:7001 192.168.17.66:7002 192.168.17.66:7003 --cluster-replicas 1<br><span class="hljs-comment"># *注意*：`redis 5` 以后不再需要使用 `ruby` 组建进行创建集群了，直接使用 `redis-cli` 创建集群即可。</span><br></code></pre></td></tr></table></figure><p>集群创建成功：</p><p><img src="/images/redis%E9%9B%86%E7%BE%A4%E5%88%9B%E5%BB%BA.png" alt="redis集群创建.png"></p><p>从图中可以看到，集群生成了三个 <strong>master</strong> 和 对应的三个 <strong>slave</strong>，且一个 <strong>salve</strong> 对应一个 <strong>master</strong>。</p><p>集群自动生成了 <code>nodes.conf</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ls /var/lib/redis/<br>appendonly_7001.aof  appendonly_7004.aof  dump_7002.rdb  nodes_7001.conf  nodes_7004.conf<br>appendonly_7002.aof  appendonly.aof       dump_7003.rdb  nodes_7002.conf<br>appendonly_7003.aof  dump_7001.rdb        dump.rdb       nodes_7003.conf<br></code></pre></td></tr></table></figure><h2 id="集群操作"><a href="#集群操作" class="headerlink" title="集群操作"></a>集群操作</h2><ul><li><p>登陆集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ redis-cli -c -h 192.168.17.66 -p 7001 -a 123456 <span class="hljs-comment"># -c，使用集群方式登录</span><br>Warning: Using a password with <span class="hljs-string">&#x27;-a&#x27;</span> or <span class="hljs-string">&#x27;-u&#x27;</span> option on the <span class="hljs-built_in">command</span> line interface may not be safe.<br>192.168.17.66:7001&gt; <br></code></pre></td></tr></table></figure></li><li><p>查看集群信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">192.168.17.66:7001&gt; CLUSTER INFO                   <span class="hljs-comment">#集群状态</span><br>cluster_state:ok<br>cluster_slots_assigned:16384<br>cluster_slots_ok:16384<br>cluster_slots_pfail:0<br>cluster_slots_fail:0<br>cluster_known_nodes:7<br>cluster_size:3<br>cluster_current_epoch:10<br>cluster_my_epoch:9<br>cluster_stats_messages_ping_sent:3049<br>cluster_stats_messages_pong_sent:3230<br>cluster_stats_messages_update_sent:1<br>cluster_stats_messages_sent:6280<br>cluster_stats_messages_ping_received:3230<br>cluster_stats_messages_pong_received:3045<br>cluster_stats_messages_update_received:4<br>cluster_stats_messages_received:6279<br></code></pre></td></tr></table></figure></li><li><p>列出节点信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">192.168.17.66:7001&gt; CLUSTER NODES                  <span class="hljs-comment">#列出节点信息</span><br>c1c22b5427ab32e0e4154a5b00c0d45a34fc9575 192.168.15.68:7003@17003 master - 0 1589519932000 9 connected 5461-10922<br>d26dce64338aabb3bf83b5844e4f0a5868ab5764 192.168.17.66:7002@17002 slave cd61db40efd55708c1074dd4e751a2959d460f79 0 1589519935512 10 connected<br>4349662174b6481bac831c4e062356b5433fa08f 192.168.15.68:7002@17002 master - 0 1589519932621 2 connected 10923-16383<br>c74f7cece02aca84266278cdd589cc6d7103a4fd 192.168.17.66:7003@17003 slave 4349662174b6481bac831c4e062356b5433fa08f 0 1589519932000 2 connected<br>cd61db40efd55708c1074dd4e751a2959d460f79 192.168.15.68:7001@17001 master - 0 1589519934628 10 connected 0-5460<br>e7db7b26b32dfd746e67d84e165ecdfd76ea0d1c 192.168.15.68:7004@17004 master - 0 1589519933555 0 connected<br>9fc6342460f3a4297260ad2a949056c899351720 192.168.17.66:7001@17001 myself,slave c1c22b5427ab32e0e4154a5b00c0d45a34fc9575 0 1589519934000 4 connected<br></code></pre></td></tr></table></figure><p>可以看到三个 <strong>master</strong> 以及各自对应的 <strong>slave</strong>。</p></li><li><p>写入数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">192.168.17.66:7001&gt; <span class="hljs-built_in">set</span> key111 111<br>-&gt; Redirected to slot [13680] located at 192.168.15.68:7002<br>OK<br>192.168.15.68:7002&gt; <span class="hljs-built_in">set</span> key222 222<br>-&gt; Redirected to slot [2320] located at 192.168.15.68:7001<br>OK<br>192.168.15.68:7001&gt; <span class="hljs-built_in">set</span> key333 333<br>-&gt; Redirected to slot [7472] located at 192.168.15.68:7003<br>OK<br>192.168.15.68:7003&gt; <span class="hljs-built_in">set</span> key444 444<br>-&gt; Redirected to slot [12752] located at 192.168.15.68:7002<br>OK<br>192.168.15.68:7002&gt; <span class="hljs-built_in">set</span> key555 555<br>-&gt; Redirected to slot [9712] located at 192.168.15.68:7003<br>OK<br></code></pre></td></tr></table></figure><p>可以看出 <strong>Redis Cluster</strong> 集群是去中心化的，每个 <strong>master</strong> 节点都是平等的，连接哪个节点都可以获取和设置数据。</p></li><li><p>增加节点</p><ul><li><p>添加节点配置文件，方法同上面一样</p></li><li><p>在集群中添加节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">192.168.15.68:7002&gt; CLUSTER MEET 192.168.15.68 7005<br>OK<br>192.168.17.66:7001&gt; CLUSTER NODES<br>192.168.17.66:7001&gt; CLUSTER NODES                  <span class="hljs-comment">#列出节点信息</span><br>c1c22b5427ab32e0e4154a5b00c0d45a34fc9575 192.168.15.68:7003@17003 master - 0 1589519932000 9 connected 5461-10922<br>d26dce64338aabb3bf83b5844e4f0a5868ab5764 192.168.17.66:7002@17002 slave cd61db40efd55708c1074dd4e751a2959d460f79 0 1589519935512 10 connected<br>4349662174b6481bac831c4e062356b5433fa08f 192.168.15.68:7002@17002 master - 0 1589519932621 2 connected 10923-16383<br>c74f7cece02aca84266278cdd589cc6d7103a4fd 192.168.17.66:7003@17003 slave 4349662174b6481bac831c4e062356b5433fa08f 0 1589519932000 2 connected<br>cd61db40efd55708c1074dd4e751a2959d460f79 192.168.15.68:7001@17001 master - 0 1589519934628 10 connected 0-5460<br>c7db7b234rf2dfd746e6784e165ecdfd76ea00db 192.168.15.68:7005@17005 master - 0 1589519933666 0 connected<br>ed34fcece02aca842662hg65d589cc6d7103a4t5 192.168.17.66:7005@17005 slave c7db7b234rf2dfd746e6784e165ecdfd76ea00db 0 1589519933666 2 connected<br>e7db7b26b32dfd746e67d84e165ecdfd76ea0d1c 192.168.15.68:7004@17004 master - 0 1589519933555 0 connected<br>9fc6342460f3a4297260ad2a949056c899351720 192.168.17.66:7001@17001 myself,slave c1c22b5427ab32e0e4154a5b00c0d45a34fc9575 0 1589519934000 4 connected<br></code></pre></td></tr></table></figure></li></ul></li><li><p>更换节点身份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-cli -c -h 192.168.15.68 -p 7001 -a 123456 cluster replicate e7db7b26b32dfd746e67d84e165ecdfd76ea0d1c<br></code></pre></td></tr></table></figure></li><li><p>删除节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">192.168.15.68:7001&gt; CLUSTER FORGET 9fc6342460f3a4297260ad2a949056c899351720<br>(error) ERR I tried hard but I can<span class="hljs-string">&#x27;t forget myself...     #无法删除登录节点</span><br><span class="hljs-string"></span><br><span class="hljs-string">192.168.15.68:7001&gt; CLUSTER FORGET c1c22b5427ab32e0e4154a5b00c0d45a34fc9575</span><br><span class="hljs-string">(error) ERR Can&#x27;</span>t forget my master!                   <span class="hljs-comment">#不能删除自己的master节点</span><br><br>192.168.15.68:7001&gt; CLUSTER FORGET c7db7b234rf2dfd746e6784e165ecdfd76ea00db<br>OK                <span class="hljs-comment">#可以删除其它的master节点</span><br></code></pre></td></tr></table></figure></li><li><p>保存配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">192.168.15.68:7001&gt; CLUSTER SAVECONFIG                 <span class="hljs-comment">#将节点配置信息保存到硬盘</span><br>OK<br></code></pre></td></tr></table></figure></li><li><p>模拟 <strong>master</strong> 节点挂掉：</p><p>192.168.15.68</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ps -ef | grep redis-server<br>root      5528     1  0 5月14 ?       00:00:56 redis-server 192.168.15.68:7003 [cluster]<br>root      6618     1  0 5月14 ?       00:00:54 redis-server 192.168.15.68:7004 [cluster]<br>root      8586     1  0 5月14 ?       00:00:49 redis-server 127.0.0.1:6379<br>root      8654     1  0 5月14 ?       00:00:52 redis-server 192.168.15.68:7001 [cluster]<br>root      8696     1  0 5月14 ?       00:00:53 redis-server 192.168.15.68:7002 [cluster]<br><br>$ <span class="hljs-built_in">kill</span> -9 8654<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">192.168.15.68:7003&gt; cluster nodes<span class="hljs-comment"># Kill 前</span><br>4349662174b6481bac831c4e062356b5433fa08f 192.168.15.68:7002@17002 master - 0 1589521299646 2 connected 10923-16383<br>c74f7cece02aca84266278cdd589cc6d7103a4fd 192.168.17.66:7003@17003 slave 4349662174b6481bac831c4e062356b5433fa08f 0 1589521298640 6 connected<br>e7db7b26b32dfd746e67d84e165ecdfd76ea0d1c 192.168.15.68:7004@17004 master - 0 1589521297628 0 connected<br>d26dce64338aabb3bf83b5844e4f0a5868ab5764 192.168.17.66:7002@17002 slave cd61db40efd55708c1074dd4e751a2959d460f79 0 1589521294000 10 connected<br>cd61db40efd55708c1074dd4e751a2959d460f79 192.168.15.68:7001@17001 master - 1589521298236 1589521293594 10 disconnected 0-5460<br>9fc6342460f3a4297260ad2a949056c899351720 192.168.17.66:7001@17001 slave c1c22b5427ab32e0e4154a5b00c0d45a34fc9575 0 1589521300688 9 connected<br>c1c22b5427ab32e0e4154a5b00c0d45a34fc9575 192.168.15.68:7003@17003 myself,master - 0 1589521298000 9 connected 5461-10922<br><br>192.168.15.68:7003&gt; cluster nodes<span class="hljs-comment"># Kill 后</span><br>4349662174b6481bac831c4e062356b5433fa08f 192.168.15.68:7002@17002 master - 0 1589521325829 2 connected 10923-16383<br>c74f7cece02aca84266278cdd589cc6d7103a4fd 192.168.17.66:7003@17003 slave 4349662174b6481bac831c4e062356b5433fa08f 0 1589521326841 6 connected<br>e7db7b26b32dfd746e67d84e165ecdfd76ea0d1c 192.168.15.68:7004@17004 master - 0 1589521326000 0 connected<br>d26dce64338aabb3bf83b5844e4f0a5868ab5764 192.168.17.66:7002@17002 master - 0 1589521325000 11 connected 0-5460<br>cd61db40efd55708c1074dd4e751a2959d460f79 192.168.15.68:7001@17001 master,fail - 1589521298236 1589521293594 10 disconnected<br>9fc6342460f3a4297260ad2a949056c899351720 192.168.17.66:7001@17001 slave c1c22b5427ab32e0e4154a5b00c0d45a34fc9575 0 1589521325000 9 connected<br>c1c22b5427ab32e0e4154a5b00c0d45a34fc9575 192.168.15.68:7003@17003 myself,master - 0 1589521324000 9 connected 5461-10922<br></code></pre></td></tr></table></figure><p>对应 <code>7001</code> 的一行可以看到，<strong>master fail</strong>，状态为 <strong>disconnected</strong>；而对应 <code>7002</code> 的一行，<strong>slave</strong> 已经变成 <strong>master</strong>。</p></li><li><p>重启 <strong>7001</strong> 节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">192.168.15.68:7003&gt; cluster nodes<br>4349662174b6481bac831c4e062356b5433fa08f 192.168.15.68:7002@17002 master - 0 1589521575000 2 connected 10923-16383<br>c74f7cece02aca84266278cdd589cc6d7103a4fd 192.168.17.66:7003@17003 slave 4349662174b6481bac831c4e062356b5433fa08f 0 1589521579571 6 connected<br>e7db7b26b32dfd746e67d84e165ecdfd76ea0d1c 192.168.15.68:7004@17004 master - 0 1589521578441 0 connected<br>d26dce64338aabb3bf83b5844e4f0a5868ab5764 192.168.17.66:7002@17002 master - 0 1589521577447 11 connected 0-5460<br>cd61db40efd55708c1074dd4e751a2959d460f79 192.168.15.68:7001@17001 slave d26dce64338aabb3bf83b5844e4f0a5868ab5764 0 1589521575513 11 connected<br>9fc6342460f3a4297260ad2a949056c899351720 192.168.17.66:7001@17001 slave c1c22b5427ab32e0e4154a5b00c0d45a34fc9575 0 1589521579000 9 connected<br>c1c22b5427ab32e0e4154a5b00c0d45a34fc9575 192.168.15.68:7003@17003 myself,master - 0 1589521577000 9 connected 5461-10922<br></code></pre></td></tr></table></figure><p>这里看到 <code>7001</code> 已经变为 <strong>salve</strong>节点了，并且是 <code>7003</code> 的节点。即 <strong>master</strong> 节点如果挂掉，它的 <strong>slave</strong> 节点变为新 <strong>master</strong> 节点继续对外提供服务，而原来的 <strong>master</strong> 节点如果重启，则变为新 <strong>master</strong> 节点的 <strong>slave</strong> 节点。</p></li></ul><p>更多参考：</p><p><a href="https://www.cnblogs.com/gossip/p/5993922.html">Redis集群常用命令</a></p><p>本文参考：<a href="https://blog.csdn.net/miss1181248983/article/details/90056960#commentBox">Redis集群详解</a></p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis主从服务器实战</title>
    <link href="/2020/05/13/redis/Redis%E4%B8%BB%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E6%88%98/"/>
    <url>/2020/05/13/redis/Redis%E4%B8%BB%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h1 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li>从服务器连接主服务器，发送 <code>SYNC</code> 命令；</li><li>主服务器接收到 <code>SYNC</code> 命名后，开始执行 <code>BGSAVE</code> 命令生成 <code>RDB</code> 文件并使用缓冲区记录此后执行的所有写命令；</li><li>主服务器 <code>BGSAVE</code> 执行完后，向所有从服务器发送快照文件，并在发送期间继续记录被执行的写命令；</li><li>从服务器收到快照文件后丢弃所有旧数据，载入收到的快照；</li><li>主服务器快照发送完毕后开始向从服务器发送缓冲区中的写命令；</li><li>从服务器完成对快照的载入，开始接收命令请求，并执行来自主服务器缓冲区的写命令；（<strong>从服务器初始化完成</strong>）</li><li>主服务器每执行一个写命令就会向从服务器发送相同的写命令，从服务器接收并执行收到的写命令（<strong>从服务器初始化完成后的操作</strong>）</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>支持主从复制，主机会自动将数据同步到从机，可以进行读写分离</li><li>为了分载 <strong>Master</strong> 的读操作压力，<strong>Slave</strong> 服务器可以为客户端提供只读操作的服务，写服务仍然必须由 <strong>Master</strong> 来完成</li><li><strong>Slave</strong> 同样可以接受其它 <strong>Slaves</strong> 的连接和同步请求，这样可以有效的分载 <strong>Master</strong> 的同步压力。</li><li><strong>Master Server</strong> 是以非阻塞的方式为 <strong>Slaves</strong> 提供服务。所以在 <strong>Master-Slave</strong> 同步期间，客户端仍然可以提交查询或修改请求。</li><li><strong>Slave Server</strong> 同样是以非阻塞的方式完成数据同步。在同步期间，如果有客户端提交查询请求，<strong>Redis</strong> 则返回同步之前的数据</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li><strong>Redis</strong> 不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的 <strong>IP</strong> 才能恢复。</li><li>主机宕机，宕机前有部分数据未能及时同步到从机，切换 <strong>IP</strong> 后还会引入数据不一致的问题，降低了系统的可用性。</li><li><strong>Redis</strong> 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。</li></ul><h1 id="主从复制实战"><a href="#主从复制实战" class="headerlink" title="主从复制实战"></a>主从复制实战</h1><h2 id="主服务器配置"><a href="#主服务器配置" class="headerlink" title="主服务器配置"></a>主服务器配置</h2><p>master IP：192.168.15.68</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 指定 redis 只接收来自于这些地址的请求，如果不进行设置，那么将处理所有请求</span><br><span class="hljs-comment"># bind 127.0.0.1 192.168.17.66 192.168.15.76</span><br><span class="hljs-built_in">bind</span> 0.0.0.0<span class="hljs-comment"># 指定IP报错，这里直接改为 0.0.0.0</span><br><br><span class="hljs-comment"># 默认端口 is 6379</span><br>port 6379<br><br><span class="hljs-comment"># 保护模式是一层安全保护，以避免任何 Internet 上打开的 Redis 实例访问和利用。开启该参数后，redis只会本地进行访问，拒绝外部访问（这里因为允许外部IP访问，所以因该设置为 no）。</span><br>protected-mode no<br><br><span class="hljs-comment"># requirepass 配置可以让用户使用 AUTH 命令来认证密码，才能使用其他命令。</span><br>requirepass redis:123:456<br><br><span class="hljs-comment"># 客户端闲置 N 秒后服务端会断开连接 (0 不关闭)</span><br>timeout 0<br><br><span class="hljs-comment"># 默认情况下，Redis 不会作为守护进程（守护进程）运行。 如果需要，请使用“是”。请注意，Redis 守护进程将在 /var/run/redis.pid 中写入一个 pid 文件。</span><br>daemonize yes<br><br><span class="hljs-comment"># 当服务器在非守护进程下运行时，如果没有 pid 文件，则不会创建在配置中指定。守护服务器时，即使未指定，也会使用pid文件，默认为“ /var/run/redis.pid”。</span><br>pidfile /var/run/redis_6379.pid<br><br><span class="hljs-comment">#服务端日志的级别。</span><br>loglevel notice<br><br><span class="hljs-comment"># 指定了记录日志的文件。空字符串的话，日志会打印到标准输出设备。后台运行的redis标准输出是/dev/null</span><br>logfile <span class="hljs-string">&quot;/var/log/redis_6379.log&quot;</span><br><br><span class="hljs-comment"># 数据库的数量，默认使用的数据库是0。</span><br>databases 16<br><br><span class="hljs-comment"># RDB 核心规则配置 save &lt;指定时间间隔&gt; &lt;执行指定次数更新操作&gt;，满足条件就将内存中的数据同步到硬盘中。</span><br>save <span class="hljs-string">&quot;&quot;</span><span class="hljs-comment"># 禁用 rdb，由从服务器生成 rdb 文件</span><br><span class="hljs-comment">#save 900 1</span><br><span class="hljs-comment">#save 300 10</span><br><span class="hljs-comment">#save 60 10000</span><br><br><span class="hljs-comment"># 指定本地数据库文件名</span><br>dbfilename dump_6379.rdb<br><br><br></code></pre></td></tr></table></figure><h2 id="slave服务器1配置"><a href="#slave服务器1配置" class="headerlink" title="slave服务器1配置"></a>slave服务器1配置</h2><p>slave1 IP：192.168.17.66</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 指定 redis 只接收来自于这些地址的请求，如果不进行设置，那么将处理所有请求</span><br><span class="hljs-built_in">bind</span> 127.0.0.1<br><br><span class="hljs-comment"># 默认端口 is 6379</span><br>port 6379<br><br><span class="hljs-comment"># 保护模式是一层安全保护，以避免任何 Internet 上打开的 Redis 实例访问和利用。开启该参数后，redis只会本地进行访问，拒绝外部访问（这里因为允许外部IP访问，所以因该设置为 no）。</span><br>protected-mode yes<br><br><span class="hljs-comment"># 客户端闲置 N 秒后服务端会断开连接 (0 不关闭)</span><br>timeout 0<br><br><span class="hljs-comment"># 默认情况下，Redis 不会作为守护进程（守护进程）运行。 如果需要，请使用“是”。请注意，Redis 守护进程将在 /var/run/redis.pid 中写入一个 pid 文件。</span><br>daemonize yes<br><br><span class="hljs-comment"># 当服务器在非守护进程下运行时，如果没有 pid 文件，则不会创建在配置中指定。守护服务器时，即使未指定，也会使用pid文件，默认为“ /var/run/redis.pid”。</span><br>pidfile /var/run/redis_6379.pid<br><br><span class="hljs-comment">#服务端日志的级别。</span><br>loglevel notice<br><br><span class="hljs-comment"># 指定了记录日志的文件。空字符串的话，日志会打印到标准输出设备。后台运行的redis标准输出是/dev/null</span><br>logfile <span class="hljs-string">&quot;/var/log/redis_6379.log&quot;</span><br><br><span class="hljs-comment"># 数据库的数量，默认使用的数据库是0。</span><br>databases 16<br><br><span class="hljs-comment"># RDB 核心规则配置 save &lt;指定时间间隔&gt; &lt;执行指定次数更新操作&gt;，满足条件就将内存中的数据同步到硬盘中。</span><br><span class="hljs-comment"># save &quot;&quot;</span><br>save 900 1<span class="hljs-comment"># 主服务器减少I/O，禁用 save rdb文件，由 slave1 来 save！</span><br>save 300 10<br>save 60 10000<br><br><span class="hljs-comment"># 指定本地数据库文件名</span><br>dbfilename dump_6379.rdb<br><br><span class="hljs-comment"># 复制选项，slave复制对应的master。</span><br>replicaof 192.168.15.68 6379<br><br><span class="hljs-comment"># 如果主服务器受密码保护，那么slave要连上master，需要有master的密码才行。</span><br>masterauth redis:123:456<br><br><span class="hljs-comment"># 当从库同主机失去连接或者复制正在进行，从服务器稳定输出，不报错</span><br>replica-serve-stale-data yes<br><br><span class="hljs-comment"># slave 服务器只读</span><br>replica-read-only yes<br></code></pre></td></tr></table></figure><h2 id="slave服务器2配置"><a href="#slave服务器2配置" class="headerlink" title="slave服务器2配置"></a>slave服务器2配置</h2><p>slave2 IP：192.168.15.76</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 指定 redis 只接收来自于这些地址的请求，如果不进行设置，那么将处理所有请求</span><br><span class="hljs-built_in">bind</span> 127.0.0.1<br><br><span class="hljs-comment"># 默认端口 is 6379</span><br>port 6379<br><br><span class="hljs-comment"># 保护模式是一层安全保护，以避免任何 Internet 上打开的 Redis 实例访问和利用。开启该参数后，redis只会本地进行访问，拒绝外部访问（这里因为允许外部IP访问，所以因该设置为 no）。</span><br>protected-mode yes<br><br><span class="hljs-comment"># 客户端闲置 N 秒后服务端会断开连接 (0 不关闭)</span><br>timeout 0<br><br><span class="hljs-comment"># 默认情况下，Redis 不会作为守护进程（守护进程）运行。 如果需要，请使用“是”。请注意，Redis 守护进程将在 /var/run/redis.pid 中写入一个 pid 文件。</span><br>daemonize yes<br><br><span class="hljs-comment"># 当服务器在非守护进程下运行时，如果没有 pid 文件，则不会创建在配置中指定。守护服务器时，即使未指定，也会使用pid文件，默认为“ /var/run/redis.pid”。</span><br>pidfile /var/run/redis_6379.pid<br><br><span class="hljs-comment">#服务端日志的级别。</span><br>loglevel notice<br><br><span class="hljs-comment"># 指定了记录日志的文件。空字符串的话，日志会打印到标准输出设备。后台运行的redis标准输出是/dev/null</span><br>logfile <span class="hljs-string">&quot;/var/log/redis_6379.log&quot;</span><br><br><span class="hljs-comment"># 数据库的数量，默认使用的数据库是0。</span><br>databases 16<br><br><span class="hljs-comment"># RDB 核心规则配置 save &lt;指定时间间隔&gt; &lt;执行指定次数更新操作&gt;，满足条件就将内存中的数据同步到硬盘中。</span><br>save <span class="hljs-string">&quot;&quot;</span><span class="hljs-comment"># 禁用 rdb，由slave1服务器生成 rdb 文件即可</span><br><span class="hljs-comment">#save 900 1</span><br><span class="hljs-comment">#save 300 10</span><br><span class="hljs-comment">#save 60 10000</span><br><br><span class="hljs-comment"># 指定本地数据库文件名</span><br>dbfilename dump_6379.rdb<br><br><span class="hljs-comment"># 复制选项，slave复制对应的master。</span><br>replicaof 192.168.15.68 6379<br><br><span class="hljs-comment"># 如果主服务器受密码保护，那么slave要连上master，需要有master的密码才行。</span><br>masterauth redis:123:456<br><br><span class="hljs-comment"># 当从库同主机失去连接或者复制正在进行，从服务器稳定输出，不报错</span><br>replica-serve-stale-data yes<br><br><span class="hljs-comment"># slave 服务器只读</span><br>replica-read-only yes<br></code></pre></td></tr></table></figure><h2 id="实际操作遇到问题"><a href="#实际操作遇到问题" class="headerlink" title="实际操作遇到问题"></a>实际操作遇到问题</h2><p>按照上面配置好主从服务器并重启 redis 服务后，并没有实现同步数据，查看 slave 服务器 redis 日志报错：</p><p>1）错误提示1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cat /var/<span class="hljs-built_in">log</span>/redis/redis.log<br>14015:S 13 May 2020 17:08:24.047 * Connecting to MASTER 192.168.15.68:6379<br>14015:S 13 May 2020 17:08:24.048 * MASTER &lt;-&gt; REPLICA sync started<br>14015:S 13 May 2020 17:08:24.049 <span class="hljs-comment"># Error condition on socket for SYNC: No route to host</span><br></code></pre></td></tr></table></figure><p>查阅资料发现是 <strong>master</strong> 服务器没有开放端口访问。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$firewall</span>-cmd --list-ports<br>80/tcp<br></code></pre></td></tr></table></figure><p>开放 <strong>master</strong> <code>redis</code> 端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ firewall-cmd --zone=public --add-port=6379/tcp --permanent<br>success<br>$ firewall-cmd --reload<br>success<br>$ firewall-cmd --list-ports<br>80/tcp 6379/tcp<br></code></pre></td></tr></table></figure><p>2）错误提示2：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">14015:S 13 May 2020 17:08:24.047 * Connecting to MASTER 192.168.15.68:6379<br>14015:S 13 May 2020 17:08:24.048 * MASTER &lt;-&gt; REPLICA sync started<br>14015:S 13 May 2020 17:08:24.049 <span class="hljs-comment"># Error condition on socket for SYNC: Connection refused</span><br></code></pre></td></tr></table></figure><p>查阅资料将 <strong>master</strong> 服务器 <code>bind</code> 端口改为开放所有：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 指定 redis 只接收来自于这些地址的请求，如果不进行设置，那么将处理所有请求</span><br><span class="hljs-built_in">bind</span> 0.0.0.0<br></code></pre></td></tr></table></figure><p>重启 <strong>master</strong> <code>redis</code> 服务，<code>slave</code> 服务器已经看到了成功信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">14015:S 13 May 2020 17:08:24.049 <span class="hljs-comment"># Error condition on socket for SYNC: Connection refused</span><br>14015:S 13 May 2020 17:08:25.050 * Connecting to MASTER 192.168.15.68:6379<br>14015:S 13 May 2020 17:08:25.050 * MASTER &lt;-&gt; REPLICA sync started<br>14015:S 13 May 2020 17:08:25.140 * Non blocking connect <span class="hljs-keyword">for</span> SYNC fired the event.<br>14015:S 13 May 2020 17:08:25.141 * Master replied to PING, replication can <span class="hljs-built_in">continue</span>...<br>14015:S 13 May 2020 17:08:25.144 * Partial resynchronization not possible (no cached master)<br>14015:S 13 May 2020 17:08:25.146 * Full resync from master: c658aa4725c9200d910e7704e58a44bf36a57e28:0<br>14015:S 13 May 2020 17:08:25.233 * MASTER &lt;-&gt; REPLICA sync: receiving 224 bytes from master<br>14015:S 13 May 2020 17:08:25.234 * MASTER &lt;-&gt; REPLICA sync: Flushing old data<br>14015:S 13 May 2020 17:08:25.234 * MASTER &lt;-&gt; REPLICA sync: Loading DB <span class="hljs-keyword">in</span> memory<br>14015:S 13 May 2020 17:08:25.234 * MASTER &lt;-&gt; REPLICA sync: Finished with success<br></code></pre></td></tr></table></figure><p><code>slave</code> 验证数据是否同步：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ redis-cli <br>127.0.0.1:6379&gt; keys *<br>1) <span class="hljs-string">&quot;to-slave&quot;</span><br>2) <span class="hljs-string">&quot;hello&quot;</span><br>127.0.0.1:6379&gt; get hello<br><span class="hljs-string">&quot;world&quot;</span><br>127.0.0.1:6379&gt; get to-slave<br><span class="hljs-string">&quot;hello this is master&quot;</span><br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure><p>至此，<code>redis</code> 主从同步实践成功！</p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis配置文件详解</title>
    <link href="/2020/05/11/redis/Redis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
    <url>/2020/05/11/redis/Redis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ redis-server -v<br>Redis server v=5.0.8 sha=00000000:0 malloc=jemalloc-5.1.0 bits=64 build=d21bcca96e4afc9c<br></code></pre></td></tr></table></figure><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br><span class="line">1471</span><br><span class="line">1472</span><br><span class="line">1473</span><br><span class="line">1474</span><br><span class="line">1475</span><br><span class="line">1476</span><br><span class="line">1477</span><br><span class="line">1478</span><br><span class="line">1479</span><br><span class="line">1480</span><br><span class="line">1481</span><br><span class="line">1482</span><br><span class="line">1483</span><br><span class="line">1484</span><br><span class="line">1485</span><br><span class="line">1486</span><br><span class="line">1487</span><br><span class="line">1488</span><br><span class="line">1489</span><br><span class="line">1490</span><br><span class="line">1491</span><br><span class="line">1492</span><br><span class="line">1493</span><br><span class="line">1494</span><br><span class="line">1495</span><br><span class="line">1496</span><br><span class="line">1497</span><br><span class="line">1498</span><br><span class="line">1499</span><br><span class="line">1500</span><br><span class="line">1501</span><br><span class="line">1502</span><br><span class="line">1503</span><br><span class="line">1504</span><br><span class="line">1505</span><br><span class="line">1506</span><br><span class="line">1507</span><br><span class="line">1508</span><br><span class="line">1509</span><br><span class="line">1510</span><br><span class="line">1511</span><br><span class="line">1512</span><br><span class="line">1513</span><br><span class="line">1514</span><br><span class="line">1515</span><br><span class="line">1516</span><br><span class="line">1517</span><br><span class="line">1518</span><br><span class="line">1519</span><br><span class="line">1520</span><br><span class="line">1521</span><br><span class="line">1522</span><br><span class="line">1523</span><br><span class="line">1524</span><br><span class="line">1525</span><br><span class="line">1526</span><br><span class="line">1527</span><br><span class="line">1528</span><br><span class="line">1529</span><br><span class="line">1530</span><br><span class="line">1531</span><br><span class="line">1532</span><br><span class="line">1533</span><br><span class="line">1534</span><br><span class="line">1535</span><br><span class="line">1536</span><br><span class="line">1537</span><br><span class="line">1538</span><br><span class="line">1539</span><br><span class="line">1540</span><br><span class="line">1541</span><br><span class="line">1542</span><br><span class="line">1543</span><br><span class="line">1544</span><br><span class="line">1545</span><br><span class="line">1546</span><br><span class="line">1547</span><br><span class="line">1548</span><br><span class="line">1549</span><br><span class="line">1550</span><br><span class="line">1551</span><br><span class="line">1552</span><br><span class="line">1553</span><br><span class="line">1554</span><br><span class="line">1555</span><br><span class="line">1556</span><br><span class="line">1557</span><br><span class="line">1558</span><br><span class="line">1559</span><br><span class="line">1560</span><br><span class="line">1561</span><br><span class="line">1562</span><br><span class="line">1563</span><br><span class="line">1564</span><br><span class="line">1565</span><br><span class="line">1566</span><br><span class="line">1567</span><br><span class="line">1568</span><br><span class="line">1569</span><br><span class="line">1570</span><br><span class="line">1571</span><br><span class="line">1572</span><br><span class="line">1573</span><br><span class="line">1574</span><br><span class="line">1575</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Redis配置文件示例。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 加载配置文件：</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># ./redis-server /path/to/redis.conf</span><br><br><span class="hljs-comment"># Note on units: when memory size is needed, it is possible to specify</span><br><span class="hljs-comment"># it in the usual form of 1k 5GB 4M and so forth:3333</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 1k =&gt; 1000 bytes</span><br><span class="hljs-comment"># 1kb =&gt; 1024 bytes</span><br><span class="hljs-comment"># 1m =&gt; 1000000 bytes</span><br><span class="hljs-comment"># 1mb =&gt; 1024*1024 bytes</span><br><span class="hljs-comment"># 1g =&gt; 1000000000 bytes</span><br><span class="hljs-comment"># 1gb =&gt; 1024*1024*1024 bytes</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># units are case insensitive so 1GB 1Gb 1gB are all the same.</span><br><br><span class="hljs-comment">################################## 包含其他配置文件 ###################################</span><br><br><span class="hljs-comment"># 如果你想在所有 Redis 服务器上，在公共配置文件之后加载其他的少量配置，可以 使用 include 来加载特殊的配置。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 注意，管员和 Redis 前哨不能通过命令 “CONFIG REWRITE” 重写 include 加载的配置文件。</span><br><span class="hljs-comment"># 因为 Redsi 始终使用最后一行作为配置的执行，所以为了不影响原有的配置信息，最好件开头使用 </span><br><span class="hljs-comment"># include 加载配置文件。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 相反如果你想用 include 加载的配置文件覆盖配置，因该在最后一行使用 include。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># include /path/to/local.conf</span><br><span class="hljs-comment"># include /path/to/other.conf</span><br><br><span class="hljs-comment">################################## 模块 #####################################</span><br><br><span class="hljs-comment"># Load modules at startup. If the server is not able to load modules</span><br><span class="hljs-comment"># it will abort. It is possible to use multiple loadmodule directives.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># loadmodule /path/to/my_module.so</span><br><span class="hljs-comment"># loadmodule /path/to/other_module.so</span><br><br><span class="hljs-comment">################################## 网络 #####################################</span><br><br><span class="hljs-comment"># 默认情况下，如果未指定“ bind”配置指令，则Redis侦听来自服务器上所有可用网络接口的连接。</span><br><span class="hljs-comment"># 使用以下功能可以只收听一个或多个所选接口</span><br><span class="hljs-comment"># “ bind”配置指令，后跟一个或多个IP地址。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Examples:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># bind 192.168.1.100 10.0.0.1</span><br><span class="hljs-comment"># bind 127.0.0.1 ::1</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># ~~~ WARNING ~~~ 如果运行Redis的计算机直接暴露于 Internet，则绑定到所有接口都是很危险的，</span><br><span class="hljs-comment"># 并且会将实例暴露给 Internet上 的所有人。因此，默认情况下，我们取消注释以下 bind 指令，它将强制 Redis 仅侦听 IPv4 环回接口地址（这意味着 Redis 将只能接受本机访问）。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 如果你确定你想将实例取监听所有的地址，只要放在下面一行即可。</span><br><span class="hljs-built_in">bind</span> 127.0.0.1<br><br><span class="hljs-comment"># Protected mode is a layer of security protection, in order to avoid that</span><br><span class="hljs-comment"># Redis instances left open on the internet are accessed and exploited. </span><br><span class="hljs-comment"># 保护模式是一层安全保护，以避免Internet上打开的Redis实例访问和利用。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 如下情况需要启用保护模式时：</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 1) 服务器未使用 bind 命令明确绑定到一组地址。</span><br><span class="hljs-comment"># 2) 没有配置密码。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 服务器接受以下集中方式连接：</span><br><span class="hljs-comment"># IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain</span><br><span class="hljs-comment"># sockets.</span><br>protected-mode yes<br><br><span class="hljs-comment"># Accept connections on the specified port, 默认端口 is 6379 (IANA #815344).</span><br><span class="hljs-comment"># If port 0 is specified 则Redis将不会在TCP套接字上侦听.</span><br>port 6379<br><br><span class="hljs-comment"># TCP listen() backlog.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># In high requests-per-second environments you need an high backlog in order</span><br><span class="hljs-comment"># to avoid slow clients connections issues. Note that the Linux kernel</span><br><span class="hljs-comment"># will silently truncate it to the value of /proc/sys/net/core/somaxconn so</span><br><span class="hljs-comment"># make sure to raise both the value of somaxconn and tcp_max_syn_backlog</span><br><span class="hljs-comment"># in order to get the desired effect. </span><br><span class="hljs-comment"># 此参数确定了TCP连接中已完成队列(完成三次握手之后)的长度， 当然此值必须不大于Linux系统定义的/proc/sys/net/core/somaxconn值，默认是511，而Linux的默认参数值是128。当系统并发量大并且客户端速度缓慢的时候，可以将这二个参数一起参考设定。</span><br><span class="hljs-comment"># 对于负载很大的服务程序来说大大的不够。一般会将 somaxconn值 修改为2048或者更大。</span><br>tcp-backlog 511<br><br><span class="hljs-comment"># Unix socket.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Specify the path for the Unix socket that will be used to listen for</span><br><span class="hljs-comment"># incoming connections. There is no default, so Redis will not listen</span><br><span class="hljs-comment"># on a unix socket when not specified.</span><br><span class="hljs-comment"># 指定用于监听传入连接的 Unix 套接字的路径。没有默认值，因此在未指定 Redis 的情况下，Redis 不会在 Unix 套接字上侦听。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># unixsocket /tmp/redis.sock</span><br><span class="hljs-comment"># unixsocketperm 700</span><br><br><span class="hljs-comment"># 客户端闲置N秒后关闭连接 (0 不关闭)</span><br>timeout 0<br><br><span class="hljs-comment"># TCP keepalive.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence</span><br><span class="hljs-comment"># of communication. This is useful for two reasons:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 1) Detect dead peers.</span><br><span class="hljs-comment"># 2) Take the connection alive from the point of view of network</span><br><span class="hljs-comment">#    equipment in the middle.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># On Linux, the specified value (in seconds) is the period used to send ACKs.</span><br><span class="hljs-comment"># Note that to close the connection the double of the time is needed.</span><br><span class="hljs-comment"># On other kernels the period depends on the kernel configuration.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># A reasonable value for this option is 300 seconds, which is the new</span><br><span class="hljs-comment"># Redis default starting with Redis 3.2.1.</span><br><span class="hljs-comment"># 定时向 client 发送 tcp_ack 包来探测 client 是否存活的，单位（秒）。</span><br>tcp-keepalive 300<br><br><span class="hljs-comment">################################# GENERAL #####################################</span><br><br><span class="hljs-comment"># By default Redis does not run as a daemon（守护进程）. Use &#x27;yes&#x27; if you need it.</span><br><span class="hljs-comment"># Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</span><br><span class="hljs-comment"># 默认情况下，Redis不会作为守护进程（守护进程）运行。 如果需要，请使用“是”。请注意，Redis 守护进程将在 /var/run/redis.pid 中写入一个 pid 文件。</span><br>daemonize no<br><br><span class="hljs-comment"># If you run Redis from upstart or systemd, Redis can interact with your</span><br><span class="hljs-comment"># supervision tree. Options:可以通过upstart和systemd管理Redis守护进程</span><br><span class="hljs-comment">#   supervised no      - no supervision interaction</span><br><span class="hljs-comment">#没有监督互动</span><br><span class="hljs-comment">#   supervised upstart - signal upstart by putting Redis into SIGSTOP mode</span><br><span class="hljs-comment">#通过将Redis置于SIGSTOP模式来启动信号</span><br><span class="hljs-comment">#   supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET</span><br><span class="hljs-comment">#signal systemd将READY = 1写入$ NOTIFY_SOCKET</span><br><span class="hljs-comment">#   supervised auto    - detect upstart or systemd method based on</span><br><span class="hljs-comment">#                        UPSTART_JOB or NOTIFY_SOCKET environment variables</span><br><span class="hljs-comment">#检测upstart或systemd方法基于 UPSTART_JOB或NOTIFY_SOCKET环境变量</span><br><span class="hljs-comment"># Note: these supervision methods only signal &quot;process is ready.&quot;</span><br><span class="hljs-comment">#       They do not enable continuous liveness pings back to your supervisor.</span><br>supervised no<br><br><span class="hljs-comment"># If a pid file is specified, Redis writes it where specified at startup</span><br><span class="hljs-comment"># and removes it at exit. </span><br><span class="hljs-comment"># 如果指定了 pid 文件，则 Redis 会在启动时将其写入指定位置，然后在退出时将其删除。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># When the server runs non daemonized, no pid file is created if none is</span><br><span class="hljs-comment"># specified in the configuration. When the server is daemonized, the pid file</span><br><span class="hljs-comment"># is used even if not specified, defaulting to &quot;/var/run/redis.pid&quot;.</span><br><span class="hljs-comment"># 当服务器在非守护进程下运行时，如果没有pid文件，则不会创建在配置中指定。守护服务器时，即使未指定，也会使用pid文件，默认为“ /var/run/redis.pid”。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Creating a pid file is best effort: if Redis is not able to create it</span><br><span class="hljs-comment"># nothing bad happens, the server will start and run normally.</span><br>pidfile /var/run/redis_6379.pid<br><br><span class="hljs-comment"># Specify the server verbosity level.</span><br><span class="hljs-comment"># This can be one of:</span><br><span class="hljs-comment"># debug (a lot of information, useful for development/testing)</span><br><span class="hljs-comment"># verbose (many rarely useful info, but not a mess like the debug level)</span><br><span class="hljs-comment"># notice (moderately verbose, what you want in production probably)</span><br><span class="hljs-comment"># warning (only very important / critical messages are logged)</span><br>loglevel notice<br><br><span class="hljs-comment"># Specify the log file name. Also the empty string can be used to force</span><br><span class="hljs-comment"># Redis to log on the standard output. Note that if you use standard</span><br><span class="hljs-comment"># output for logging but daemonize, logs will be sent to /dev/null</span><br>logfile <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># To enable logging to the system logger, just set &#x27;syslog-enabled&#x27; to yes,</span><br><span class="hljs-comment"># and optionally update the other syslog parameters to suit your needs.</span><br><span class="hljs-comment"># 是否打开记录syslog功能</span><br><span class="hljs-comment"># syslog-enabled no</span><br><br><span class="hljs-comment"># Specify the syslog identity. syslog的标识符</span><br><span class="hljs-comment"># syslog-ident redis</span><br><br><span class="hljs-comment"># Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.日志的来源、设备</span><br><span class="hljs-comment"># syslog-facility local0</span><br><br><span class="hljs-comment"># Set the number of databases. The default database is DB 0, you can select</span><br><span class="hljs-comment"># a different one on a per-connection basis using SELECT &lt;dbid&gt; where</span><br><span class="hljs-comment"># dbid is a number between 0 and &#x27;databases&#x27;-1</span><br><span class="hljs-comment"># 默认 16 个库</span><br>databases 16<br><br><span class="hljs-comment"># By default Redis shows an ASCII art logo only when started to log to the</span><br><span class="hljs-comment"># standard output and if the standard output is a TTY. Basically this means</span><br><span class="hljs-comment"># that normally a logo is displayed only in interactive sessions.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># However it is possible to force the pre-4.0 behavior and always show a</span><br><span class="hljs-comment"># ASCII art logo in startup logs by setting the following option to yes.</span><br>always-show-logo yes<br><br><span class="hljs-comment">################################ SNAPSHOTTING 磁盘快照 ################################</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Save the DB on disk:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   save &lt;seconds&gt; &lt;changes&gt;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   Will save the DB if both the given number of seconds and the given</span><br><span class="hljs-comment">#   number of write operations against the DB occurred.</span><br><span class="hljs-comment"># 如果同时发生了给定的秒数和给定的针对数据库的写操作数，则将保存数据库。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   In the example below the behaviour will be to save:</span><br><span class="hljs-comment">#   after 900 sec (15 min) if at least 1 key changed</span><br><span class="hljs-comment">#   after 300 sec (5 min) if at least 10 keys changed</span><br><span class="hljs-comment">#   after 60 sec if at least 10000 keys changed</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   Note: you can disable saving completely by commenting out all &quot;save&quot; lines.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   It is also possible to remove all the previously configured save</span><br><span class="hljs-comment">#   points by adding a save directive with a single empty string argument</span><br><span class="hljs-comment">#   like in the following example:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   save &quot;&quot;</span><br><span class="hljs-comment"># 磁盘快照根据 redis key修改频率不同，设置不同的备份规则</span><br>save 900 1<br>save 300 10<br>save 60 10000<br><br><span class="hljs-comment"># By default Redis will stop accepting writes if RDB snapshots are enabled</span><br><span class="hljs-comment"># (at least one save point) and the latest background save failed.</span><br><span class="hljs-comment"># This will make the user aware (in a hard way) that data is not persisting</span><br><span class="hljs-comment"># on disk properly, otherwise chances are that no one will notice and some</span><br><span class="hljs-comment"># disaster will happen.</span><br><span class="hljs-comment"># 默认情况下，如果启用RDB快照（至少一个保存点）。并且最新的后台保存失败，则Redis将停止接受写入。这将使用户（以一种困难的方式）意识到数据无法正确地持久存储在磁盘上，否则，可能没人会注意到并且会发生一些灾难。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># If the background saving process will start working again Redis will</span><br><span class="hljs-comment"># automatically allow writes again.</span><br><span class="hljs-comment"># 如果后台保存过程再次开始工作，则 Redis 将自动允许再次写入。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># However if you have setup your proper monitoring of the Redis server</span><br><span class="hljs-comment"># and persistence, you may want to disable this feature so that Redis will</span><br><span class="hljs-comment"># continue to work as usual even if there are problems with disk,</span><br><span class="hljs-comment"># permissions, and so forth.</span><br><span class="hljs-comment"># 但是，如果您设置了对 Redis 服务器和持久性的适当监视，则可能希望禁用此功能，以便即使磁盘，权限等出现问题，Redis 仍将继续照常工作（如果设置了监听，可以考虑关掉此设置）。</span><br>stop-writes-on-bgsave-error yes<br><br><span class="hljs-comment"># Compress string objects using LZF when dump .rdb databases?</span><br><span class="hljs-comment"># For default that&#x27;s set to &#x27;yes&#x27; as it&#x27;s almost always a win.</span><br><span class="hljs-comment"># If you want to save some CPU in the saving child set it to &#x27;no&#x27; but</span><br><span class="hljs-comment"># the dataset will likely be bigger if you have compressible values or keys.</span><br>rdbcompression yes<br><br><span class="hljs-comment"># 从RDB版本5开始，CRC64校验和位于文件末尾。这使得该格式更能抵抗损坏，但是在保存和加载 RDB文件时会</span><br><span class="hljs-comment"># 付出一定的性能损失（大约10％），因此可以禁用该格式以实现最佳性能。</span><br><span class="hljs-comment"># 在禁用校验和的情况下创建的RDB文件的校验和为零，这将指示加载代码跳过该校验。</span><br>rdbchecksum yes<br><br><span class="hljs-comment"># The filename where to dump the DB</span><br>dbfilename dump.rdb<br><br><span class="hljs-comment"># The working directory.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The DB will be written inside this directory, with the filename specified</span><br><span class="hljs-comment"># above using the &#x27;dbfilename&#x27; configuration directive.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The Append Only File will also be created inside this directory.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Note that you must specify a directory here, not a file name.</span><br><span class="hljs-comment"># 数据目录，数据库的写入会在这个目录。rdb、aof文件也会写在这个目录</span><br><span class="hljs-comment"># dir ./</span><br> dir /home/www/redis/data/<br><br><span class="hljs-comment">################################# REPLICATION 主从复制#################################</span><br><br><span class="hljs-comment"># Master-Replica replication. Use replicaof to make a Redis instance a copy of</span><br><span class="hljs-comment"># another Redis server. A few things to understand ASAP about Redis replication.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   +------------------+      +---------------+</span><br><span class="hljs-comment">#   |      Master      | ---&gt; |    Replica    |</span><br><span class="hljs-comment">#   | (receive writes) |      |  (exact copy) |</span><br><span class="hljs-comment">#   +------------------+      +---------------+</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 1) Redis replication is asynchronous, but you can configure a master to</span><br><span class="hljs-comment">#    stop accepting writes if it appears to be not connected with at least</span><br><span class="hljs-comment">#    a given number of replicas.</span><br><span class="hljs-comment"># Redis复制是异步的，但如果没有链接至少一个拷贝副本，可以设置主服务器停止接受写入。</span><br><span class="hljs-comment"># 2) Redis replicas are able to perform a partial resynchronization with the</span><br><span class="hljs-comment">#    master if the replication link is lost for a relatively small amount of</span><br><span class="hljs-comment">#    time. You may want to configure the replication backlog size (see the next</span><br><span class="hljs-comment">#    sections of this file) with a sensible value depending on your needs.</span><br><span class="hljs-comment"># 短时间内，如果 redis 副本丢失相对较少的复制链接，redis副本可以实现与主服务器重新同步丢是的数据。</span><br><span class="hljs-comment"># 这里可能需要根据需要将复制 backlog 大小配置为合理的值。</span><br><span class="hljs-comment"># 3) Replication is automatic and does not need user intervention. After a</span><br><span class="hljs-comment">#    network partition replicas automatically try to reconnect to masters</span><br><span class="hljs-comment">#    and resynchronize with them.</span><br><span class="hljs-comment"># 复制是自动的，不需要用户干预。网络分区副本会自动尝试重新连接到主服务器并与他们重新同步。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 命令</span><br><span class="hljs-comment"># replicaof &lt;masterip&gt; &lt;masterport&gt;</span><br><br><span class="hljs-comment"># If the master is password protected (using the &quot;requirepass&quot; configuration</span><br><span class="hljs-comment"># directive below) it is possible to tell the replica to authenticate before</span><br><span class="hljs-comment"># starting the replication synchronization process, otherwise the master will</span><br><span class="hljs-comment"># refuse the replica request.</span><br><span class="hljs-comment"># 如果主服务器受密码保护（使用下面的“ requirepass”配置指令），则可以在开始复制同步过程之前</span><br><span class="hljs-comment"># 告诉副本服务器进行身份验证，否则主服务器将拒绝副本请求。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># masterauth &lt;master-password&gt;</span><br><br><span class="hljs-comment"># When a replica loses its connection with the master, or when the replication</span><br><span class="hljs-comment"># is still in progress, the replica can act in two different ways:</span><br><span class="hljs-comment"># 当副本失去与主数据库的连接时，或者当复制仍在进行中，副本可以以两种不同的方式起作用：</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 1) if replica-serve-stale-data is set to &#x27;yes&#x27; (the default) the replica will</span><br><span class="hljs-comment">#    still reply to client requests, possibly with out of date data（过期数据）, or the</span><br><span class="hljs-comment">#    data set may just be empty if this is the first synchronization.</span><br><span class="hljs-comment">#  从库会继续响应客户端的请求</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 2) if replica-serve-stale-data is set to &#x27;no&#x27; the replica will reply with</span><br><span class="hljs-comment">#    an error &quot;SYNC with master in progress&quot; to all the kind of commands</span><br><span class="hljs-comment">#    but to INFO, replicaOF, AUTH, PING, SHUTDOWN, REPLCONF, ROLE, CONFIG,</span><br><span class="hljs-comment">#    SUBSCRIBE, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB,</span><br><span class="hljs-comment">#    COMMAND, POST, HOST: and LATENCY.</span><br><span class="hljs-comment"># 上述命令之外的任何请求都会返回一个错误”SYNC with master in progress”</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 从服务器稳定输出，不报错（都是连接或数据为空）</span><br>replica-serve-stale-data yes<br><br><span class="hljs-comment"># You can configure a replica instance to accept writes or not. Writing against</span><br><span class="hljs-comment"># a replica instance may be useful to store some ephemeral data (because data</span><br><span class="hljs-comment"># written on a replica will be easily deleted after resync with the master) but</span><br><span class="hljs-comment"># may also cause problems if clients are writing to it because of a</span><br><span class="hljs-comment"># misconfiguration.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Since Redis 2.6 by default replicas are read-only.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Note: read only replicas are not designed to be exposed to untrusted clients</span><br><span class="hljs-comment"># on the internet. It&#x27;s just a protection layer against misuse of the instance.</span><br><span class="hljs-comment"># Still a read only replica exports by default all the administrative commands</span><br><span class="hljs-comment"># such as CONFIG, DEBUG, and so forth. To a limited extent you can improve</span><br><span class="hljs-comment"># security of read only replicas using &#x27;rename-command&#x27; to shadow all the</span><br><span class="hljs-comment"># administrative / dangerous commands.</span><br><span class="hljs-comment"># 从服务器只读</span><br>replica-read-only yes<br><br><span class="hljs-comment"># Replication SYNC strategy: disk or socket.</span><br><span class="hljs-comment"># 复制SYNC策略：磁盘或套接字。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># -------------------------------------------------------</span><br><span class="hljs-comment"># WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY</span><br><span class="hljs-comment"># -------------------------------------------------------</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># New replicas and reconnecting replicas that are not able to continue the replication</span><br><span class="hljs-comment"># process just receiving differences, need to do what is called a &quot;full</span><br><span class="hljs-comment"># synchronization&quot;. An RDB file is transmitted from the master to the replicas.</span><br><span class="hljs-comment"># The transmission can happen in two different ways:</span><br><span class="hljs-comment"># 仅接收差异而无法继续复制过程的新副本和重新连接的副本需要执行所谓的“完全同步”。 </span><br><span class="hljs-comment"># RDB文件从主数据库传输到副本数据库。 传输可以通过两种不同的方式进行：</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 1) Disk-backed: The Redis master creates a new process that writes the RDB</span><br><span class="hljs-comment">#                 file on disk. Later the file is transferred by the parent</span><br><span class="hljs-comment">#                 process to the replicas incrementally.</span><br><span class="hljs-comment"># Redis主服务器创建一个新过程，将RDB文件写入磁盘。 后来，文件由父进程逐步传输到副本。</span><br><span class="hljs-comment"># 2) Diskless: The Redis master creates a new process that directly writes the</span><br><span class="hljs-comment">#              RDB file to replica sockets, without touching the disk at all.</span><br><span class="hljs-comment"># Redis主服务器创建一个新进程，该进程将RDB文件直接写入副本套接字，而完全不接触磁盘。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># With disk-backed replication, while the RDB file is generated, more replicas</span><br><span class="hljs-comment"># can be queued and served with the RDB file as soon as the current child producing</span><br><span class="hljs-comment"># the RDB file finishes its work. With diskless replication instead once</span><br><span class="hljs-comment"># the transfer starts, new replicas arriving will be queued and a new transfer</span><br><span class="hljs-comment"># will start when the current one terminates.</span><br><span class="hljs-comment"># 使用磁盘支持的复制，在生成RDB文件的同时，只要生成RDB文件的当前子级完成工作，</span><br><span class="hljs-comment"># 以将更多副本排入队列并与RDB文件一起使用。 如果使用无盘复制，则一旦传输开始，</span><br><span class="hljs-comment"># 副本将排队，并且当当前副本终止时将开始新的传输。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># When diskless replication is used, the master waits a configurable amount of</span><br><span class="hljs-comment"># time (in seconds) before starting the transfer in the hope that multiple replicas</span><br><span class="hljs-comment"># will arrive and the transfer can be parallelized.</span><br><span class="hljs-comment"># 使用无盘复制时，主服务器在开始传输之前会等待一段可配置的时间（以秒为单位），以希望多个副本可以到达并且传输可以并行化。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># With slow disks and fast (large bandwidth) networks, diskless replication</span><br><span class="hljs-comment"># works better. 使用慢速磁盘和快速（大带宽）网络，无盘复制效果更好</span><br>repl-diskless-sync no<br><br><span class="hljs-comment"># When diskless replication is enabled, it is possible to configure the delay</span><br><span class="hljs-comment"># the server waits in order to spawn the child that transfers the RDB via socket</span><br><span class="hljs-comment"># to the replicas.</span><br><span class="hljs-comment"># 启用无盘复制后，可以配置服务器等待的延迟，以便生成通过套接字将RDB传输到副本的子代。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># This is important since once the transfer starts, it is not possible to serve</span><br><span class="hljs-comment"># new replicas arriving, that will be queued for the next RDB transfer, so the server</span><br><span class="hljs-comment"># waits a delay in order to let more replicas arrive.</span><br><span class="hljs-comment"># 这一点很重要，因为一旦传输开始，就无法为到达下一个RDB传输的新副本提供服务，因此服务器会等待一段时间，以便让更多副本到达。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The delay is specified in seconds, and by default is 5 seconds. To disable</span><br><span class="hljs-comment"># it entirely just set it to 0 seconds and the transfer will start ASAP（尽快）</span><br>repl-diskless-sync-delay 5<br><br><span class="hljs-comment"># Replicas send PINGs to server in a predefined interval. It&#x27;s possible to change</span><br><span class="hljs-comment"># this interval with the repl_ping_replica_period option. The default value is 10</span><br><span class="hljs-comment"># seconds.</span><br><span class="hljs-comment"># 从服务器以预定义的时间间隔将 PING 发送到主服务器。 可以使用 repl_ping_replica_period 选项更改此间隔。 默认值为10秒。 </span><br><span class="hljs-comment"># repl-ping-replica-period 10</span><br><br><span class="hljs-comment"># The following option sets the replication timeout for:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 1) Bulk transfer I/O during SYNC, from the point of view of replica.</span><br><span class="hljs-comment"># 2) Master timeout from the point of view of replicas (data, pings).</span><br><span class="hljs-comment"># 3) Replica timeout from t</span><br><span class="hljs-comment">#e point of view of masters (REPLCONF ACK pings).</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># It is important to make sure that this value is greater than the value</span><br><span class="hljs-comment"># specified for repl-ping-replica-period otherwise a timeout will be detected</span><br><span class="hljs-comment"># every time there is low traffic between the master and the replica.</span><br><span class="hljs-comment"># 值要大于 repl-ping-replica-period 的值，不然每次都会检测为超时。</span><br><span class="hljs-comment"># repl-timeout 60</span><br><br><span class="hljs-comment"># Disable TCP_NODELAY on the replica socket after SYNC?</span><br><span class="hljs-comment"># 在同步后禁用副本套接字上的TCP_NODELAY？</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># If you select &quot;yes&quot; Redis will use a smaller number of TCP packets and</span><br><span class="hljs-comment"># less bandwidth to send data to replicas. But this can add a delay for</span><br><span class="hljs-comment"># the data to appear on the replica side, up to 40 milliseconds with</span><br><span class="hljs-comment"># Linux kernels using a default configuration.（减少带宽，增加从服务器延迟）</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># If you select &quot;no&quot; the delay for data to appear on the replica side will</span><br><span class="hljs-comment"># be reduced but more bandwidth will be used for replication.（增加带宽，减少从服务器延迟）</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># By default we optimize for low latency, but in very high traffic conditions</span><br><span class="hljs-comment"># or when the master and replicas are many hops away, turning this to &quot;yes&quot; may</span><br><span class="hljs-comment"># be a good idea.（在流量非常高的情况下，或者在距离主服务器和副本很多跳的情况下，将其设置为“是”可能是个好主意。）</span><br>repl-disable-tcp-nodelay no<br><br><span class="hljs-comment"># Set the replication backlog size. The backlog is a buffer that accumulates</span><br><span class="hljs-comment"># replica data when replicas are disconnected for some time, so that when a replica</span><br><span class="hljs-comment"># wants to reconnect again, often a full resync is not needed, but a partial</span><br><span class="hljs-comment"># resync is enough, just passing the portion of data the replica missed while</span><br><span class="hljs-comment"># disconnected.（设置从服务器 backlog 大小，以便于从服务器断开连接一段时间，它可以缓冲部分数据。因此，当从服务器重新连接时，不需要完全同步，只同步缓冲区中的数据即可。）</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The bigger the replication backlog, the longer the time the replica can be</span><br><span class="hljs-comment"># disconnected and later be able to perform a partial resynchronization.</span><br><span class="hljs-comment"># repl-backlog-size 值越大，从服务器可以断开连接并在下次重新连接同步时间越长。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The backlog is only allocated once there is at least a replica connected.</span><br><span class="hljs-comment"># 仅当至少有一个副本连接时，才分配 backlog。</span><br><span class="hljs-comment"># repl-backlog-size 1mb</span><br><br><span class="hljs-comment"># After a master has no longer connected replicas for some time, the backlog</span><br><span class="hljs-comment"># will be freed. The following option configures the amount of seconds that</span><br><span class="hljs-comment"># need to elapse, starting from the time the last replica disconnected, for</span><br><span class="hljs-comment"># the backlog buffer to be freed.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Note that replicas never free the backlog for timeout, since they may be</span><br><span class="hljs-comment"># promoted to masters later, and should be able to correctly &quot;partially</span><br><span class="hljs-comment"># resynchronize&quot; with the replicas: hence they should always accumulate backlog.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># A value of 0 means to never release the backlog.</span><br><span class="hljs-comment">#主服务器断开与从服务器连接到释放 backlog 缓冲区时间。0 意味着不释放缓冲区。（从服务器不会释放缓冲区）</span><br><span class="hljs-comment"># repl-backlog-ttl 3600</span><br><br><span class="hljs-comment"># The replica priority is an integer number published by Redis in the INFO output.</span><br><span class="hljs-comment"># It is used by Redis Sentinel in order to select a replica to promote into a</span><br><span class="hljs-comment"># master if the master is no longer working correctly.</span><br><span class="hljs-comment"># 副本优先级是 Redis 在 INFO 输出中发布的整数。如果主服务器不再正常工作，Redis Sentinel 会使用它来选择要升级为主服务器的副本。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># A replica with a low priority number is considered better for promotion, so</span><br><span class="hljs-comment"># for instance if there are three replicas with priority 10, 100, 25 Sentinel will</span><br><span class="hljs-comment"># pick the one with priority 10, that is the lowest.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># However a special priority of 0 marks the replica as not able to perform the</span><br><span class="hljs-comment"># role of master, so a replica with priority of 0 will never be selected by</span><br><span class="hljs-comment"># Redis Sentinel for promotion.（优先级不能设置为 0,设置为 0 不是被升级为主服务器）</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># By default the priority is 100.</span><br>replica-priority 100<br><br><span class="hljs-comment"># It is possible for a master to stop accepting writes if there are less than</span><br><span class="hljs-comment"># N replicas connected, having a lag less or equal than M seconds.</span><br><span class="hljs-comment"># 如果连接的副本少于N个，并且延迟小于或等于M秒，则主服务器可能会停止接受写入。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The N replicas need to be in &quot;online&quot; state.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The lag in seconds, that must be &lt;= the specified value, is calculated from</span><br><span class="hljs-comment"># the last ping received from the replica, that is usually sent every second.</span><br><span class="hljs-comment"># 延迟（以秒为单位）必须小于等于指定值，该延迟是根据从副本接收到的最后ping（通常每秒发送一次）计算得出的。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># This option does not GUARANTEE that N replicas will accept the write, but</span><br><span class="hljs-comment"># will limit the window of exposure for lost writes in case not enough replicas</span><br><span class="hljs-comment"># are available, to the specified number of seconds.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># For example to require at least 3 replicas with a lag &lt;= 10 seconds use:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># min-replicas-to-write 3</span><br><span class="hljs-comment"># min-replicas-max-lag 10</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Setting one or the other to 0 disables the feature.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># By default min-replicas-to-write is set to 0 (feature disabled) and</span><br><span class="hljs-comment"># min-replicas-max-lag is set to 10.</span><br><br><span class="hljs-comment"># A Redis master is able to list the address and port of the attached</span><br><span class="hljs-comment"># replicas in different ways. For example the &quot;INFO replication&quot; section</span><br><span class="hljs-comment"># offers this information, which is used, among other tools, by</span><br><span class="hljs-comment"># Redis Sentinel in order to discover replica instances.</span><br><span class="hljs-comment"># Another place where this info is available is in the output of the</span><br><span class="hljs-comment"># &quot;ROLE&quot; command of a master.</span><br><span class="hljs-comment"># Redis主服务器能够以不同方式列出附加副本的地址和端口。 例如，“ INFO复制”部分提供了此信息，</span><br><span class="hljs-comment"># Redis Sentinel使用此信息以及其他工具来发现副本实例。 该信息可用的另一个位置是主服务器的“ ROLE”命令的输出。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The listed IP and address normally reported by a replica is obtained</span><br><span class="hljs-comment"># in the following way:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   IP: The address is auto detected by checking the peer address</span><br><span class="hljs-comment">#   of the socket used by the replica to connect with the master.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   Port: The port is communicated by the replica during the replication</span><br><span class="hljs-comment">#   handshake, and is normally the port that the replica is using to</span><br><span class="hljs-comment">#   listen for connections.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># However when port forwarding or Network Address Translation (NAT) is</span><br><span class="hljs-comment"># used, the replica may be actually reachable via different IP and port</span><br><span class="hljs-comment"># pairs. The following two options can be used by a replica in order to</span><br><span class="hljs-comment"># report to its master a specific set of IP and port, so that both INFO</span><br><span class="hljs-comment"># and ROLE will report those values.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># There is no need to use both the options if you need to override just</span><br><span class="hljs-comment"># the port or the IP address.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># replica-announce-ip 5.5.5.5</span><br><span class="hljs-comment"># replica-announce-port 1234</span><br><br><span class="hljs-comment">################################## SECURITY 安全 ###################################</span><br><br><span class="hljs-comment"># Require clients to issue AUTH &lt;PASSWORD&gt; before processing any other</span><br><span class="hljs-comment"># commands.  This might be useful in environments in which you do not trust</span><br><span class="hljs-comment"># others with access to the host running redis-server.</span><br><span class="hljs-comment"># 要求客户端在处理任何其他命令之前发出AUTH &lt;PASSWORD&gt;。 </span><br><span class="hljs-comment"># 在您不信任其他人无法访问运行redis-server的主机的环境中，这可能很有用。</span><br><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># This should stay commented out for backward compatibility and because most</span><br><span class="hljs-comment"># people do not need auth (e.g. they run their own servers).</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Warning: since Redis is pretty fast an outside user can try up to</span><br><span class="hljs-comment"># 150k passwords per second against a good box. This means that you should</span><br><span class="hljs-comment"># use a very strong password otherwise it will be very easy to break.</span><br><span class="hljs-comment"># requirepass 配置可以让用户使用 AUTH 命令来认证密码，才能使用其他命令。这让 redis 可以使用在不受信任的网络中。为了保持向后的兼容性，可以注释该命令，因为大部分用户也不需要认证。使用 requirepass 的时候需要注意，因为 redis 太快了，每秒可以认证 15w 次密码，简单的密码很容易被攻破，所以最好使用一个更复杂的密码</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># requirepass foobared</span><br><br><span class="hljs-comment"># Command renaming.</span><br><span class="hljs-comment"># 命令重命名</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># It is possible to change the name of dangerous commands in a shared</span><br><span class="hljs-comment"># environment. For instance the CONFIG command may be renamed into something</span><br><span class="hljs-comment"># hard to guess so that it will still be available for internal-use tools</span><br><span class="hljs-comment"># but not available for general clients.</span><br><span class="hljs-comment"># 可以在共享环境中更改危险命令的名称。 例如，可以将CONFIG命令重命名为一些难以猜测的名称，</span><br><span class="hljs-comment"># 以便它仍可用于内部使用的工具，但不适用于一般客户。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Example:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># It is also possible to completely kill a command by renaming it into</span><br><span class="hljs-comment"># an empty string:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># rename-command CONFIG &quot;&quot;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Please note that changing the name of commands that are logged into the</span><br><span class="hljs-comment"># AOF file or transmitted to replicas may cause problems.</span><br><span class="hljs-comment"># 请注意，更改 命令名称 记录到AOF文件或传输到副本可能会导致问题。</span><br><br><span class="hljs-comment">################################### CLIENTS 客户端 ####################################</span><br><br><span class="hljs-comment"># Set the max number of connected clients at the same time. By default</span><br><span class="hljs-comment"># this limit is set to 10000 clients, however if the Redis server is not</span><br><span class="hljs-comment"># able to configure the process file limit to allow for the specified limit</span><br><span class="hljs-comment"># the max number of allowed clients is set to the current file limit</span><br><span class="hljs-comment"># minus 32 (as Redis reserves a few file descriptors for internal uses).</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Once the limit is reached Redis will close all the new connections sending</span><br><span class="hljs-comment"># an error &#x27;max number of clients reached&#x27;.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 同一时间最大客户端连接数</span><br><span class="hljs-comment"># maxclients 10000</span><br><br><span class="hljs-comment">############################## MEMORY MANAGEMENT 内存管理 ################################</span><br><br><span class="hljs-comment"># Set a memory usage limit to the specified amount of bytes.</span><br><span class="hljs-comment"># When the memory limit is reached Redis will try to remove keys</span><br><span class="hljs-comment"># according to the eviction policy selected (see maxmemory-policy).</span><br><span class="hljs-comment"># 将内存使用限制设置为指定的字节数。当达到内存限制时，Redis将根据选择的搬迁策略，尝试删除 key。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># If Redis can&#x27;t remove keys according to the policy, or if the policy is</span><br><span class="hljs-comment"># set to &#x27;noeviction&#x27;, Redis will start to reply with errors to commands</span><br><span class="hljs-comment"># that would use more memory, like SET, LPUSH, and so on, and will continue</span><br><span class="hljs-comment"># to reply to read-only commands like GET.</span><br><span class="hljs-comment"># 如果Redis无法根据策略删除 key，或者如果策略设置为“ noeviction”，Redis将开始响应命令错误</span><br><span class="hljs-comment"># 这将使用更多的内存，例如SET，LPUSH等些命令，但仍可以继续回复诸如GET之类的只读命令。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># This option is usually useful when using Redis as an LRU or LFU cache, or to</span><br><span class="hljs-comment"># set a hard memory limit for an instance (using the &#x27;noeviction&#x27; policy).</span><br><span class="hljs-comment"># 当将Redis用作LRU或LFU缓存时，设置实例的硬性内存限制，此选项通常很有用。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># WARNING: If you have replicas attached to an instance with maxmemory on,</span><br><span class="hljs-comment"># the size of the output buffers needed to feed the replicas are subtracted</span><br><span class="hljs-comment"># from the used memory count, so that network problems / resyncs will</span><br><span class="hljs-comment"># not trigger a loop where keys are evicted, and in turn the output</span><br><span class="hljs-comment"># buffer of replicas is full with DELs of keys evicted triggering the deletion</span><br><span class="hljs-comment"># of more keys, and so forth until the database is completely emptied.</span><br><span class="hljs-comment"># 如果您将副本附加到具有maxmemory的实例，减去提供副本所需的输出缓冲区的大小</span><br><span class="hljs-comment"># 从已用内存计数中，以便网络问题/重新同步不会触发退出键的循环，进而导致输出</span><br><span class="hljs-comment"># 副本缓冲区已满，有逐出的DEL键触发删除直到数据库完全清空为止。</span><br><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># In short... if you have replicas attached it is suggested that you set a lower</span><br><span class="hljs-comment"># limit for maxmemory so that there is some free RAM on the system for replica</span><br><span class="hljs-comment"># output buffers (but this is not needed if the policy is &#x27;noeviction&#x27;).</span><br><span class="hljs-comment"># 简而言之...如果您附加了副本，建议您设置一个较低的 maxmemory 的限制，</span><br><span class="hljs-comment"># 以便系统上有一些可用的RAM用于复制输出缓冲区（但是如果策略为“ noeviction”，则不需要这样做）。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># maxmemory &lt;bytes&gt;</span><br><br><span class="hljs-comment"># MAXMEMORY POLICY: how Redis will select what to remove when maxmemory</span><br><span class="hljs-comment"># is reached. You can select among five behaviors:</span><br><span class="hljs-comment"># 达到 maxmemory 时，Redis 将如何选择要删除的内容。 您可以选择以下五种行为：</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># volatile-lru -&gt; Evict using approximated LRU among the keys with an expire set.</span><br><span class="hljs-comment"># 使用具有过期时间的 keys 中的近似 LRU 进行驱逐（LRU：Least Recently Used，最近最少使用）。</span><br><span class="hljs-comment"># allkeys-lru -&gt; Evict any key using approximated LRU.</span><br><span class="hljs-comment"># 驱逐任何最近最少使用的 key。</span><br><span class="hljs-comment"># volatile-lfu -&gt; Evict using approximated LFU among the keys with an expire set.</span><br><span class="hljs-comment"># 使用具有过期时间的 keys 中的近似 LFU 进行驱逐（LFU：least frequently used，最不经常使用）。</span><br><span class="hljs-comment"># allkeys-lfu -&gt; Evict any key using approximated LFU.</span><br><span class="hljs-comment"># 驱逐任何最不经常使用的 key。</span><br><span class="hljs-comment"># volatile-random -&gt; Remove a random key among the ones with an expire set.</span><br><span class="hljs-comment"># 随机去除带有过期时间的 key。</span><br><span class="hljs-comment"># allkeys-random -&gt; Remove a random key, any key.</span><br><span class="hljs-comment"># 随机去除任何 key。</span><br><span class="hljs-comment"># volatile-ttl -&gt; Remove the key with the nearest expire time (minor TTL)</span><br><span class="hljs-comment"># 驱逐最接近过期时间的 key。</span><br><span class="hljs-comment"># noeviction -&gt; Don&#x27;t evict anything, just return an error on write operations.</span><br><span class="hljs-comment"># 不驱逐任何东西，仅在写操作时返回错误</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># LRU means Least Recently Used（最近最少使用）</span><br><span class="hljs-comment"># LFU means Least Frequently Used（最不经常使用）</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Both LRU, LFU and volatile-ttl are implemented using approximated</span><br><span class="hljs-comment"># randomized algorithms. （LRU，LFU和volatile-ttl均使用近似随机算法实现）</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Note: with any of the above policies, Redis will return an error on write</span><br><span class="hljs-comment">#       operations, when there are no suitable keys for eviction.</span><br><span class="hljs-comment"># 使用上述任何策略，当没有合适的键时驱逐时，Redis将在写入操作中返回错误。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#       At the date of writing these commands are: set setnx setex append</span><br><span class="hljs-comment">#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd</span><br><span class="hljs-comment">#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby</span><br><span class="hljs-comment">#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby</span><br><span class="hljs-comment">#       getset mset msetnx exec sort</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The default is:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># maxmemory-policy noeviction</span><br><br><span class="hljs-comment"># LRU, LFU and minimal TTL algorithms are not precise algorithms but approximated</span><br><span class="hljs-comment"># algorithms (in order to save memory), so you can tune it for speed or</span><br><span class="hljs-comment"># accuracy. For default Redis will check five keys and pick the one that was</span><br><span class="hljs-comment"># used less recently, you can change the sample size using the following</span><br><span class="hljs-comment"># configuration directive.</span><br><span class="hljs-comment"># LRU，LFU和最小TTL算法不是精确算法，而是近似算法（以节省内存），因此您可以针对速度或准确性进行调整。 </span><br><span class="hljs-comment"># 对于默认情况，Redis将检查 5 个键并选择最近使用少的键，您可以使用以下配置指令更改样本大小。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The default of 5 produces good enough results. 10 Approximates very closely</span><br><span class="hljs-comment"># true LRU but costs more CPU. 3 is faster but not very accurate.</span><br><span class="hljs-comment"># 默认值为5会产生足够好的结果。 10非常接近真实的LRU，但是会花费更多的CPU。 3更快，但不是很准确。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># maxmemory-samples 5</span><br><br><span class="hljs-comment"># Starting from Redis 5, by default a replica will ignore its maxmemory setting</span><br><span class="hljs-comment"># (unless it is promoted to master after a failover or manually). It means</span><br><span class="hljs-comment"># that the eviction of keys will be just handled by the master, sending the</span><br><span class="hljs-comment"># DEL commands to the replica as keys evict in the master side.</span><br><span class="hljs-comment"># 从Redis 5开始，默认情况下，从服务器将忽略其 maxmemory 设置（除非在故障转移后或手动提升为主副本）。</span><br><span class="hljs-comment"># 这意味着 keys 删除将仅由主服务器处理，将 DEL 命令作为副本在主计算机侧逐出，将 DEL 命令发送到副本。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># This behavior ensures that masters and replicas stay consistent, and is usually</span><br><span class="hljs-comment"># what you want, however if your replica is writable, or you want the replica to have</span><br><span class="hljs-comment"># a different memory setting, and you are sure all the writes performed to the</span><br><span class="hljs-comment"># replica are idempotent, then you may change this default (but be sure to understand</span><br><span class="hljs-comment"># what you are doing).</span><br><span class="hljs-comment"># 此行为可确保主副本和副本始终保持一致，这通常是您想要的，但是，如果副本是可写的，</span><br><span class="hljs-comment"># 或者您希望副本具有不同的内存设置，并且您确定对副本执行的所有写操作都是幂等的， </span><br><span class="hljs-comment"># 那么您可以更改此默认设置（但请务必了解您的操作）。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Note that since the replica by default does not evict, it may end using more</span><br><span class="hljs-comment"># memory than the one set via maxmemory (there are certain buffers that may</span><br><span class="hljs-comment"># be larger on the replica, or data structures may sometimes take more memory and so</span><br><span class="hljs-comment"># forth). So make sure you monitor your replicas and make sure they have enough</span><br><span class="hljs-comment"># memory to never hit a real out-of-memory condition before the master hits</span><br><span class="hljs-comment"># the configured maxmemory setting.</span><br><span class="hljs-comment"># 请注意，由于默认情况下该副本不会退出，因此它可能会使用比通过maxmemory设置的内存更多的内存</span><br><span class="hljs-comment">#（某些副本上的某些缓冲区可能更大，或者数据结构有时会占用更多内存等等）。 因此，请确保您监视副本，</span><br><span class="hljs-comment"># 并确保副本具有足够的内存，以确保在主副本达到配置的最大内存设置之前，永不达到实际的内存不足状态。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># replica-ignore-maxmemory yes</span><br><br><span class="hljs-comment">############################# LAZY FREEING 懒惰释放 ####################################</span><br><br><span class="hljs-comment"># Redis has two primitives to delete keys. One is called DEL and is a blocking</span><br><span class="hljs-comment"># deletion of the object. It means that the server stops processing new commands</span><br><span class="hljs-comment"># in order to reclaim all the memory associated with an object in a synchronous</span><br><span class="hljs-comment"># way. If the key deleted is associated with a small object, the time needed</span><br><span class="hljs-comment"># in order to execute the DEL command is very small and comparable to most other</span><br><span class="hljs-comment"># O(1) or O(log_N) commands in Redis. However if the key is associated with an</span><br><span class="hljs-comment"># aggregated value containing millions of elements, the server can block for</span><br><span class="hljs-comment"># a long time (even seconds) in order to complete the operation.</span><br><span class="hljs-comment"># Redis有两个删除键的原语。 一种称为DEL，它是对象的阻塞删除。 这意味着服务器停止处理新命令，</span><br><span class="hljs-comment"># 以便以同步方式回收与对象关联的所有内存。 如果删除的键与一个小对象相关联，</span><br><span class="hljs-comment"># 则执行DEL命令所需的时间非常短，可与大多数其他对象相比 Redis 中的 O（1）或 O（log_N）命令。 </span><br><span class="hljs-comment"># 但是，如果键与包含数百万个元素的聚合值关联，则服务器可能会阻塞很长时间（甚至几秒钟）以完成操作。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># For the above reasons Redis also offers non blocking deletion primitives</span><br><span class="hljs-comment"># such as UNLINK (non blocking DEL) and the ASYNC option of FLUSHALL and</span><br><span class="hljs-comment"># FLUSHDB commands, in order to reclaim memory in background. Those commands</span><br><span class="hljs-comment"># are executed in constant time. Another thread will incrementally free the</span><br><span class="hljs-comment"># object in the background as fast as possible.</span><br><span class="hljs-comment"># 由于上述原因，Redis还提供了非阻塞删除原语，例如UNLINK（非阻塞DEL）以及FLUSHALL和FLUSHDB命令的</span><br><span class="hljs-comment"># ASYNC选项，以便在后台回收内存。 这些命令在固定时间内执行。 另一个线程将尽可能快地在后台逐渐释放对象。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># DEL, UNLINK and ASYNC option of FLUSHALL and FLUSHDB are user-controlled.</span><br><span class="hljs-comment"># It&#x27;s up to the design of the application to understand when it is a good</span><br><span class="hljs-comment"># idea to use one or the other. However the Redis server sometimes has to</span><br><span class="hljs-comment"># delete keys or flush the whole database as a side effect of other operations.</span><br><span class="hljs-comment"># Specifically Redis deletes objects independently of a user call in the</span><br><span class="hljs-comment"># following scenarios:</span><br><span class="hljs-comment"># 用户可以控制FLUSHALL和FLUSHDB的DEL，UNLINK和ASYNC选项。 由应用程序的设计来决定何时使用</span><br><span class="hljs-comment"># 一个或另一个是一个好主意。 但是，Redis服务器有时必须删除键或刷新整个数据库，这是其他操作的副作用。 </span><br><span class="hljs-comment"># 特别是在以下情况下，Redis会独立于用户调用删除对象：</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 1) On eviction, because of the maxmemory and maxmemory policy configurations,</span><br><span class="hljs-comment">#    in order to make room for new data, without going over the specified</span><br><span class="hljs-comment">#    memory limit.</span><br><span class="hljs-comment"># 在逐出时，由于maxmemory和maxmemory策略配置，为了在不超过指定的内存限制的情况下为新数据腾出空间。</span><br><span class="hljs-comment"># 2) Because of expire: when a key with an associated time to live (see the</span><br><span class="hljs-comment">#    EXPIRE command) must be deleted from memory.</span><br><span class="hljs-comment"># 由于过期：必须从内存中删除具有相关生存时间的 key（请参阅 EXPIRE 命令）。</span><br><span class="hljs-comment"># 3) Because of a side effect of a command that stores data on a key that may</span><br><span class="hljs-comment">#    already exist. For example the RENAME command may delete the old key</span><br><span class="hljs-comment">#    content when it is replaced with another one. Similarly SUNIONSTORE</span><br><span class="hljs-comment">#    or SORT with STORE option may delete existing keys. The SET command</span><br><span class="hljs-comment">#    itself removes any old content of the specified key in order to replace</span><br><span class="hljs-comment">#    it with the specified string.</span><br><span class="hljs-comment"># 由于将数据存储在可能已经存在的键上的命令的副作用。 例如，当 RENAME 命令被另一旧密钥内容替换时，</span><br><span class="hljs-comment"># 它可能会删除它。 同样，SUNIONSTORE 或S ORT with STORE 选项可能会删除现有密钥。 </span><br><span class="hljs-comment"># SET 命令本身会删除指定键的所有旧内容，以便将其替换为指定的字符串。</span><br><span class="hljs-comment"># 4) During replication, when a replica performs a full resynchronization with</span><br><span class="hljs-comment">#    its master, the content of the whole database is removed in order to</span><br><span class="hljs-comment">#    load the RDB file just transferred.</span><br><span class="hljs-comment"># 在复制期间，当副本与其主副本执行完全重新同步时，将删除整个数据库的内容，以便加载刚传输的 RDB 文件。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># In all the above cases the default is to delete objects in a blocking way,</span><br><span class="hljs-comment"># like if DEL was called. However you can configure each case specifically</span><br><span class="hljs-comment"># in order to instead release memory in a non-blocking way like if UNLINK</span><br><span class="hljs-comment"># was called, using the following configuration directives:</span><br><span class="hljs-comment"># 在上述所有情况下，默认设置都是以阻塞方式删除对象，就像调用DEL一样。 但是，您可以专门配置每种情况，</span><br><span class="hljs-comment"># 以便使用以下配置指令以非阻塞方式释放内存，例如调用UNLINK的情况：</span><br><br>lazyfree-lazy-eviction no<br>lazyfree-lazy-expire no<br>lazyfree-lazy-server-del no<br>replica-lazy-flush no<br><br><span class="hljs-comment">############################## APPEND ONLY MODE AOF日志模式 ###############################</span><br><br><span class="hljs-comment"># By default Redis asynchronously dumps the dataset on disk. This mode is</span><br><span class="hljs-comment"># good enough in many applications, but an issue with the Redis process or</span><br><span class="hljs-comment"># a power outage may result into a few minutes of writes lost (depending on</span><br><span class="hljs-comment"># the configured save points).</span><br><span class="hljs-comment"># 默认情况下，Redis异步将数据集转储到磁盘上。 此模式在许多应用程序中已经足够好，</span><br><span class="hljs-comment"># 但是Redis进程问题或电源中断可能会导致几分钟的写入丢失（取决于配置的保存点）。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The Append Only File is an alternative persistence mode that provides</span><br><span class="hljs-comment"># much better durability. For instance using the default data fsync policy</span><br><span class="hljs-comment"># (see later in the config file) Redis can lose just one second of writes in a</span><br><span class="hljs-comment"># dramatic event like a server power outage, or a single write if something</span><br><span class="hljs-comment"># wrong with the Redis process itself happens, but the operating system is</span><br><span class="hljs-comment"># still running correctly.</span><br><span class="hljs-comment"># 仅附加文件是一种替代的持久性模式，可提供更好的持久性。 例如，使用默认数据fsync策略（请参阅配置文件中的稍后内容），Redis可能在服务器断电等严重事件中丢失一秒钟的写入，如果Redis进程本身发生错误，则一次写入将丢失一次，但是 操作系统仍在正常运行。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># AOF and RDB persistence can be enabled at the same time without problems.</span><br><span class="hljs-comment"># If the AOF is enabled on startup Redis will load the AOF, that is the file</span><br><span class="hljs-comment"># with the better durability guarantees.</span><br><span class="hljs-comment"># 可以同时启用AOF和RDB持久性，而不会出现问题。 如果在启动时启用了AOF，则Redis将加载AOF，</span><br><span class="hljs-comment"># 即该文件具有更好的持久性保证。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Please check http://redis.io/topics/persistence for more information.</span><br><br>appendonly no<br><br><span class="hljs-comment"># The name of the append only file (default: &quot;appendonly.aof&quot;)</span><br><br>appendfilename <span class="hljs-string">&quot;appendonly.aof&quot;</span><br><br><span class="hljs-comment"># The fsync() call tells the Operating System to actually write data on disk</span><br><span class="hljs-comment"># instead of waiting for more data in the output buffer. Some OS will really flush</span><br><span class="hljs-comment"># data on disk, some other OS will just try to do it ASAP.</span><br><span class="hljs-comment"># fsync()调用告诉操作系统将数据实际写在磁盘上，而不是等待输出缓冲区中的更多数据。 有些操作系统确实会刷新磁盘上的数据，而另一些操作系统只会尝试尽快完成该操作。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Redis supports three different modes:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># no: don&#x27;t fsync, just let the OS flush the data when it wants. Faster.</span><br><span class="hljs-comment">#不要fsync，只要让OS在需要时刷新数据即可。快。</span><br><span class="hljs-comment"># always: fsync after every write to the append only log. Slow, Safest.</span><br><span class="hljs-comment">#每次写入 AOF 后 fsync。慢，安全</span><br><span class="hljs-comment"># everysec: fsync only one time every second. Compromise.</span><br><span class="hljs-comment">#每秒仅同步一次fsync。 妥协。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The default is &quot;everysec&quot;, as that&#x27;s usually the right compromise between</span><br><span class="hljs-comment"># speed and data safety. It&#x27;s up to you to understand if you can relax this to</span><br><span class="hljs-comment"># &quot;no&quot; that will let the operating system flush the output buffer when</span><br><span class="hljs-comment"># it wants, for better performances (but if you can live with the idea of</span><br><span class="hljs-comment"># some data loss consider the default persistence mode that&#x27;s snapshotting),</span><br><span class="hljs-comment"># or on the contrary, use &quot;always&quot; that&#x27;s very slow but a bit safer than</span><br><span class="hljs-comment"># everysec.</span><br><span class="hljs-comment"># 默认值为“ everysec”，因为这通常是速度和数据安全性之间的正确折衷。 您可以了解是否可以将其放宽为“ no”，</span><br><span class="hljs-comment"># 以便操作系统在需要时刷新输出缓冲区，以获得更好的性能（但是如果您可以忍受某些数据丢失的想法，</span><br><span class="hljs-comment"># 请考虑使用默认的持久模式 （即快照），或者相反，请使用“总是”，该速度非常慢，但比 everysec 更安全。</span><br><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># More details please check the following article:</span><br><span class="hljs-comment"># http://antirez.com/post/redis-persistence-demystified.html</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># If unsure, use &quot;everysec&quot;.</span><br><br><span class="hljs-comment"># appendfsync always</span><br>appendfsync everysec<br><span class="hljs-comment"># appendfsync no</span><br><br><span class="hljs-comment"># When the AOF fsync policy is set to always or everysec, and a background</span><br><span class="hljs-comment"># saving process (a background save or AOF log background rewriting) is</span><br><span class="hljs-comment"># performing a lot of I/O against the disk, in some Linux configurations</span><br><span class="hljs-comment"># Redis may block too long on the fsync() call. Note that there is no fix for</span><br><span class="hljs-comment"># this currently, as even performing fsync in a different thread will block</span><br><span class="hljs-comment"># our synchronous write(2) call.</span><br><span class="hljs-comment"># 当AOF fsync 策略设置为 always 或 everysec，并且后台保存进程（后台保存或 AOF 日志后台重写）对磁盘执行大量I / O时，在某些Linux配置中，Redis fsync() 调用可能会在磁盘上阻塞太长时间。 请注意，目前尚无此修复程序，因为即使在其他线程中执行 fsync 也将阻止我们的同步 write（2）调用。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># In order to mitigate this problem it&#x27;s possible to use the following option</span><br><span class="hljs-comment"># that will prevent fsync() from being called in the main process while a</span><br><span class="hljs-comment"># BGSAVE or BGREWRITEAOF is in progress.</span><br><span class="hljs-comment"># 为了缓解此问题，可以使用以下选项来防止在 BGSAVE 或 BGREWRITEAOF 进行时在主进程中调用 fsync()。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># This means that while another child is saving, the durability of Redis is</span><br><span class="hljs-comment"># the same as &quot;appendfsync none&quot;. In practical terms, this means that it is</span><br><span class="hljs-comment"># possible to lose up to 30 seconds of log in the worst scenario (with the</span><br><span class="hljs-comment"># default Linux settings).</span><br><span class="hljs-comment"># 这意味着当另一个孩子正在保存时，Redis 的持久性与“ appendfsync none”相同。 实际上，</span><br><span class="hljs-comment"># 这意味着在最坏的情况下（使用默认的 Linux 设置）可能会丢失多达 30 秒的日志。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># If you have latency problems turn this to &quot;yes&quot;. Otherwise leave it as</span><br><span class="hljs-comment"># &quot;no&quot; that is the safest pick from the point of view of durability.</span><br><span class="hljs-comment">#  如果您有延迟问题，请将其设置为“是”。 否则将其保留为,从耐用性的角度来看，“ no”是最安全的选择。</span><br><br>no-appendfsync-on-rewrite no<br><br><span class="hljs-comment"># Automatic rewrite of the append only file.（自动重写 AOF。）</span><br><span class="hljs-comment"># Redis is able to automatically rewrite the log file implicitly calling</span><br><span class="hljs-comment"># BGREWRITEAOF when the AOF log size grows by the specified percentage.</span><br><span class="hljs-comment"># 当AOF日志大小增加指定的百分比时，Redis可以隐式调用 BGREWRITEAOF 自动重写日志文件。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># This is how it works: Redis remembers the size of the AOF file after the</span><br><span class="hljs-comment"># latest rewrite (if no rewrite has happened since the restart, the size of</span><br><span class="hljs-comment"># the AOF at startup is used).</span><br><span class="hljs-comment"># 它是这样工作的：Redis会在最近一次重写后记住AOF文件的大小（如果自重新启动以来未发生任何重写，则使用启动时AOF的大小）。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># This base size is compared to the current size. If the current size is</span><br><span class="hljs-comment"># bigger than the specified percentage, the rewrite is triggered. Also</span><br><span class="hljs-comment"># you need to specify a minimal size for the AOF file to be rewritten, this</span><br><span class="hljs-comment"># is useful to avoid rewriting the AOF file even if the percentage increase</span><br><span class="hljs-comment"># is reached but it is still pretty small.</span><br><span class="hljs-comment"># 将此基本大小与当前大小进行比较。 如果当前大小大于指定的百分比，则触发重写。 </span><br><span class="hljs-comment"># 另外，您需要指定要重写的AOF文件的最小大小，这对于避免重写AOF文件非常有用，</span><br><span class="hljs-comment"># 即使达到百分比增加，但它仍然很小。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Specify a percentage of zero in order to disable the automatic AOF</span><br><span class="hljs-comment"># rewrite feature.   </span><br><span class="hljs-comment"># 指定零百分比以禁用自动AOF重写功能。</span><br><br>auto-aof-rewrite-percentage 100<br>auto-aof-rewrite-min-size 64mb<br><br><span class="hljs-comment"># An AOF file may be found to be truncated at the end during the Redis</span><br><span class="hljs-comment"># startup process, when the AOF data gets loaded back into memory.</span><br><span class="hljs-comment"># This may happen when the system where Redis is running</span><br><span class="hljs-comment"># crashes, especially when an ext4 filesystem is mounted without the</span><br><span class="hljs-comment"># data=ordered option (however this can&#x27;t happen when Redis itself</span><br><span class="hljs-comment"># crashes or aborts but the operating system still works correctly).</span><br><span class="hljs-comment"># AOF 文件可能在尾部是不完整的，当 Redis 启动的时候，AOF文件的数据被载入内存。重启可能发生在redis所在的主机操作系统宕机后，尤其在ext4文件系统没有加上data=ordered选项（redis宕机或者异常终止不会造成尾部不完整现象。）出现这种现象，可以选择让redis退出，或者导入尽可能多的数据。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Redis can either exit with an error when this happens, or load as much</span><br><span class="hljs-comment"># data as possible (the default now) and start if the AOF file is found</span><br><span class="hljs-comment"># to be truncated at the end. The following option controls this behavior.</span><br><span class="hljs-comment"># 发生这种情况时，Redis 可能会退出并显示错误，也可以在发现 AOF 文件最后被截断后，加载尽可能多的数据（当前为默认值）。以下选项控制此行为。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># If aof-load-truncated is set to yes, a truncated AOF file is loaded and</span><br><span class="hljs-comment"># the Redis server starts emitting a log to inform the user of the event.</span><br><span class="hljs-comment"># Otherwise if the option is set to no, the server aborts with an error</span><br><span class="hljs-comment"># and refuses to start. When the option is set to no, the user requires</span><br><span class="hljs-comment"># to fix the AOF file using the &quot;redis-check-aof&quot; utility before to restart</span><br><span class="hljs-comment"># the server.</span><br><span class="hljs-comment"># 如果 aof-load-truncated 设置为 yes，则将加载截短的 AOF 文件，并且 Redis 服务器将开始</span><br><span class="hljs-comment"># 发出日志以将事件通知用户。否则，如果该选项设置为 no，则服务器将中止并显示错误，并拒绝启动。</span><br><span class="hljs-comment"># 如果将该选项设置为 no，则用户需要在重新启动服务器之前使用“ redis-check-aof”修复 AOF 文件。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Note that if the AOF file will be found to be corrupted in the middle</span><br><span class="hljs-comment"># the server will still exit with an error. This option only applies when</span><br><span class="hljs-comment"># Redis will try to read more data from the AOF file but not enough bytes</span><br><span class="hljs-comment"># will be found.</span><br><span class="hljs-comment"># 请注意，如果在中间发现 AOF 文件已损坏，则服务器仍将退出并出现错误。 仅当 Redis 尝试从 AOF </span><br><span class="hljs-comment"># 文件读取更多数据但找不到足够的字节时，此选项才适用。</span><br><br>aof-load-truncated yes<br><br><span class="hljs-comment"># When rewriting the AOF file, Redis is able to use an RDB preamble in the</span><br><span class="hljs-comment"># AOF file for faster rewrites and recoveries. When this option is turned</span><br><span class="hljs-comment"># on the rewritten AOF file is composed of two different stanzas:</span><br><span class="hljs-comment"># 重写AOF文件时，Redis可以使用AOF文件中的RDB前同步码来更快地进行重写和恢复。 启用此选项后，重写的AOF文件由两个不同的节组成：</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   [RDB file][AOF tail]</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># When loading Redis recognizes that the AOF file starts with the &quot;REDIS&quot;</span><br><span class="hljs-comment"># string and loads the prefixed RDB file, and continues loading the AOF</span><br><span class="hljs-comment"># tail.</span><br><span class="hljs-comment"># 加载时，Redis会识别AOF文件以“ REDIS”字符串开头并加载带前缀的RDB文件，然后继续加载AOF尾部。</span><br>aof-use-rdb-preamble yes<br><br><span class="hljs-comment">################################ LUA SCRIPTING LUA脚本  ###############################</span><br><br><span class="hljs-comment"># Max execution time of a Lua script in milliseconds.（Lua脚本的最大执行时间（以毫秒为单位）。）</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># If the maximum execution time is reached Redis will log that a script is</span><br><span class="hljs-comment"># still in execution after the maximum allowed time and will start to</span><br><span class="hljs-comment"># reply to queries with an error.</span><br><span class="hljs-comment"># 如果达到了最大执行时间，Redis将记录在允许的最大时间后脚本仍在执行中，并将开始以错误答复查询。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># When a long running script exceeds the maximum execution time only the</span><br><span class="hljs-comment"># SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be</span><br><span class="hljs-comment"># used to stop a script that did not yet called write commands. The second</span><br><span class="hljs-comment"># is the only way to shut down the server in the case a write command was</span><br><span class="hljs-comment"># already issued by the script but the user doesn&#x27;t want to wait for the natural</span><br><span class="hljs-comment"># termination of the script.</span><br><span class="hljs-comment"># 如果长时间运行的脚本超过了最大执行时间，则只有“ SCRIPT KILL”和“ SHUTDOWN NOSAVE”命令可用。第一个可用于停止尚未调用写命令的脚本。 第二种是在脚本已发出写命令但用户不想等待脚本自然终止的情况下关闭服务器的唯一方法。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Set it to 0 or a negative value for unlimited execution without warnings.</span><br><span class="hljs-comment"># 将其设置为0或负值可无警告地无限执行。</span><br>lua-time-limit 5000<br><br><span class="hljs-comment">################################ REDIS CLUSTER REDIS集群 ##############################</span><br><br><span class="hljs-comment"># Normal Redis instances can&#x27;t be part of a Redis Cluster; only nodes that are</span><br><span class="hljs-comment"># started as cluster nodes can. In order to start a Redis instance as a</span><br><span class="hljs-comment"># cluster node enable the cluster support uncommenting the following:</span><br><span class="hljs-comment"># 普通Redis实例不能属于Redis集群；只有作为群集节点启动的节点可以。为了将 Redis 实例作为群集节点启动，请在不注释以下内容的情况下启用群集支持：</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># cluster-enabled yes</span><br><br><span class="hljs-comment"># Every cluster node has a cluster configuration file. This file is not</span><br><span class="hljs-comment"># intended to be edited by hand. It is created and updated by Redis nodes.</span><br><span class="hljs-comment"># Every Redis Cluster node requires a different cluster configuration file.</span><br><span class="hljs-comment"># Make sure that instances running in the same system do not have</span><br><span class="hljs-comment"># overlapping cluster configuration file names.</span><br><span class="hljs-comment"># 每个群集节点都有一个群集配置文件。 该文件不适合手工编辑。 它由Redis节点创建和更新。 每个Redis群集节点都需要一个不同的群集配置文件。 确保在同一系统上运行的实例没有重叠的集群配置文件名。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># cluster-config-file nodes-6379.conf</span><br><br><span class="hljs-comment"># Cluster node timeout is the amount of milliseconds a node must be unreachable</span><br><span class="hljs-comment"># for it to be considered in failure state.</span><br><span class="hljs-comment"># Most other internal time limits are multiple of the node timeout.</span><br><span class="hljs-comment"># 群集节点超时是一个节点必须不可达的毫秒数，才能将其视为故障状态。 </span><br><span class="hljs-comment"># 其他大多数内部时间限制是节点超时的倍数。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># cluster-node-timeout 15000</span><br><br><span class="hljs-comment"># A replica of a failing master will avoid to start a failover if its data</span><br><span class="hljs-comment"># looks too old.</span><br><span class="hljs-comment"># 如果发生故障的主副本的数据看起来太旧，它将避免启动故障转移。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># There is no simple way for a replica to actually have an exact measure of</span><br><span class="hljs-comment"># its &quot;data age&quot;, so the following two checks are performed:</span><br><span class="hljs-comment"># 没有一种简单的方法可以使副本实际上具有其“数据年龄”的准确度量，因此执行以下两项检查：</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 1) If there are multiple replicas able to failover, they exchange messages</span><br><span class="hljs-comment">#    in order to try to give an advantage to the replica with the best</span><br><span class="hljs-comment">#    replication offset (more data from the master processed).</span><br><span class="hljs-comment">#    Replicas will try to get their rank by offset, and apply to the start</span><br><span class="hljs-comment">#    of the failover a delay proportional to their rank.</span><br><span class="hljs-comment"># 如果存在多个能够进行故障转移的副本，则它们会交换消息，以便尝试利用具有最佳复制偏移量（处理了更多来自主数据库的数据）的副本来获得优势。 副本将尝试按偏移量获取其等级，并将与它们的等级成比例的延迟应用于故障转移。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 2) Every single replica computes the time of the last interaction with</span><br><span class="hljs-comment">#    its master. This can be the last ping or command received (if the master</span><br><span class="hljs-comment">#    is still in the &quot;connected&quot; state), or the time that elapsed since the</span><br><span class="hljs-comment">#    disconnection with the master (if the replication link is currently down).</span><br><span class="hljs-comment">#    If the last interaction is too old, the replica will not try to failover</span><br><span class="hljs-comment">#    at all.</span><br><span class="hljs-comment"># 每个单个副本都会计算与其母版之间最后一次交互的时间。 这可以是最后收到的ping或命令（如果主服务器仍处于“已连接”状态），也可以是自从与主服务器断开连接以来经过的时间（如果复制链接当前已断开）。如果最后一次交互也是 旧版本，副本将完全不会尝试故障转移。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The point &quot;2&quot; can be tuned by user. Specifically a replica will not perform</span><br><span class="hljs-comment"># the failover if, since the last interaction with the master, the time</span><br><span class="hljs-comment"># elapsed is greater than:</span><br><span class="hljs-comment"># 用户可以调整点“ 2”。 具体而言，如果自从上次与主服务器进行交互以来，经过的时间大于以下时间，则副本将不执行故障转移：</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   (node-timeout * replica-validity-factor) + repl-ping-replica-period</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># So for example if node-timeout is 30 seconds, and the replica-validity-factor</span><br><span class="hljs-comment"># is 10, and assuming a default repl-ping-replica-period of 10 seconds, the</span><br><span class="hljs-comment"># replica will not try to failover if it was not able to talk with the master</span><br><span class="hljs-comment"># for longer than 310 seconds.</span><br><span class="hljs-comment"># 因此，例如，如果节点超时（node-timeout）为30秒，并且副本有效性因子（replica-validity-factor）为10，并且假设默认的 repl-ping-replica-period 值为10秒，即如果超过 310 秒副本将不会尝试进行故障转移。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># A large replica-validity-factor may allow replicas with too old data to failover</span><br><span class="hljs-comment"># a master, while a too small value may prevent the cluster from being able to</span><br><span class="hljs-comment"># elect a replica at all.</span><br><span class="hljs-comment"># 较大的 replica-validity-factor 可能会使数据过旧的副本无法对主副本进行故障转移，而值太小则可能会使群集根本无法选择副本。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># For maximum availability, it is possible to set the replica-validity-factor</span><br><span class="hljs-comment"># to a value of 0, which means, that replicas will always try to failover the</span><br><span class="hljs-comment"># master regardless of the last time they interacted with the master.</span><br><span class="hljs-comment"># (However they&#x27;ll always try to apply a delay proportional to their</span><br><span class="hljs-comment"># offset rank).</span><br><span class="hljs-comment"># 为了获得最大可用性，可以将副本有效性因子设置为 0，这意味着，无论副本上次与主服务器进行交互时，副本将始终尝试对主服务器进行故障转移。（但是，他们将始终尝试应用与其偏移等级成正比的延迟）。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Zero is the only value able to guarantee that when all the partitions heal</span><br><span class="hljs-comment"># the cluster will always be able to continue.</span><br><span class="hljs-comment"># 零是唯一能够保证当所有分区恢复正常后群集将始终能够继续运行的值。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># cluster-replica-validity-factor 10</span><br><br><span class="hljs-comment"># Cluster replicas are able to migrate to orphaned masters, that are masters</span><br><span class="hljs-comment"># that are left without working replicas. This improves the cluster ability</span><br><span class="hljs-comment"># to resist to failures as otherwise an orphaned master can&#x27;t be failed over</span><br><span class="hljs-comment"># in case of failure if it has no working replicas.</span><br><span class="hljs-comment"># 群集副本能够迁移到孤立的主数据库，即那些没有工作副本的主数据库。这样可以提高群集抵御故障的能力，因为如果孤立的主节点没有可用的副本，则该主节点在发生故障的情况下也无法进行故障转移。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Replicas migrate to orphaned masters only if there are still at least a</span><br><span class="hljs-comment"># given number of other working replicas for their old master. This number</span><br><span class="hljs-comment"># is the &quot;migration barrier&quot;. A migration barrier of 1 means that a replica</span><br><span class="hljs-comment"># will migrate only if there is at least 1 other working replica for its master</span><br><span class="hljs-comment"># and so forth. It usually reflects the number of replicas you want for every</span><br><span class="hljs-comment"># master in your cluster.</span><br><span class="hljs-comment"># 仅当旧的主副本仍存在至少给定数量的其他工作副本时，从副本才会迁移到孤立的主副本。这个数字是“移民壁垒”。 迁移障碍为 1 表示仅当副本数据库的主副本上至少有 1 个其他工作副本时，副本副本才会迁移。它通常反映出集群中每个主数据库所需的副本数。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Default is 1 (replicas migrate only if their masters remain with at least</span><br><span class="hljs-comment"># one replica). To disable migration just set it to a very large value.</span><br><span class="hljs-comment"># A value of 0 can be set but is useful only for debugging and dangerous</span><br><span class="hljs-comment"># in production.</span><br><span class="hljs-comment"># 默认值为 1（仅当其主副本保留至少一个从副本时，从副本才会迁移）。要禁用迁移，只需将其设置为非常大的值即可。可以将值设置为 0，但仅用于调试和生产危险。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># cluster-migration-barrier 1</span><br><br><span class="hljs-comment"># By default Redis Cluster nodes stop accepting queries if they detect there</span><br><span class="hljs-comment"># is at least an hash slot uncovered (no available node is serving it).</span><br><span class="hljs-comment"># This way if the cluster is partially down (for example a range of hash slots</span><br><span class="hljs-comment"># are no longer covered) all the cluster becomes, eventually, unavailable.</span><br><span class="hljs-comment"># It automatically returns available as soon as all the slots are covered again.</span><br><span class="hljs-comment"># 默认情况下，如果 Redis 集群节点检测到至少发现一个哈希槽（没有可用的节点正在为其提供服务），它们将停止接受查询。这样如果集群部分关闭（例如，不再覆盖哈希槽的范围），则所有集群最终将变得不可用。再次覆盖所有插槽后，它将自动返回可用状态。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># However sometimes you want the subset of the cluster which is working,</span><br><span class="hljs-comment"># to continue to accept queries for the part of the key space that is still</span><br><span class="hljs-comment"># covered. In order to do so, just set the cluster-require-full-coverage</span><br><span class="hljs-comment"># option to no.</span><br><span class="hljs-comment">#  但是有时您希望正在运行的群集子集继续接受对仍覆盖的部分键空间的查询。为此只需将 cluster-require-full-coverage 选项设置为 no。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># cluster-require-full-coverage yes</span><br><br><span class="hljs-comment"># This option, when set to yes, prevents replicas from trying to failover its</span><br><span class="hljs-comment"># master during master failures. However the master can still perform a</span><br><span class="hljs-comment"># manual failover, if forced to do so.</span><br><span class="hljs-comment"># 设置为 yes 时，此选项可防止副本在主服务器发生故障时尝试对其主服务器进行故障转移。但是，主服务器仍然可以执行手动故障转移（如果被迫执行）。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># This is useful in different scenarios, especially in the case of multiple</span><br><span class="hljs-comment"># data center operations, where we want one side to never be promoted if not</span><br><span class="hljs-comment"># in the case of a total DC failure.</span><br><span class="hljs-comment">#  这在不同的情况下很有用，特别是在多个数据中心操作的情况下，如果我们希望在完全 DC 故障的情况下不对一侧进行升级，那么这是不希望的。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># cluster-replica-no-failover no</span><br><br><span class="hljs-comment"># In order to setup your cluster make sure to read the documentation</span><br><span class="hljs-comment"># available at http://redis.io web site.</span><br><br><span class="hljs-comment">########################## CLUSTER DOCKER/NAT support 集群DOCKER / NAT支持  ########################</span><br><br><span class="hljs-comment"># In certain deployments, Redis Cluster nodes address discovery fails, because</span><br><span class="hljs-comment"># addresses are NAT-ted or because ports are forwarded (the typical case is</span><br><span class="hljs-comment"># Docker and other containers).</span><br><span class="hljs-comment"># 在某些部署中，Redis 集群节点的地址发现失败，这是因为地址经过 NAT 限制或端口被转发（典型情况是 Docker 和其他容器）。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># In order to make Redis Cluster working in such environments, a static</span><br><span class="hljs-comment"># configuration where each node knows its public address is needed. The</span><br><span class="hljs-comment"># following two options are used for this scope, and are:</span><br><span class="hljs-comment">#  为了使Redis 集群在这样的环境中工作，需要一个静态配置，其中每个节点都知道其公共地址。以下两个选项用于此范围，分别是：</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># * cluster-announce-ip# 群集公告IP</span><br><span class="hljs-comment"># * cluster-announce-port# 群集公告端口</span><br><span class="hljs-comment"># * cluster-announce-bus-port# 群集公告总线端口</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Each instruct the node about its address, client port, and cluster message</span><br><span class="hljs-comment"># bus port. The information is then published in the header of the bus packets</span><br><span class="hljs-comment"># so that other nodes will be able to correctly map the address of the node</span><br><span class="hljs-comment"># publishing the information.</span><br><span class="hljs-comment"># 每一个都向节点指示其地址，客户端端口和集群消息总线端口。然后将信息发布在总线数据包的标头中，以便其他节点将能够正确映射发布信息的节点的地址。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># If the above options are not used, the normal Redis Cluster auto-detection</span><br><span class="hljs-comment"># will be used instead. 如果不使用上述选项，则将使用常规的Redis群集自动检测。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Note that when remapped, the bus port may not be at the fixed offset of</span><br><span class="hljs-comment"># clients port + 10000, so you can specify any port and bus-port depending</span><br><span class="hljs-comment"># on how they get remapped. If the bus-port is not set, a fixed offset of</span><br><span class="hljs-comment"># 10000 will be used as usually.</span><br><span class="hljs-comment"># 请注意，重新映射时，总线端口可能不在客户端端口 + 10000的固定偏移处，因此您可以根据重新映射的方式指定任何端口和总线端口。如果未设置总线端口，通常将使用 10000 的固定偏移量。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Example:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># cluster-announce-ip 10.1.1.5</span><br><span class="hljs-comment"># cluster-announce-port 6379</span><br><span class="hljs-comment"># cluster-announce-bus-port 6380</span><br><br><span class="hljs-comment">################################## SLOW LOG 慢日志 ###################################</span><br><br><span class="hljs-comment"># The Redis Slow Log is a system to log queries that exceeded a specified</span><br><span class="hljs-comment"># execution time. The execution time does not include the I/O operations</span><br><span class="hljs-comment"># like talking with the client, sending the reply and so forth,</span><br><span class="hljs-comment"># but just the time needed to actually execute the command (this is the only</span><br><span class="hljs-comment"># stage of command execution where the thread is blocked and can not serve</span><br><span class="hljs-comment"># other requests in the meantime).</span><br><span class="hljs-comment"># Redis Slow Log 是一个用于记录超过指定执行时间的查询的系统。执行时间不包括与客户端交谈，发送回复等I / O操作，而是实际执行命令所需的时间（这是命令执行的唯一阶段，在该阶段线程被阻塞并且可以在此期间不满足其他要求）。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># You can configure the slow log with two parameters: one tells Redis</span><br><span class="hljs-comment"># what is the execution time, in microseconds, to exceed in order for the</span><br><span class="hljs-comment"># command to get logged, and the other parameter is the length of the</span><br><span class="hljs-comment"># slow log. When a new command is logged the oldest one is removed from the</span><br><span class="hljs-comment"># queue of logged commands.</span><br><span class="hljs-comment"># 您可以使用以下两个参数配置慢速日志：一个告诉 Redis 为了使命令被记录而超过执行时间（以微秒为单位），另一个参数是慢速日志的长度。记录新命令时，最旧的命令将从记录的命令队列中删除。</span><br><br><span class="hljs-comment"># The following time is expressed in microseconds, so 1000000 is equivalent</span><br><span class="hljs-comment"># to one second. Note that a negative number disables the slow log, while</span><br><span class="hljs-comment"># a value of zero forces the logging of every command.</span><br><span class="hljs-comment"># 以下时间以微秒表示，因此 1000000 等于一秒。请注意，负数将禁用慢速日志记录，而零值将强制记录每个命令。</span><br>slowlog-log-slower-than 10000<br><br><span class="hljs-comment"># There is no limit to this length. Just be aware that it will consume memory.</span><br><span class="hljs-comment"># You can reclaim memory used by the slow log with SLOWLOG RESET.</span><br><span class="hljs-comment"># 慢查询日志长度。当一个新的命令被写进日志的时候，最老的那个记录会被删掉。这个长度没有限制。只要有足够的内存就行。你可以通过 SLOWLOG RESET 来释放内存。</span><br>slowlog-max-len 128<br><br><span class="hljs-comment">################################ LATENCY MONITOR 延迟监视器 ##############################</span><br><br><span class="hljs-comment"># The Redis latency monitoring subsystem samples different operations</span><br><span class="hljs-comment"># at runtime in order to collect data related to possible sources of</span><br><span class="hljs-comment"># latency of a Redis instance.</span><br><span class="hljs-comment"># Redis 延迟监视子系统会在运行时对不同的操作进行采样，以收集与 Redis 实例的潜在延迟源相关的数据。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Via the LATENCY command this information is available to the user that can</span><br><span class="hljs-comment"># print graphs and obtain reports. 通过 LATENCY 命令，该信息可以打印图形并获取报告。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The system only logs operations that were performed in a time equal or</span><br><span class="hljs-comment"># greater than the amount of milliseconds specified via the</span><br><span class="hljs-comment"># latency-monitor-threshold configuration directive. When its value is set</span><br><span class="hljs-comment"># to zero, the latency monitor is turned off.</span><br><span class="hljs-comment"># 系统仅记录在等于或大于通过 delay-monitor-threshold 配置指令指定的毫秒量的时间内执行的操作。当其值设置为零时，等待时间监视器将关闭。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># By default latency monitoring is disabled since it is mostly not needed</span><br><span class="hljs-comment"># if you don&#x27;t have latency issues, and collecting data has a performance</span><br><span class="hljs-comment"># impact, that while very small, can be measured under big load. Latency</span><br><span class="hljs-comment"># monitoring can easily be enabled at runtime using the command</span><br><span class="hljs-comment"># &quot;CONFIG SET latency-monitor-threshold &lt;milliseconds&gt;&quot; if needed.</span><br><span class="hljs-comment"># 默认情况下，延迟监视是禁用的，因为如果您没有延迟问题，则通常不需要监视，并且收集数据会对性能产生影响，尽管影响很小，但是可以在大负载下进行测量。 如果需要，可以在运行时使用命令“ CONFIG SET delay-monitor-threshold &lt;milliseconds&gt;”轻松启用延迟监视。</span><br>latency-monitor-threshold 0<br><br><span class="hljs-comment">############################# EVENT NOTIFICATION 活动通知 ##############################</span><br><br><span class="hljs-comment"># Redis can notify Pub/Sub clients about events happening in the key space.</span><br><span class="hljs-comment"># Redis 可以通知发布/订阅客户端有关 key 空间中发生的事件。</span><br><span class="hljs-comment"># This feature is documented at http://redis.io/topics/notifications</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># For instance if keyspace events notification is enabled, and a client</span><br><span class="hljs-comment"># performs a DEL operation on key &quot;foo&quot; stored in the Database 0, two</span><br><span class="hljs-comment"># messages will be published via Pub/Sub:</span><br><span class="hljs-comment"># 例如，如果启用了键空间事件通知，并且客户端对存储在数据库0中的键“ foo”执行了DEL操作，则将通过Pub / Sub发布两条消息：</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># PUBLISH __keyspace@0__:foo del</span><br><span class="hljs-comment"># PUBLISH __keyevent@0__:del foo</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># It is possible to select the events that Redis will notify among a set</span><br><span class="hljs-comment"># of classes. Every class is identified by a single character:</span><br><span class="hljs-comment"># 可以在一组类中选择Redis将通知的事件。 每个类都由一个字符标识：</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#  K     Keyspace events, published with __keyspace@&lt;db&gt;__ prefix.</span><br><span class="hljs-comment">#  E     Keyevent events, published with __keyevent@&lt;db&gt;__ prefix.</span><br><span class="hljs-comment">#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...</span><br><span class="hljs-comment">#  $     String commands</span><br><span class="hljs-comment">#  l     List commands</span><br><span class="hljs-comment">#  s     Set commands</span><br><span class="hljs-comment">#  h     Hash commands</span><br><span class="hljs-comment">#  z     Sorted set commands</span><br><span class="hljs-comment">#  x     Expired events (events generated every time a key expires)</span><br><span class="hljs-comment">#  e     Evicted events (events generated when a key is evicted for maxmemory)</span><br><span class="hljs-comment">#  A     Alias for g$lshzxe, so that the &quot;AKE&quot; string means all the events.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#  The &quot;notify-keyspace-events&quot; takes as argument a string that is composed</span><br><span class="hljs-comment">#  of zero or multiple characters. The empty string means that notifications</span><br><span class="hljs-comment">#  are disabled.</span><br><span class="hljs-comment"># “notify-keyspace-events”将由零个或多个字符组成的字符串作为参数。 空字符串表示已禁用通知。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#  Example: to enable list and generic events, from the point of view of the</span><br><span class="hljs-comment">#           event name, use: 从事件名称的角度来看，要启用列表事件和通用事件，请使用：</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#  notify-keyspace-events Elg</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#  Example 2: to get the stream of the expired keys subscribing to channel</span><br><span class="hljs-comment">#             name __keyevent@0__:expired use: 获取订阅频道名称__keyevent @0__的过期 keys 流：过期使用：</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#  notify-keyspace-events Ex</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#  By default all notifications are disabled because most users don&#x27;t need</span><br><span class="hljs-comment">#  this feature and the feature has some overhead. Note that if you don&#x27;t</span><br><span class="hljs-comment">#  specify at least one of K or E, no events will be delivered.</span><br><span class="hljs-comment"># 默认情况下，所有通知都被禁用，因为大多数用户不需要此功能，并且该功能有一些开销。 请注意，如果您未指定K或E中的至少一个，则不会传递任何事件。</span><br>notify-keyspace-events <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment">############################### ADVANCED CONFIG ###############################</span><br><br><span class="hljs-comment"># Hashes are encoded using a memory efficient data structure when they have a</span><br><span class="hljs-comment"># small number of entries, and the biggest entry does not exceed a given</span><br><span class="hljs-comment"># threshold. These thresholds can be configured using the following directives.</span><br><span class="hljs-comment"># 当哈希条目只有少量条目且最大条目没有超过给定阈值时，将使用内存高效的数据结构对其进行编码。 可以使用以下指令配置这些阈值。</span><br>hash-max-ziplist-entries 512<br>hash-max-ziplist-value 64<br><br><span class="hljs-comment"># Lists are also encoded in a special way to save a lot of space.</span><br><span class="hljs-comment"># The number of entries allowed per internal list node can be specified</span><br><span class="hljs-comment"># as a fixed maximum size or a maximum number of elements.</span><br><span class="hljs-comment"># 列表也以特殊方式编码，以节省大量空间。 每个内部列表节点允许的条目数可以指定为固定的最大大小或最大元素数。</span><br><span class="hljs-comment"># For a fixed maximum size, use -5 through -1, meaning:</span><br><span class="hljs-comment"># -5: max size: 64 Kb  &lt;-- not recommended for normal workloads</span><br><span class="hljs-comment"># -4: max size: 32 Kb  &lt;-- not recommended</span><br><span class="hljs-comment"># -3: max size: 16 Kb  &lt;-- probably not recommended</span><br><span class="hljs-comment"># -2: max size: 8 Kb   &lt;-- good</span><br><span class="hljs-comment"># -1: max size: 4 Kb   &lt;-- good</span><br><span class="hljs-comment"># Positive numbers mean store up to _exactly_ that number of elements</span><br><span class="hljs-comment"># per list node. 正数表示每个列表节点最多可以存储该数量的元素。</span><br><span class="hljs-comment"># The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size),</span><br><span class="hljs-comment"># but if your use case is unique, adjust the settings as necessary.</span><br><span class="hljs-comment"># 性能最高的选项通常是-2（8 Kb大小）或-1（4 Kb大小），但是如果您的用例是唯一的，请根据需要调整设置。</span><br>list-max-ziplist-size -2<br><br><span class="hljs-comment"># Lists may also be compressed.</span><br><span class="hljs-comment"># Compress depth is the number of quicklist ziplist nodes from *each* side of</span><br><span class="hljs-comment"># the list to *exclude* from compression.  The head and tail of the list</span><br><span class="hljs-comment"># are always uncompressed for fast push/pop operations.  Settings are:</span><br><span class="hljs-comment"># 列表也可以被压缩。 压缩深度是指从列表的*每个*一侧到*从压缩中排除*的快速列表 ziplist 节点的数量。 列表的开头和结尾始终是未压缩的，以便快速进行推入/弹出操作。 设置为：</span><br><span class="hljs-comment"># 0: disable all list compression禁用所有列表压缩</span><br><span class="hljs-comment"># 1: depth 1 means &quot;don&#x27;t start compressing until after 1 node into the list,</span><br><span class="hljs-comment">#深度 1 表示“在列表中的 1 个节点之后才开始压缩，</span><br><span class="hljs-comment">#    going from either the head or tail&quot;从头部或尾部</span><br><span class="hljs-comment">#    So: [head]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[tail]</span><br><span class="hljs-comment">#    [head], [tail] will always be uncompressed; inner nodes will compress.</span><br><span class="hljs-comment"># [头部]，[尾部]将始终未压缩；内部节点将压缩。</span><br><span class="hljs-comment"># 2: [head]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[tail]</span><br><span class="hljs-comment">#    2 here means: don&#x27;t compress head or head-&gt;next or tail-&gt;prev or tail,</span><br><span class="hljs-comment">#    but compress all nodes between them.</span><br><span class="hljs-comment">#2 这里的意思是：不要压缩头部或头部-&gt;下一个或尾部-&gt;上一个或尾部，但是压缩它们之间的所有节点。</span><br><span class="hljs-comment"># 3: [head]-&gt;[next]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[prev]-&gt;[tail]</span><br><span class="hljs-comment"># etc.</span><br>list-compress-depth 0<span class="hljs-comment"># 压缩深度</span><br><br><span class="hljs-comment"># Sets have a special encoding in just one case: when a set is composed</span><br><span class="hljs-comment"># of just strings that happen to be integers in radix 10 in the range</span><br><span class="hljs-comment"># of 64 bit signed integers.</span><br><span class="hljs-comment"># 在仅一种情况下，集合具有特殊的编码：当集合仅由字符串组成，这些字符串恰好是基数为10的整数，范围为64位有符号整数。</span><br><span class="hljs-comment"># The following configuration setting sets the limit in the size of the</span><br><span class="hljs-comment"># set in order to use this special memory saving encoding.</span><br><span class="hljs-comment"># 以下配置设置设置了大小限制，以便使用此特殊的内存节省编码。</span><br>set-max-intset-entries 512<br><br><span class="hljs-comment"># Similarly to hashes and lists, sorted sets are also specially encoded in</span><br><span class="hljs-comment"># order to save a lot of space. This encoding is only used when the length and</span><br><span class="hljs-comment"># elements of a sorted set are below the following limits:</span><br><span class="hljs-comment"># 与哈希表和列表类似，对有序集也进行了特殊编码，以节省大量空间。仅当有序集的长度和元素低于以下限制时，才使用此编码：</span><br>zset-max-ziplist-entries 128<br>zset-max-ziplist-value 64<br><br><span class="hljs-comment"># HyperLogLog sparse representation bytes limit. The limit includes the</span><br><span class="hljs-comment"># 16 bytes header. When an HyperLogLog using the sparse representation crosses</span><br><span class="hljs-comment"># this limit, it is converted into the dense representation.</span><br><span class="hljs-comment"># HyperLogLog 稀疏表示形式的字节数限制。限制包括16个字节的标头。当使用稀疏表示的 HyperLogLog 超过此限制时，它将转换为密集表示。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># A value greater than 16000 is totally useless, since at that point the</span><br><span class="hljs-comment"># dense representation is more memory efficient.</span><br><span class="hljs-comment"># 大于 16000 的值是完全没有用的，因为在那一点上，密集表示的存储效率更高。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The suggested value is ~ 3000 in order to have the benefits of</span><br><span class="hljs-comment"># the space efficient encoding without slowing down too much PFADD,</span><br><span class="hljs-comment"># which is O(N) with the sparse encoding. The value can be raised to</span><br><span class="hljs-comment"># ~ 10000 when CPU is not a concern, but space is, and the data set is</span><br><span class="hljs-comment"># composed of many HyperLogLogs with cardinality in the 0 - 15000 range.</span><br><span class="hljs-comment"># 建议值约为 3000，以便在不降低过多 PFADD 的情况下获得节省空间编码的好处，而 PFADD 的稀疏编码为O（N）。 当不关心 CPU 但空间很大时，该值可以提高到 10000，并且数据集由基数在 0-15000 范围内的许多 HyperLogLog 组成。</span><br>hll-sparse-max-bytes 3000<br><br><span class="hljs-comment"># Streams macro node max size / items. The stream data structure is a radix</span><br><span class="hljs-comment"># tree of big nodes that encode multiple items inside. Using this configuration</span><br><span class="hljs-comment"># it is possible to configure how big a single node can be in bytes, and the</span><br><span class="hljs-comment"># maximum number of items it may contain before switching to a new node when</span><br><span class="hljs-comment"># appending new stream entries. If any of the following settings are set to</span><br><span class="hljs-comment"># zero, the limit is ignored, so for instance it is possible to set just a</span><br><span class="hljs-comment"># max entires limit by setting max-bytes to 0 and max-entries to the desired</span><br><span class="hljs-comment"># value.</span><br><span class="hljs-comment"># 流宏节点最大大小/项目。流数据结构是一个大节点的基数树，它对内部的多个项目进行编码。使用此配置，可以配置单个节点的大小（以字节为单位），以及在添加新的流条目时切换到新节点之前它可能包含的最大项目数。如果以下任何设置被设置为零，则该限制将被忽略，例如，可以通过将 max-bytes 设置为 0 并将 max-entries 设置为所需值来仅设置最大整体限制。</span><br>stream-node-max-bytes 4096<br>stream-node-max-entries 100<br><br><span class="hljs-comment"># Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in</span><br><span class="hljs-comment"># order to help rehashing the main Redis hash table (the one mapping top-level</span><br><span class="hljs-comment"># keys to values). The hash table implementation Redis uses (see dict.c)</span><br><span class="hljs-comment"># performs a lazy rehashing: the more operation you run into a hash table</span><br><span class="hljs-comment"># that is rehashing, the more rehashing &quot;steps&quot; are performed, so if the</span><br><span class="hljs-comment"># server is idle the rehashing is never complete and some more memory is used</span><br><span class="hljs-comment"># by the hash table.</span><br><span class="hljs-comment"># 活动重新哈希处理每 100 毫秒 CPU 时间使用 1 毫秒，以帮助重新哈希主 Redis 哈希表（将顶级键映射到值的一个哈希表）。Redis 使用的哈希表实现（请参见dict.c）执行一次懒惰的重新哈希处理：您在要进行哈希处理的哈希表中运行的操作越多，执行的哈希处理“步骤”就越多，因此，如果服务器空闲，则哈希处理将永远不会完成 散列表使用更多的内存。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The default is to use this millisecond 10 times every second in order to</span><br><span class="hljs-comment"># actively rehash the main dictionaries, freeing memory when possible.</span><br><span class="hljs-comment"># 默认值是每秒使用 10 毫秒的毫秒数来主动重新哈希主字典，并在可能的情况下释放内存。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># If unsure:</span><br><span class="hljs-comment"># use &quot;activerehashing no&quot; if you have hard latency requirements and it is</span><br><span class="hljs-comment"># not a good thing in your environment that Redis can reply from time to time</span><br><span class="hljs-comment"># to queries with 2 milliseconds delay.</span><br><span class="hljs-comment"># 如果不确定：如果您有严格的延迟要求，请使用“ activerehashing no”，并且在您的环境中，Redis 可以不时地以 2 毫秒的延迟答复查询不是一件好事。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># use &quot;activerehashing yes&quot; if you don&#x27;t have such hard requirements but</span><br><span class="hljs-comment"># want to free memory asap when possible.</span><br><span class="hljs-comment"># 如果您没有如此严格的要求，但希望在可能的情况下尽快释放内存，请使用“ activerehashing yes”。</span><br>activerehashing yes<br><br><span class="hljs-comment"># The client output buffer limits can be used to force disconnection of clients</span><br><span class="hljs-comment"># that are not reading data from the server fast enough for some reason (a</span><br><span class="hljs-comment"># common reason is that a Pub/Sub client can&#x27;t consume messages as fast as the</span><br><span class="hljs-comment"># publisher can produce them).</span><br><span class="hljs-comment"># 客户端输出缓冲区限制可用于强制出于某些原因而无法以足够快的速度从服务器读取数据的客户端断开连接（常见原因是Pub / Sub客户端无法像发布者产生消息那样快地消耗消息）。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The limit can be set differently for the three different classes of clients:</span><br><span class="hljs-comment"># 可以为三种不同类别的客户端设置不同的限制：</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># normal -&gt; normal clients including MONITOR clients普通客户端，包括 MONITOR 客户端</span><br><span class="hljs-comment"># replica  -&gt; replica clients 副本客户端</span><br><span class="hljs-comment"># pubsub -&gt; clients subscribed to at least one pubsub channel or pattern</span><br><span class="hljs-comment">#客户端至少订阅了一个 pubsub 频道或模式</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The syntax of every client-output-buffer-limit directive is the following:</span><br><span class="hljs-comment">#  每个 client-output-buffer-limit 指令的语法如下：</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># client-output-buffer-limit &lt;class&gt; &lt;hard limit&gt; &lt;soft limit&gt; &lt;soft seconds&gt;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># A client is immediately disconnected once the hard limit is reached, or if</span><br><span class="hljs-comment"># the soft limit is reached and remains reached for the specified number of</span><br><span class="hljs-comment"># seconds (continuously).</span><br><span class="hljs-comment">#  一旦达到硬限制，或者达到软限制并在指定的秒数内（连续）保持达到此限制，客户端将立即断开连接。</span><br><span class="hljs-comment"># So for instance if the hard limit is 32 megabytes and the soft limit is</span><br><span class="hljs-comment"># 16 megabytes / 10 seconds, the client will get disconnected immediately</span><br><span class="hljs-comment"># if the size of the output buffers reach 32 megabytes, but will also get</span><br><span class="hljs-comment"># disconnected if the client reaches 16 megabytes and continuously overcomes</span><br><span class="hljs-comment"># the limit for 10 seconds.</span><br><span class="hljs-comment"># 因此，例如，如果硬限制为 32 兆字节，软限制为 16 兆字节/ 10秒，则如果输出缓冲区的大小达到 32 兆字节，客户端将立即断开连接，但如果客户端达到 16 兆字节，则也会断开连接。持续超过限制 10 秒钟。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># By default normal clients are not limited because they don&#x27;t receive data</span><br><span class="hljs-comment"># without asking (in a push way), but just after a request, so only</span><br><span class="hljs-comment"># asynchronous clients may create a scenario where data is requested faster</span><br><span class="hljs-comment"># than it can read.</span><br><span class="hljs-comment"># 默认情况下，普通客户端不受限制，因为它们不会在不询问的情况下（以推送方式）接收数据，而是在请求之后才接收数据，因此，只有异步客户端才能创建这样的场景：请求数据的速度比读取数据的速度快。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Instead there is a default limit for pubsub and replica clients, since</span><br><span class="hljs-comment"># subscribers and replicas receive data in a push fashion.</span><br><span class="hljs-comment"># 相反，由于订阅者和副本以推送方式接收数据，因此对 pubsub 和副本客户端没有默认限制。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Both the hard or the soft limit can be disabled by setting them to zero.</span><br><span class="hljs-comment">#  硬限制或软限制都可以通过将其设置为零来禁用。</span><br>client-output-buffer-limit normal 0 0 0<br>client-output-buffer-limit replica 256mb 64mb 60<br>client-output-buffer-limit pubsub 32mb 8mb 60<br><br><span class="hljs-comment"># Client query buffers accumulate new commands. They are limited to a fixed</span><br><span class="hljs-comment"># amount by default in order to avoid that a protocol desynchronization (for</span><br><span class="hljs-comment"># instance due to a bug in the client) will lead to unbound memory usage in</span><br><span class="hljs-comment"># the query buffer. However you can configure it here if you have very special</span><br><span class="hljs-comment"># needs, such us huge multi/exec requests or alike.</span><br><span class="hljs-comment"># 客户端查询缓冲区会累积新命令。默认情况下，它们被限制为固定数量，以避免协议不同步（例如由于客户端错误）导致查询缓冲区中的未绑定内存使用。但是，如果您有非常特殊的需求，例如巨大的 multi / exec请求等，则可以在此处进行配置。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># client-query-buffer-limit 1gb</span><br><br><span class="hljs-comment"># In the Redis protocol, bulk requests, that are, elements representing single</span><br><span class="hljs-comment"># strings, are normally limited ot 512 mb. However you can change this limit</span><br><span class="hljs-comment"># here.</span><br><span class="hljs-comment"># 在Redis协议中，批量请求（即表示单个字符串的元素）通常限制为512 mb。 但是，您可以在此处更改此限制。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># proto-max-bulk-len 512mb</span><br><br><span class="hljs-comment"># Redis calls an internal function to perform many background tasks, like</span><br><span class="hljs-comment"># closing connections of clients in timeout, purging expired keys that are</span><br><span class="hljs-comment"># never requested, and so forth.</span><br><span class="hljs-comment"># Redis 调用一个内部函数来执行许多后台任务，例如超时关闭客户端连接，清除从未请求的过期 key 等。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Not all tasks are performed with the same frequency, but Redis checks for</span><br><span class="hljs-comment"># tasks to perform according to the specified &quot;hz&quot; value.</span><br><span class="hljs-comment"># 并非所有任务都以相同的频率执行，但是Redis根据指定的“ hz”值检查要执行的任务。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># By default &quot;hz&quot; is set to 10. Raising the value will use more CPU when</span><br><span class="hljs-comment"># Redis is idle, but at the same time will make Redis more responsive when</span><br><span class="hljs-comment"># there are many keys expiring at the same time, and timeouts may be</span><br><span class="hljs-comment"># handled with more precision.</span><br><span class="hljs-comment">#   默认情况下，“ hz”设置为10。提高该值将在 Redis 空闲时使用更多的 CPU，但是同时当有多个键同时到期时，它将使 Redis 的响应速度更快，并且可以使超时处理更精确。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The range is between 1 and 500, however a value over 100 is usually not</span><br><span class="hljs-comment"># a good idea. Most users should use the default of 10 and raise this up to</span><br><span class="hljs-comment"># 100 only in environments where very low latency is required.</span><br><span class="hljs-comment">#  范围在1到500之间，但是通常不建议超过100。 大多数用户应该使用默认值10，并且仅在要求非常低延迟的环境中才将其提高到100。</span><br>hz 10<br><br><span class="hljs-comment"># Normally it is useful to have an HZ value which is proportional to the</span><br><span class="hljs-comment"># number of clients connected. This is useful in order, for instance, to</span><br><span class="hljs-comment"># avoid too many clients are processed for each background task invocation</span><br><span class="hljs-comment"># in order to avoid latency spikes.</span><br><span class="hljs-comment"># 通常，具有与连接的客户端数量成比例的 HZ 值很有用。例如，这有助于避免每次后台任务调用处理过多的客户端，从而避免延迟尖峰。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Since the default HZ value by default is conservatively set to 10, Redis</span><br><span class="hljs-comment"># offers, and enables by default, the ability to use an adaptive HZ value</span><br><span class="hljs-comment"># which will temporary raise when there are many connected clients.</span><br><span class="hljs-comment"># 由于默认的默认 HZ 值保守地设置为 10，因此 Redis 提供并默认启用了使用自适应 HZ 值的能力，当有许多连接的客户端时，该值会暂时升高。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># When dynamic HZ is enabled, the actual configured HZ will be used as</span><br><span class="hljs-comment"># as a baseline, but multiples of the configured HZ value will be actually</span><br><span class="hljs-comment"># used as needed once more clients are connected. In this way an idle</span><br><span class="hljs-comment"># instance will use very little CPU time while a busy instance will be</span><br><span class="hljs-comment"># more responsive.</span><br><span class="hljs-comment"># 启用动态 HZ 后，实际配置的 HZ 将用作基准，但是一旦连接了更多客户端，实际将使用配置的 HZ 值的倍数。 这样，空闲实例将占用很少的 CPU 时间，而忙碌的实例将具有更高的响应速度。</span><br>dynamic-hz yes<br><br><span class="hljs-comment"># When a child rewrites the AOF file, if the following option is enabled</span><br><span class="hljs-comment"># the file will be fsync-ed every 32 MB of data generated. This is useful</span><br><span class="hljs-comment"># in order to commit the file to the disk more incrementally and avoid</span><br><span class="hljs-comment"># big latency spikes.</span><br><span class="hljs-comment"># 当重写 AOF 文件时，如果启用了以下选项，则每生成 32MB的 数据，文件就会进行同步处理。为了将文件更多地提交到磁盘并避免大的延迟尖峰，这很有用。</span><br>aof-rewrite-incremental-fsync yes<br><br><span class="hljs-comment"># When redis saves RDB file, if the following option is enabled</span><br><span class="hljs-comment"># the file will be fsync-ed every 32 MB of data generated. This is useful</span><br><span class="hljs-comment"># in order to commit the file to the disk more incrementally and avoid</span><br><span class="hljs-comment"># big latency spikes.</span><br><span class="hljs-comment"># 当 redis 保存 RDB 文件时，如果启用以下选项，则每生成 32MB 数据将对文件进行 fsync 处理。 为了将文件更多地提交到磁盘并避免大的延迟尖峰，这很有用。</span><br>rdb-save-incremental-fsync yes<br><br><span class="hljs-comment"># Redis LFU eviction (see maxmemory setting) can be tuned. However it is a good</span><br><span class="hljs-comment"># idea to start with the default settings and only change them after investigating</span><br><span class="hljs-comment"># how to improve the performances and how the keys LFU change over time, which</span><br><span class="hljs-comment"># is possible to inspect via the OBJECT FREQ command.</span><br><span class="hljs-comment"># 可以调整 Redis LFU 逐出（请参阅maxmemory设置）。 但是，最好从默认设置开始，仅在研究了如何提高性能以及LFU 键随时间的变化后才进行更改，可以通过 OBJECT FREQ 命令进行检查。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># There are two tunable parameters in the Redis LFU implementation: the</span><br><span class="hljs-comment"># counter logarithm factor and the counter decay time. It is important to</span><br><span class="hljs-comment"># understand what the two parameters mean before changing them.</span><br><span class="hljs-comment"># Redis LFU 实现中有两个可调参数：计数器对数因子和计数器衰减时间。 在更改这两个参数之前，请务必先了解这两个参数的含义。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The LFU counter is just 8 bits per key, it&#x27;s maximum value is 255, so Redis</span><br><span class="hljs-comment"># uses a probabilistic increment with logarithmic behavior. Given the value</span><br><span class="hljs-comment"># of the old counter, when a key is accessed, the counter is incremented in</span><br><span class="hljs-comment"># this way:</span><br><span class="hljs-comment"># LFU 计数器每个 key 只有 8 位，最大值是 255，因此 Redis 使用具有对数行为的概率增量。 给定旧计数器的值，当访问一个键时，计数器以这种方式递增：</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 1. A random number R between 0 and 1 is extracted.</span><br><span class="hljs-comment"># 2. A probability P is calculated as 1/(old_value*lfu_log_factor+1).</span><br><span class="hljs-comment"># 3. The counter is incremented only if R &lt; P.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The default lfu-log-factor is 10. This is a table of how the frequency</span><br><span class="hljs-comment"># counter changes with a different number of accesses with different</span><br><span class="hljs-comment"># logarithmic factors:</span><br><span class="hljs-comment"># 默认的 lfu-log-factor 是 10。这是一个表格，该表格显示了频率计数器如何随着具有不同对数因子的不同访问次数而变化：</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># +--------+------------+------------+------------+------------+------------+</span><br><span class="hljs-comment"># | factor | 100 hits   | 1000 hits  | 100K hits  | 1M hits    | 10M hits   |</span><br><span class="hljs-comment"># +--------+------------+------------+------------+------------+------------+</span><br><span class="hljs-comment"># | 0      | 104        | 255        | 255        | 255        | 255        |</span><br><span class="hljs-comment"># +--------+------------+------------+------------+------------+------------+</span><br><span class="hljs-comment"># | 1      | 18         | 49         | 255        | 255        | 255        |</span><br><span class="hljs-comment"># +--------+------------+------------+------------+------------+------------+</span><br><span class="hljs-comment"># | 10     | 10         | 18         | 142        | 255        | 255        |</span><br><span class="hljs-comment"># +--------+------------+------------+------------+------------+------------+</span><br><span class="hljs-comment"># | 100    | 8          | 11         | 49         | 143        | 255        |</span><br><span class="hljs-comment"># +--------+------------+------------+------------+------------+------------+</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># <span class="hljs-doctag">NOTE:</span> The above table was obtained by running the following commands:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   redis-benchmark -n 1000000 incr foo</span><br><span class="hljs-comment">#   redis-cli object freq foo</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># NOTE 2: The counter initial value is 5 in order to give new objects a chance</span><br><span class="hljs-comment"># to accumulate hits.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The counter decay time is the time, in minutes, that must elapse in order</span><br><span class="hljs-comment"># for the key counter to be divided by two (or decremented if it has a value</span><br><span class="hljs-comment"># less &lt;= 10).</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The default value for the lfu-decay-time is 1. A Special value of 0 means to</span><br><span class="hljs-comment"># decay the counter every time it happens to be scanned.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># lfu-log-factor 10</span><br><span class="hljs-comment"># lfu-decay-time 1</span><br><br><span class="hljs-comment">########################### ACTIVE DEFRAGMENTATION 主动碎片整理 #######################</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># WARNING THIS FEATURE IS EXPERIMENTAL. However it was stress tested</span><br><span class="hljs-comment"># even in production and manually tested by multiple engineers for some</span><br><span class="hljs-comment"># time.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># What is active defragmentation?</span><br><span class="hljs-comment"># -------------------------------</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Active (online) defragmentation allows a Redis server to compact the</span><br><span class="hljs-comment"># spaces left between small allocations and deallocations of data in memory,</span><br><span class="hljs-comment"># thus allowing to reclaim back memory.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Fragmentation is a natural process that happens with every allocator (but</span><br><span class="hljs-comment"># less so with Jemalloc, fortunately) and certain workloads. Normally a server</span><br><span class="hljs-comment"># restart is needed in order to lower the fragmentation, or at least to flush</span><br><span class="hljs-comment"># away all the data and create it again. However thanks to this feature</span><br><span class="hljs-comment"># implemented by Oran Agra for Redis 4.0 this process can happen at runtime</span><br><span class="hljs-comment"># in an &quot;hot&quot; way, while the server is running.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Basically when the fragmentation is over a certain level (see the</span><br><span class="hljs-comment"># configuration options below) Redis will start to create new copies of the</span><br><span class="hljs-comment"># values in contiguous memory regions by exploiting certain specific Jemalloc</span><br><span class="hljs-comment"># features (in order to understand if an allocation is causing fragmentation</span><br><span class="hljs-comment"># and to allocate it in a better place), and at the same time, will release the</span><br><span class="hljs-comment"># old copies of the data. This process, repeated incrementally for all the keys</span><br><span class="hljs-comment"># will cause the fragmentation to drop back to normal values.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Important things to understand:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 1. This feature is disabled by default, and only works if you compiled Redis</span><br><span class="hljs-comment">#    to use the copy of Jemalloc we ship with the source code of Redis.</span><br><span class="hljs-comment">#    This is the default with Linux builds.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 2. You never need to enable this feature if you don&#x27;t have fragmentation</span><br><span class="hljs-comment">#    issues.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 3. Once you experience fragmentation, you can enable this feature when</span><br><span class="hljs-comment">#    needed with the command &quot;CONFIG SET activedefrag yes&quot;.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The configuration parameters are able to fine tune the behavior of the</span><br><span class="hljs-comment"># defragmentation process. If you are not sure about what they mean it is</span><br><span class="hljs-comment"># a good idea to leave the defaults untouched.</span><br><br><span class="hljs-comment"># Enabled active defragmentation启用主动碎片整理</span><br><span class="hljs-comment"># activedefrag yes</span><br><br><span class="hljs-comment"># Minimum amount of fragmentation waste to start active defrag</span><br><span class="hljs-comment"># 启动主动碎片整理所需的碎片碎片最少</span><br><span class="hljs-comment"># active-defrag-ignore-bytes 100mb</span><br><br><span class="hljs-comment"># Minimum percentage of fragmentation to start active defrag</span><br><span class="hljs-comment"># 启动主动碎片整理的最小碎片百分比</span><br><span class="hljs-comment"># active-defrag-threshold-lower 10</span><br><br><span class="hljs-comment"># Maximum percentage of fragmentation at which we use maximum effort</span><br><span class="hljs-comment"># 我们在最大程度地使用碎片的最大百分比</span><br><span class="hljs-comment"># active-defrag-threshold-upper 100</span><br><br><span class="hljs-comment"># Minimal effort for defrag in CPU percentage减少CPU碎片整理的工作量</span><br><span class="hljs-comment"># active-defrag-cycle-min 5</span><br><br><span class="hljs-comment"># Maximal effort for defrag in CPU percentage尽最大努力整理CPU百分比</span><br><span class="hljs-comment"># active-defrag-cycle-max 75</span><br><br><span class="hljs-comment"># Maximum number of set/hash/zset/list fields that will be processed from</span><br><span class="hljs-comment"># the main dictionary scan</span><br><span class="hljs-comment"># 主字典扫描将处理的set / hash / zset / list字段的最大数量</span><br><span class="hljs-comment"># active-defrag-max-scan-fields 1000</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题——整数反转</title>
    <link href="/2020/05/09/LeetCode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E2%80%94%E2%80%94%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/"/>
    <url>/2020/05/09/LeetCode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E2%80%94%E2%80%94%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>注意空字符串可被认为是有效字符串。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#1</span><br>输入: <span class="hljs-string">&quot;()&quot;</span><br>输出: <span class="hljs-literal">true</span><br><br><span class="hljs-comment">#2</span><br>输入: <span class="hljs-string">&quot;()[]&#123;&#125;&quot;</span><br>输出: <span class="hljs-literal">true</span><br><br><span class="hljs-comment">#3</span><br>输入: <span class="hljs-string">&quot;(]&quot;</span><br>输出: <span class="hljs-literal">false</span><br><br><span class="hljs-comment">#4</span><br>输入: <span class="hljs-string">&quot;([)]&quot;</span><br>输出: <span class="hljs-literal">false</span><br><br><span class="hljs-comment">#5</span><br>输入: <span class="hljs-string">&quot;&#123;[]&#125;&quot;</span><br>输出: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>初始化栈 S。</li><li>一次处理表达式的每个括号。</li><li>如果遇到开括号，我们只需将其推到栈上即可。这意味着我们将稍后处理它，让我们简单地转到前面的 子表达式。</li><li>如果我们遇到一个闭括号，那么我们检查栈顶的元素。如果栈顶的元素是一个 相同类型的 左括号，那么我们将它从栈中弹出并继续处理。否则，这意味着表达式无效。</li><li>如果到最后我们剩下的栈中仍然有元素，那么这意味着表达式无效。</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> String $s</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> Boolean</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment"># 方法一</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isValid</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>    <span class="hljs-variable">$map</span> = [<br>        <span class="hljs-string">&quot;)&quot;</span> =&gt; <span class="hljs-string">&quot;(&quot;</span>,<br>        <span class="hljs-string">&quot;&#125;&quot;</span> =&gt; <span class="hljs-string">&quot;&#123;&quot;</span>,<br>        <span class="hljs-string">&quot;]&quot;</span> =&gt; <span class="hljs-string">&quot;[&quot;</span>,<br>    ];<br><br>    <span class="hljs-variable">$len</span> = strlen(<span class="hljs-variable">$s</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$len</span> == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <br>    <span class="hljs-comment">// 奇数个字符，必然不符合</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$len</span> % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-variable">$stack</span> = [];<br>    <span class="hljs-comment">//s中出现map的key则弹出，没有出现则入栈</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$len</span>; <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$map</span>[<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]])) &#123;<br>            <span class="hljs-keyword">if</span>(end(<span class="hljs-variable">$stack</span>) == <span class="hljs-variable">$map</span>[<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]]) &#123;<br>                array_pop(<span class="hljs-variable">$stack</span>);<span class="hljs-comment">// 这里使用 array_unshift 和 array_shift 性能要比 array_push 和 array_pop 要低</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            array_push(<span class="hljs-variable">$stack</span>, <span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (count(<span class="hljs-variable">$stack</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment"># 方法二</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isValid</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>    <span class="hljs-variable">$map</span> = [<br>        <span class="hljs-string">&quot;)&quot;</span> =&gt; <span class="hljs-string">&quot;(&quot;</span>,<br>        <span class="hljs-string">&quot;&#125;&quot;</span> =&gt; <span class="hljs-string">&quot;&#123;&quot;</span>,<br>        <span class="hljs-string">&quot;]&quot;</span> =&gt; <span class="hljs-string">&quot;[&quot;</span>,<br>    ];<br><br>    <span class="hljs-variable">$len</span> = strlen(<span class="hljs-variable">$s</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$len</span> == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-comment">// 奇数个字符，必然不符合</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$len</span> % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-variable">$stack</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplStack</span>();<span class="hljs-comment">// SplStack：通过使用一个双向链表来提供栈的主要功能</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> =<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$len</span>; <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$map</span>[<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]])) &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$stack</span>-&gt;isEmpty()  &amp;&amp; <span class="hljs-variable">$stack</span>-&gt;top() == <span class="hljs-variable">$map</span>[<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]]) &#123;<br>                <span class="hljs-variable">$stack</span>-&gt;pop();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$stack</span>-&gt;push(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (count(<span class="hljs-variable">$stack</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isValid</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br>    <span class="hljs-keyword">if</span> s == <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-keyword">var</span> stack []<span class="hljs-keyword">uint8</span><br><br>m := <span class="hljs-keyword">map</span>[<span class="hljs-keyword">uint8</span>]<span class="hljs-keyword">uint8</span>&#123;<br><span class="hljs-string">&#x27;&#125;&#x27;</span>: <span class="hljs-string">&#x27;&#123;&#x27;</span>,<br><span class="hljs-string">&#x27;)&#x27;</span>: <span class="hljs-string">&#x27;(&#x27;</span>,<br><span class="hljs-string">&#x27;]&#x27;</span>: <span class="hljs-string">&#x27;[&#x27;</span>,<br>&#125;<br><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(s); i++ &#123;<br><span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27;&#123;&#x27;</span> || s[i] == <span class="hljs-string">&#x27;[&#x27;</span> || s[i] == <span class="hljs-string">&#x27;(&#x27;</span> &#123;<br>stack = <span class="hljs-built_in">append</span>(stack, s[i])<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(stack) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-keyword">if</span> m[s[i]] != stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>] &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br>stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(stack) == <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题——最长公共前缀</title>
    <link href="/2020/05/08/LeetCode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E2%80%94%E2%80%94%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/"/>
    <url>/2020/05/08/LeetCode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E2%80%94%E2%80%94%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</url>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入: [<span class="hljs-string">&quot;flower&quot;</span>,<span class="hljs-string">&quot;flow&quot;</span>,<span class="hljs-string">&quot;flight&quot;</span>]<br>输出: <span class="hljs-string">&quot;fl&quot;</span><br><br>输入: [<span class="hljs-string">&quot;dog&quot;</span>,<span class="hljs-string">&quot;racecar&quot;</span>,<span class="hljs-string">&quot;car&quot;</span>]<br>输出: <span class="hljs-string">&quot;&quot;</span><br>解释: 输入不存在公共前缀。<br></code></pre></td></tr></table></figure><p><strong>说明:</strong></p><p>所有输入只包含小写字母 <code>a-z</code> 。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>因为要找最长 “公共” 前缀，那么意味着我们可以<strong>任一一个元素找到</strong></li><li>通过任一元素建立 “基准” 元素，不断更新比较，即可正确求解</li><li>最后处理下边界条件即可</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> String[] $strs</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span> String</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">longestCommonPrefix</span>(<span class="hljs-params"><span class="hljs-variable">$strs</span></span>) </span>&#123;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$strs</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$ke</span>=&gt;<span class="hljs-variable">$value</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$value</span> == <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (count(<span class="hljs-variable">$strs</span>)==<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$strs</span>[<span class="hljs-number">0</span>];<br>    &#125;        <br>    <span class="hljs-variable">$len</span> = strlen(<span class="hljs-variable">$strs</span>[<span class="hljs-number">0</span>]);<br>    <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-variable">$i</span>&lt;=<span class="hljs-variable">$len</span>) &#123;<br>        <span class="hljs-variable">$str</span> =  substr(<span class="hljs-variable">$strs</span>[<span class="hljs-number">0</span>],<span class="hljs-variable">$i</span>,<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span> = <span class="hljs-number">1</span>; <span class="hljs-variable">$j</span> &lt; count(<span class="hljs-variable">$strs</span>); <span class="hljs-variable">$j</span>++) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$str</span> != substr(<span class="hljs-variable">$strs</span>[<span class="hljs-variable">$j</span>],<span class="hljs-variable">$i</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">or</span> <span class="hljs-variable">$i</span>==<span class="hljs-variable">$len</span>) &#123;                    <br>                <span class="hljs-keyword">return</span> substr(<span class="hljs-variable">$strs</span>[<span class="hljs-number">0</span>],<span class="hljs-number">0</span>,<span class="hljs-variable">$i</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-variable">$i</span>++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">longestCommonPrefix</span><span class="hljs-params">(strs []<span class="hljs-keyword">string</span>)</span> <span class="hljs-title">string</span></span> &#123;<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(strs) &lt; <span class="hljs-number">1</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>    &#125;<br>    prefix := strs[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> _,str := <span class="hljs-keyword">range</span> strs &#123;<br>        <span class="hljs-keyword">for</span> strings.Index(str,prefix) != <span class="hljs-number">0</span> &#123;<span class="hljs-comment">// ?作用</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(prefix) == <span class="hljs-number">0</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>            &#125;<br>            prefix = prefix[:<span class="hljs-built_in">len</span>(prefix) - <span class="hljs-number">1</span>]<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> prefix<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题——罗马数字转整数</title>
    <link href="/2020/05/07/LeetCode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E2%80%94%E2%80%94%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/"/>
    <url>/2020/05/07/LeetCode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E2%80%94%E2%80%94%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>罗马数字包含以下七种字符: <code>I</code>，<code>V</code>，<code>X</code>，<code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">字符          数值<br><span class="hljs-built_in">I</span>             <span class="hljs-number">1</span><br><span class="hljs-variable">V</span>             <span class="hljs-number">5</span><br><span class="hljs-variable">X</span>             <span class="hljs-number">10</span><br><span class="hljs-variable">L</span>             <span class="hljs-number">50</span><br><span class="hljs-built_in">C</span>             <span class="hljs-number">100</span><br><span class="hljs-built_in">D</span>             <span class="hljs-number">500</span><br><span class="hljs-variable">M</span>             <span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><p>例如， 罗马数字 2 写做 <code>II</code> ，即为两个并列的 1。12 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 27 写做  <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p><ul><li>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</li><li>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 </li><li>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</li></ul><p>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: &quot;III&quot;</span><br><span class="hljs-section">输出: 3</span><br><br><span class="hljs-section">输入: &quot;IV&quot;</span><br><span class="hljs-section">输出: 4</span><br><br><span class="hljs-section">输入: &quot;IX&quot;</span><br><span class="hljs-section">输出: 9</span><br><br><span class="hljs-section">输入: &quot;LVIII&quot;</span><br><span class="hljs-section">输出: 58</span><br><span class="hljs-section">解释: L = 50, V= 5, III = 3.</span><br><br><span class="hljs-section">输入: &quot;MCMXCIV&quot;</span><br><span class="hljs-section">输出: 1994</span><br><span class="hljs-section">解释: M = 1000, CM = 900, XC = 90, IV = 4.</span><br></code></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>按照题目的描述，可以总结如下规则：</p><ul><li>罗马数字由 <code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code>, <code>M</code> 构成；</li><li>当小值在大值的左边，则减小值，如 <code>IV=5-1=4</code>；</li><li>当小值在大值的右边，则加小值，如 <code>VI=5+1=6</code>；</li><li>由上可知，右值永远为正，因此最后一位必然为正。</li></ul><p>一言蔽之，<strong>把一个小值放在大值的左边，就是做减法，否则为加法</strong>。</p><table><thead><tr><th align="center">X</th><th align="center">X</th><th align="center">V</th><th align="center">I</th><th align="center">I</th><th align="center">27</th></tr></thead><tbody><tr><td align="center">10</td><td align="center">10</td><td align="center">5</td><td align="center">1</td><td align="center">1</td><td align="center">27</td></tr></tbody></table><table><thead><tr><th align="center">X</th><th align="center">X</th><th align="center">I</th><th align="center">V</th><th align="center">I</th><th align="center">25</th></tr></thead><tbody><tr><td align="center">10</td><td align="center">10</td><td align="center">-1</td><td align="center">5</td><td align="center">1</td><td align="center">25</td></tr></tbody></table><p>在代码实现上，可以往后看多一位，对比当前位与后一位的大小关系，从而确定当前位是加还是减法。当没有下一位时，做加法即可。</p><p>也可保留当前位的值，当遍历到下一位的时，对比保留值与遍历位的大小关系，再确定保留值为加还是减。最后一位做加法即可。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> String $s</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> Integer</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">romanToInt</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>    <span class="hljs-variable">$arr</span> = [<br>        <span class="hljs-string">&#x27;I&#x27;</span> =&gt; <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&#x27;V&#x27;</span> =&gt; <span class="hljs-number">5</span>,<br>        <span class="hljs-string">&#x27;X&#x27;</span> =&gt; <span class="hljs-number">10</span>,<br>        <span class="hljs-string">&#x27;L&#x27;</span> =&gt; <span class="hljs-number">50</span>,<br>        <span class="hljs-string">&#x27;C&#x27;</span> =&gt; <span class="hljs-number">100</span>,<br>        <span class="hljs-string">&#x27;D&#x27;</span> =&gt; <span class="hljs-number">500</span>,<br>        <span class="hljs-string">&#x27;M&#x27;</span> =&gt; <span class="hljs-number">1000</span><br>    ];<br>    <span class="hljs-variable">$res</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; strlen(<span class="hljs-variable">$s</span>); <span class="hljs-variable">$i</span>++)&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>]]) || <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]] &gt;= <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>]])&#123;<br>            <span class="hljs-variable">$res</span> += <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]];<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$res</span> +=<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>]] - <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]];<br>            <span class="hljs-variable">$i</span> = <span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$res</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">romanToInt</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>    <span class="hljs-comment">// 字符数字映射表</span><br>    romaNums := <span class="hljs-keyword">map</span>[<span class="hljs-keyword">byte</span>]<span class="hljs-keyword">int</span>&#123;<br>        <span class="hljs-string">&#x27;I&#x27;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&#x27;V&#x27;</span>: <span class="hljs-number">5</span>,<br>        <span class="hljs-string">&#x27;X&#x27;</span>: <span class="hljs-number">10</span>,<br>        <span class="hljs-string">&#x27;L&#x27;</span>: <span class="hljs-number">50</span>,<br>        <span class="hljs-string">&#x27;C&#x27;</span>: <span class="hljs-number">100</span>,<br>        <span class="hljs-string">&#x27;D&#x27;</span>: <span class="hljs-number">500</span>,<br>        <span class="hljs-string">&#x27;M&#x27;</span>: <span class="hljs-number">1000</span>,<br>    &#125;<br><br>    <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span><br><br>    <span class="hljs-comment">// 遍历字符串</span><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt;= <span class="hljs-built_in">len</span>(s) - <span class="hljs-number">1</span>; i++ &#123;<br>        <span class="hljs-comment">// 获取当前字符</span><br>        currChar := s[i]<br><br>        <span class="hljs-comment">// 获取当前字符对应的数字</span><br>        num := romaNums[currChar]<br><br>        <span class="hljs-comment">// 获取下一个字符</span><br>        <span class="hljs-keyword">var</span> nextChar <span class="hljs-keyword">byte</span><br>        <span class="hljs-keyword">if</span> i + <span class="hljs-number">1</span> &lt;= <span class="hljs-built_in">len</span>(s) - <span class="hljs-number">1</span> &#123;<br>            nextChar = s[i + <span class="hljs-number">1</span>]<br>        &#125; <br><br>        <span class="hljs-keyword">if</span> romaNums[nextChar] &gt; num &#123;<br>            num = romaNums[nextChar] - num<br>            i++<br>        &#125;<br>        <br>        sum += num        <br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> sum<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题——回文数</title>
    <link href="/2020/05/07/LeetCode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E2%80%94%E2%80%94%E5%9B%9E%E6%96%87%E6%95%B0/"/>
    <url>/2020/05/07/LeetCode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E2%80%94%E2%80%94%E5%9B%9E%E6%96%87%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#1</span><br>输入: 121<br>输出: <span class="hljs-literal">true</span><br><span class="hljs-comment">#2</span><br>输入: -121<br>输出: <span class="hljs-literal">false</span><br>解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。<br><span class="hljs-comment">#3</span><br>输入: 10<br>输出: <span class="hljs-literal">false</span><br>解释: 从右向左读, 为 01 。因此它不是一个回文数。<br></code></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>最好理解的一种解法就是先将 <strong>整数转为字符串</strong> ，然后将字符串分割为数组，只需要循环数组的一半长度进行判断对应元素是否相等即可。    </li><li>类似前面的整数反转，将反转之后的数字与之前的作比较。</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> Integer $x</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> Boolean</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment"># 方法一</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isPalindrome</span>(<span class="hljs-params"><span class="hljs-variable">$x</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> strrev(<span class="hljs-variable">$x</span>) == <span class="hljs-variable">$x</span>;<span class="hljs-comment">// 字符串反转</span><br>&#125;<br><span class="hljs-comment"># 方法二</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isPalindrome</span>(<span class="hljs-params"><span class="hljs-variable">$x</span></span>) </span>&#123;<br>    <span class="hljs-variable">$n</span> = <span class="hljs-variable">$x</span>;       <br>    <span class="hljs-variable">$reverse</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-variable">$n</span> &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-variable">$reverse</span> = <span class="hljs-variable">$reverse</span> * <span class="hljs-number">10</span>;<br>        <span class="hljs-variable">$reverse</span> = <span class="hljs-variable">$reverse</span> + <span class="hljs-variable">$n</span> % <span class="hljs-number">10</span>;<span class="hljs-comment">// 整数反转</span><br>        <span class="hljs-variable">$n</span> = (<span class="hljs-keyword">int</span>)(<span class="hljs-variable">$n</span>/<span class="hljs-number">10</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$x</span> === <span class="hljs-variable">$reverse</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 方法一：整数转为字符串后前后比较</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(x <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br>    <span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br><br>    <span class="hljs-keyword">var</span> str = strconv.Itoa(x)<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> str&#123;<br>        <span class="hljs-keyword">if</span> str[<span class="hljs-built_in">len</span>(str)<span class="hljs-number">-1</span>-i] != str[i] &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-comment">// 方法二：整数反转与原始数字比较</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(x <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br>    <span class="hljs-comment">// 负数肯定不是回文</span><br>    <span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>    <span class="hljs-comment">// 记录下原始数字</span><br>    originX := x  <br>    <span class="hljs-comment">// 反转数字</span><br>    rev := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> x != <span class="hljs-number">0</span> &#123;<br>        pop := x % <span class="hljs-number">10</span><br>        x /= <span class="hljs-number">10</span><br>        rev = rev * <span class="hljs-number">10</span> + pop<br>    &#125;   <br>    <span class="hljs-comment">// 原始数字和反转数字对比</span><br>    <span class="hljs-keyword">return</span> originX == rev<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题——整数反转</title>
    <link href="/2020/05/07/LeetCode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E2%80%94%E2%80%94%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/"/>
    <url>/2020/05/07/LeetCode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E2%80%94%E2%80%94%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#1:</span><br>输入: 123<br>输出: 321<br><br><span class="hljs-comment">#2:</span><br>输入: -123<br>输出: -321<br><br><span class="hljs-comment">#3</span><br>输入: 120<br>输出: 21<br></code></pre></td></tr></table></figure><p><strong>注意</strong>:</p><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>本题如果不考虑溢出问题，是非常简单的。解决溢出问题有两个思路，第一个思路是通过字符串转换加 <code>try catch</code> 的方式来解决，第二个思路就是通过数学计算来解决。</li><li>由于字符串转换的效率较低且使用较多库函数，所以解题方案不考虑该方法，而是通过数学计算来解决。</li><li>通过循环将数字 <code>x</code> 的每一位拆开，在计算新值时每一步都判断是否溢出。</li><li>溢出条件有两个，一个是大于整数最大值 <code>MAX_VALUE</code>，另一个是小于整数最小值 <code>MIN_VALUE</code>，设当前计算结果为  <code>ans</code>，下一位为  <code>pop</code>。</li><li>从 <code>ans * 10 + pop &gt; MAX_VALUE</code> 这个溢出条件来看<ul><li>当出现 <code>ans &gt; MAX_VALUE / 10</code> 且 还有 <code>pop</code> 需要添加 时，则一定溢出</li><li>当出现 <code>ans == MAX_VALUE / 10</code> 且 <code>pop &gt; 7</code> 时，则一定溢出，<code>7</code> 是 <code>2^31 - 1</code> 的个位数</li></ul></li><li>从 <code>ans * 10 + pop &lt; MIN_VALUE</code> 这个溢出条件来看<ul><li>当出现 <code>ans &lt; MIN_VALUE / 10</code> 且 还有 <code>pop</code> 需要添加时，则一定溢出</li><li>当出现 <code>ans == MIN_VALUE / 10</code> 且 <code>pop &lt; -8</code> 时，则一定溢出，<code>8</code> 是 <code>-2^31</code> 的个位数</li></ul></li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法一</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> Integer $x</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> Integer</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reverse</span>(<span class="hljs-params"><span class="hljs-variable">$x</span></span>) </span>&#123;<br>    <span class="hljs-variable">$y</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$x</span> &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-variable">$y</span> = -abs(strrev(<span class="hljs-variable">$x</span>)); <span class="hljs-comment">// abs() 取绝对值</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$y</span> = strrev(<span class="hljs-variable">$x</span>);<span class="hljs-comment">// strrev() 反转字符串</span><br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(pow(-<span class="hljs-number">2</span>,<span class="hljs-number">31</span>)&gt;<span class="hljs-variable">$y</span> || <span class="hljs-variable">$y</span>&gt;pow(<span class="hljs-number">2</span>,<span class="hljs-number">31</span>)-<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">// pow() 指数表达式</span><br>        <span class="hljs-variable">$y</span> = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$y</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法二</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> Integer $x</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> Integer</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reverse</span>(<span class="hljs-params"><span class="hljs-variable">$x</span></span>) </span>&#123;<br>    <span class="hljs-variable">$res</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-variable">$x</span> != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-variable">$pop</span> = <span class="hljs-variable">$x</span> % <span class="hljs-number">10</span>;<br>        <span class="hljs-variable">$x</span> = (<span class="hljs-variable">$x</span> - <span class="hljs-variable">$pop</span>) / <span class="hljs-number">10</span>;<br>        <span class="hljs-variable">$res</span> = <span class="hljs-variable">$res</span> * <span class="hljs-number">10</span> + <span class="hljs-variable">$pop</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(pow(-<span class="hljs-number">2</span>,<span class="hljs-number">31</span>)&gt;<span class="hljs-variable">$res</span> || <span class="hljs-variable">$res</span>&gt;pow(<span class="hljs-number">2</span>,<span class="hljs-number">31</span>)-<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-variable">$res</span> = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$res</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 方法一</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverse</span><span class="hljs-params">(x <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>   ret := <span class="hljs-number">0</span><br>   <span class="hljs-keyword">for</span> x != <span class="hljs-number">0</span> &#123;<br>      pop := x % <span class="hljs-number">10</span><br>      x /= <span class="hljs-number">10</span><br>      ret = ret*<span class="hljs-number">10</span> + pop<span class="hljs-comment">// 实现 x 反转</span><br>      <span class="hljs-keyword">if</span> ret &lt; math.MinInt32 || ret &gt; math.MaxInt32 &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> ret<br>&#125;<br><br><span class="hljs-comment">// 方法二</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverse</span><span class="hljs-params">(x <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>     y := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> x!=<span class="hljs-number">0</span> &#123;<br>        y = y*<span class="hljs-number">10</span> + x%<span class="hljs-number">10</span><br>        <span class="hljs-keyword">if</span> !( -(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">31</span>) &lt;= y &amp;&amp; y &lt;= (<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">31</span>)<span class="hljs-number">-1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        &#125;<br>        x /= <span class="hljs-number">10</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> y<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题——两数之和</title>
    <link href="/2020/05/07/LeetCode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E2%80%94%E2%80%94%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <url>/2020/05/07/LeetCode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E2%80%94%E2%80%94%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">给定 nums = [2, 7, 11, 15], target = 9<br><br>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]<br></code></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>暴力枚举，利用两层 <code>for</code> 循环来遍历每个元素，并查找满足条件的目标元素。时间复杂度为 <code>O(N^2)</code>，空间复杂度为 <code>O(1)</code></li><li>通过添加一个 <strong>Map</strong> 记录遍历过的数字及其对应的索引，这样当遍历一个新数字的时候去 <strong>Map</strong> 里查询，<code>target</code> 与该数的差值是否已经在前面的数字中出现过。如果出现过，那么已经得出答案，就不必再往下执行了。时间复杂度 <code>O(n)</code>，空间复杂度 <code>O(n)</code>。</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h3 id="PHP："><a href="#PHP：" class="headerlink" title="PHP："></a>PHP：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法一：暴力枚举，两次循环</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> Integer[] $nums</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> Integer $target</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> Integer[]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">twoSum</span>(<span class="hljs-params"><span class="hljs-variable">$nums</span>, <span class="hljs-variable">$target</span></span>) </span>&#123;<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$nums</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>        <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$nums</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span> =&gt; <span class="hljs-variable">$v</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$v</span> == <span class="hljs-variable">$value</span>)<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$target</span> == <span class="hljs-variable">$v</span> + <span class="hljs-variable">$value</span>) &#123;<br>                <span class="hljs-keyword">return</span> [<span class="hljs-variable">$key</span>, <span class="hljs-variable">$k</span>];<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法二：通过中间 Map 记录遍历过的数字及其对应的索引</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> Integer[] $nums</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> Integer $target</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> Integer[]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">twoSum</span>(<span class="hljs-params"><span class="hljs-variable">$nums</span>, <span class="hljs-variable">$target</span></span>) </span>&#123;<br><span class="hljs-variable">$map</span> = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; count(<span class="hljs-variable">$nums</span>); <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-variable">$sub</span> = <span class="hljs-variable">$target</span> - <span class="hljs-variable">$nums</span>[<span class="hljs-variable">$i</span>];<br>        <span class="hljs-keyword">if</span> (in_array(<span class="hljs-variable">$sub</span>, <span class="hljs-variable">$map</span>)) &#123;<br>            <span class="hljs-variable">$key</span> = array_keys(<span class="hljs-variable">$map</span>, <span class="hljs-variable">$sub</span>);<br>            <span class="hljs-keyword">return</span> [<span class="hljs-variable">$key</span>[<span class="hljs-number">0</span>], <span class="hljs-variable">$i</span>];<br>        &#125;<br>        <span class="hljs-variable">$map</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$nums</span>[<span class="hljs-variable">$i</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Golang："><a href="#Golang：" class="headerlink" title="Golang："></a>Golang：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 方法一：暴力枚举，两次循环</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">twoSum</span><span class="hljs-params">(nums []<span class="hljs-keyword">int</span>, target <span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(nums); i++ &#123;<br><span class="hljs-keyword">for</span> j := i+<span class="hljs-number">1</span>; j &lt; <span class="hljs-built_in">len</span>(nums); j++ &#123;<br><span class="hljs-keyword">if</span> nums[i]+nums[j] == target &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-keyword">int</span>&#123;i, j&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// 方法二：通过中间 Map 记录遍历过的数字及其对应的索引</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">twoSum</span><span class="hljs-params">(nums []<span class="hljs-keyword">int</span>, target <span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br>    m := <span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]<span class="hljs-keyword">int</span>&#123;&#125;<br><span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> nums &#123;<br><span class="hljs-keyword">if</span> k, ok := m[target-v]; ok &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-keyword">int</span>&#123;k, i&#125;<br>&#125;<br>m[v] = i<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis入门</title>
    <link href="/2020/04/16/redis/Redis%E5%85%A5%E9%97%A8/"/>
    <url>/2020/04/16/redis/Redis%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h1><p><code>Redis</code> 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 <strong>字符串（strings）</strong>， <strong>散列（hashes）</strong>， <strong>列表（lists）</strong>， <strong>集合（sets）</strong>， <strong>有序集合（sorted sets）</strong> 与范围查询， <strong>bitmaps</strong>， <strong>hyperloglogs</strong> 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 <strong>复制（replication）</strong>，<strong>LUA脚本（Lua scripting）</strong>， <strong>LRU驱动事件（LRU eviction）</strong>，<strong>事务（transactions）</strong> 和不同级别的 <strong>磁盘持久化（persistence）</strong>， 并通过 <strong>Redis哨兵（Sentinel）</strong>*和<strong>自动 分区</strong>（Cluster）提供高可用性（high availability）。</p><p><code>Redis</code> 与其他 key - value 缓存产品有以下三个特点：</p><ul><li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>Redis支持数据的备份，即master-slave模式的数据备份。</li></ul><h1 id="Redis-数据类型"><a href="#Redis-数据类型" class="headerlink" title="Redis 数据类型"></a>Redis 数据类型</h1><p><code>Redis</code> 支持五种数据类型：<strong>string（字符串）</strong>，<strong>hash（哈希）</strong>，<strong>list（列表）</strong>，<strong>set（集合）</strong>及zset(sorted set：<strong>有序集合</strong>)。</p><h2 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h2><p>string 是 <code>Redis</code> 最基本的类型，你可以理解成与 <code>Memcached</code> 一模一样的类型，一个 key 对应一个 value。</p><p>string 类型是二进制安全的。意思是 <code>Redis</code> 的 string 可以包含任何数据。比如jpg图片或者序列化的对象。</p><p>string 类型是 <code>Redis</code> 最基本的数据类型，string 类型的值最大能存储 <strong>512MB</strong>。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> ruoob <span class="hljs-string">&quot;Hello&quot;</span><br>OK<br>127.0.0.1:6379&gt; get ruoob<br><span class="hljs-string">&quot;Hello&quot;</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong>：一个键最大能存储 512MB。</p><h2 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h2><p><code>Redis</code> hash 是一个键值(key=&gt;value)对集合。</p><p><code>Redis</code> hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; hmset runoob field1 <span class="hljs-string">&quot;hello&quot;</span> field2 <span class="hljs-string">&quot;world&quot;</span><br>OK<br>127.0.0.1:6379&gt; HGET runoob field1<br><span class="hljs-string">&quot;Hello&quot;</span><br>127.0.0.1:6379&gt; HGET runoob field2<br><span class="hljs-string">&quot;World&quot;</span><br></code></pre></td></tr></table></figure><p>实例中我们使用了 <code>Redis</code> <code>HMSET</code>, <code>HGET</code> 命令，<code>HMSET</code> 设置了两个 <strong>field=&gt;value</strong> 对, <code>HGET</code> 获取对应 <strong>field</strong> 对应的 <strong>value</strong>。</p><p>每个 hash 可以存储 <code>2^32 - 1</code> 键值对（40多亿）。</p><h2 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h2><p><code>Redis</code> 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; del runoob                <span class="hljs-comment"># del key 删除一个 key</span><br>127.0.0.1:6379&gt; lpush runoob redis        <span class="hljs-comment"># lpush 往列表中插入一个值</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; lpush runoob mongodb<br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; lpush runoob rabitmq<br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6379&gt; lpush runoob git<br>(<span class="hljs-built_in">integer</span>) 4<br>127.0.0.1:6379&gt; lpush runoob svn<br>(<span class="hljs-built_in">integer</span>) 5<br>127.0.0.1:6379&gt; lrange runoob 0 10        <span class="hljs-comment"># lrange 获取列表 0-10 范围内的元素</span><br>1) <span class="hljs-string">&quot;svn&quot;</span><br>2) <span class="hljs-string">&quot;git&quot;</span><br>3) <span class="hljs-string">&quot;rabitmq&quot;</span><br>4) <span class="hljs-string">&quot;mongodb&quot;</span><br>5) <span class="hljs-string">&quot;redis&quot;</span><br>127.0.0.1:6379&gt;<br></code></pre></td></tr></table></figure><p>列表最多可存储 <code>2^32 - 1</code> 元素 (4294967295, 每个列表可存储40多亿)。</p><h2 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h2><p><code>Redis</code> 的 Set 是 string 类型的<strong>无序集合</strong>。</p><p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p><h3 id="sadd-命令"><a href="#sadd-命令" class="headerlink" title="sadd 命令"></a>sadd 命令</h3><p>添加一个 string 元素到 key 对应的 set 集合中，成功返回 1，如果元素已经在集合中返回 0。</p><h3 id="smembers-命令"><a href="#smembers-命令" class="headerlink" title="smembers 命令"></a>smembers 命令</h3><p>读取一个 key 对应的 set 集合。</p><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; del runoob<br>127.0.0.1:6379&gt; sadd runoob redis<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sadd runoob mongodb<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sadd runoob rabitmq<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sadd runoob rabitmq<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; smembers runoob<br>1) <span class="hljs-string">&quot;redis&quot;</span><br>2) <span class="hljs-string">&quot;rabitmq&quot;</span><br>3) <span class="hljs-string">&quot;mongodb&quot;</span><br></code></pre></td></tr></table></figure><p>注意：以上实例中 <code>rabitmq</code> 添加了两次，但根据集合内元素的唯一性，第二次插入的元素将被忽略。</p><p>集合中最大的成员数为 <code>2^32 - 1</code>(4294967295, 每个集合可存储40多亿个成员)。</p><h2 id="zset-sorted-set：有序集合"><a href="#zset-sorted-set：有序集合" class="headerlink" title="zset(sorted set：有序集合)"></a>zset(sorted set：有序集合)</h2><p><code>Redis</code> zset 和 set 一样也是string类型元素的集合,且<strong>不允许重复的成员</strong>。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p><p>zset的成员是唯一的,但分数(score)却可以重复。</p><h3 id="zadd-命令"><a href="#zadd-命令" class="headerlink" title="zadd 命令"></a>zadd 命令</h3><p>添加元素到集合，元素在集合中存在则更新对应score</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">zadd key score member <br></code></pre></td></tr></table></figure><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; del runoob<br>127.0.0.1:6379&gt; zadd runoob 0 redis<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; zadd runoob 0 mongodb<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; zadd runoob 0 rabitmq<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; zadd runoob 0 rabitmq<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; &gt; ZRANGEBYSCORE runoob 0 1000<br>1) <span class="hljs-string">&quot;mongodb&quot;</span><br>2) <span class="hljs-string">&quot;rabitmq&quot;</span><br>3) <span class="hljs-string">&quot;redis&quot;</span><br></code></pre></td></tr></table></figure><h1 id="Redis-命令"><a href="#Redis-命令" class="headerlink" title="Redis 命令"></a>Redis 命令</h1><h2 id="Redis-登陆命令"><a href="#Redis-登陆命令" class="headerlink" title="Redis 登陆命令"></a>Redis 登陆命令</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>Redis 客户端的基本语法为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ redis-cli<br></code></pre></td></tr></table></figure><h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ redis-cli<br>127.0.0.1:6379&gt;<br>127.0.0.1:6379&gt; PING<br>PONG<br></code></pre></td></tr></table></figure><p>在以上实例中我们连接到本地的 redis 服务并执行 <strong>PING</strong> 命令，该命令用于检测 redis 服务是否启动。</p><h2 id="在远程服务上执行命令"><a href="#在远程服务上执行命令" class="headerlink" title="在远程服务上执行命令"></a>在远程服务上执行命令</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ redis-cli -h host -p port -a password<br></code></pre></td></tr></table></figure><h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$redis</span>-cli -h 127.0.0.1 -p 6379 -a <span class="hljs-string">&quot;password&quot;</span><br>Warning: Using a password with <span class="hljs-string">&#x27;-a&#x27;</span> or <span class="hljs-string">&#x27;-u&#x27;</span> option on the <span class="hljs-built_in">command</span> line interface may not be safe.<br>127.0.0.1:6379&gt;<br>127.0.0.1:6379&gt; PING<br>PONG<br></code></pre></td></tr></table></figure><h2 id="Redis-键-key"><a href="#Redis-键-key" class="headerlink" title="Redis 键(key)"></a>Redis 键(key)</h2><p><code>Redis</code> 键命令用于管理 redis 的键。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p><code>Redis</code> 键命令的基本语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; COMMAND KEY_NAME<br></code></pre></td></tr></table></figure><h3 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; SET runoobkey redis<br>OK<br>127.0.0.1:6379&gt; DEL runoobkey<br>(<span class="hljs-built_in">integer</span>) 1<br></code></pre></td></tr></table></figure><p>在以上实例中 <code>DEL</code> 是一个命令， <code>runoobkey</code> 是一个键。 如果键被删除成功，命令执行后输出 <strong>(integer) 1</strong>，否则将输出 <strong>(integer) 0</strong></p><h2 id="Redis-keys-命令参考"><a href="#Redis-keys-命令参考" class="headerlink" title="Redis keys 命令参考"></a>Redis keys 命令参考</h2><p><a href="http://doc.redisfans.com/key/index.html">Redis 命令参考——Key（键）</a></p><h2 id="Redis-字符串-String"><a href="#Redis-字符串-String" class="headerlink" title="Redis 字符串(String)"></a>Redis 字符串(String)</h2><p><a href="http://doc.redisfans.com/string/index.html">Redis 命令参考——字符串(String)</a></p><h2 id="Redis-哈希-Hash"><a href="#Redis-哈希-Hash" class="headerlink" title="Redis 哈希(Hash)"></a>Redis 哈希(Hash)</h2><p><a href="http://doc.redisfans.com/hash/index.html">Redis 命令参考——哈希(Hash)</a></p><h2 id="Redis-列表-List"><a href="#Redis-列表-List" class="headerlink" title="Redis 列表(List)"></a>Redis 列表(List)</h2><p><a href="http://doc.redisfans.com/list/index.html">Redis 命令参考——列表(List)</a></p><h2 id="Redis-集合-Set"><a href="#Redis-集合-Set" class="headerlink" title="Redis 集合(Set)"></a>Redis 集合(Set)</h2><p><a href="http://doc.redisfans.com/set/index.html">Redis 命令参考——集合(Set)</a></p><h2 id="Redis-有序集合-sorted-set"><a href="#Redis-有序集合-sorted-set" class="headerlink" title="Redis 有序集合(sorted set)"></a>Redis 有序集合(sorted set)</h2><p><a href="http://doc.redisfans.com/sorted_set/index.html">Redis 命令参考——有序集合(sorted set)</a></p><h2 id="Redis-发布订阅"><a href="#Redis-发布订阅" class="headerlink" title="Redis 发布订阅"></a>Redis 发布订阅</h2><p><a href="http://doc.redisfans.com/pub_sub/index.html">Redis 命令参考——Pub/Sub（发布/订阅）</a></p><h2 id="Redis-事务"><a href="#Redis-事务" class="headerlink" title="Redis 事务"></a>Redis 事务</h2><p><a href="http://doc.redisfans.com/transaction/index.html">Redis 命令参考——Transaction（事务）</a></p><h2 id="Redis-脚本"><a href="#Redis-脚本" class="headerlink" title="Redis 脚本"></a>Redis 脚本</h2><p><a href="http://doc.redisfans.com/script/index.html">Redis 命令参考——Script（脚本）</a></p><h2 id="Redis-连接"><a href="#Redis-连接" class="headerlink" title="Redis 连接"></a>Redis 连接</h2><p><a href="http://doc.redisfans.com/connection/index.html">Redis 命令参考——Connection（连接）</a></p><h2 id="Redis-服务器"><a href="#Redis-服务器" class="headerlink" title="Redis 服务器"></a>Redis 服务器</h2><p><a href="http://doc.redisfans.com/server/index.html">Redis 命令参考——Server（服务器）</a></p><h1 id="Redis-高级教程"><a href="#Redis-高级教程" class="headerlink" title="Redis 高级教程"></a>Redis 高级教程</h1><h2 id="Redis-数据备份与恢复"><a href="#Redis-数据备份与恢复" class="headerlink" title="Redis 数据备份与恢复"></a>Redis 数据备份与恢复</h2><h3 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h3><p>Redis <code>SAVE</code> 命令用于创建当前数据库的备份。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; SAVE <br>OK<br></code></pre></td></tr></table></figure><p>该命令将在 redis 安装目录中创建 <strong>dump.rdb</strong> 文件。</p><h3 id="恢复数据"><a href="#恢复数据" class="headerlink" title="恢复数据"></a>恢复数据</h3><p>如果需要恢复数据，只需将备份文件 (<strong>dump.rdb</strong>) 移动到 redis 安装目录并启动服务即可。获取 redis 目录可以使用 CONFIG 命令，如下所示：</p><p>redis 127.0.0.1:6379&gt; CONFIG GET dir</p><ol><li>“dir”</li><li>“/usr/local/redis/bin”<br>以上命令 CONFIG GET dir 输出的 redis 安装目录为 /usr/local/redis/bin。</li></ol><h3 id="Bgsave"><a href="#Bgsave" class="headerlink" title="Bgsave"></a>Bgsave</h3><p>创建 redis 备份文件也可以使用命令 <strong>BGSAVE</strong>，该命令在后台执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; BGSAVE<br>Background saving started   <br></code></pre></td></tr></table></figure><h2 id="Redis-安全"><a href="#Redis-安全" class="headerlink" title="Redis 安全"></a>Redis 安全</h2><p>我们可以通过 redis 的配置文件设置密码参数，这样客户端连接到 redis 服务就需要密码验证，这样可以让你的 redis 服务更安全。</p><p>通过以下命令查看是否设置了密码验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; config get requirepass<br>1) <span class="hljs-string">&quot;requirepass&quot;</span><br>2) <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>默认情况下 requirepass 参数是空的，这就意味着你无需通过密码验证就可以连接到 redis 服务。</p><p>你可以通过以下命令来修改该参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; CONFIG <span class="hljs-built_in">set</span> requirepass <span class="hljs-string">&quot;123456&quot;</span><br>OK<br>127.0.0.1:6379&gt; CONFIG get requirepass<br>1) <span class="hljs-string">&quot;requirepass&quot;</span><br>2) <span class="hljs-string">&quot;123456&quot;</span><br></code></pre></td></tr></table></figure><p>设置密码后，客户端连接 redis 服务就需要密码验证，否则无法执行命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ redis-cli <br>127.0.0.1:6379&gt; get runoob<br>(error) NOAUTH Authentication required.<br>127.0.0.1:6379&gt; auth 123456<br>OK<br>127.0.0.1:6379&gt; get runoob<br><span class="hljs-string">&quot;requirepass test&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Redis-性能测试"><a href="#Redis-性能测试" class="headerlink" title="Redis 性能测试"></a>Redis 性能测试</h2><p>Redis 性能测试是通过同时执行多个命令实现的。</p><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><p>redis 性能测试的基本命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-benchmark [option] [option value]<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：该命令是在 redis 的目录下执行的，而不是 redis 客户端的内部指令。</p><h3 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h3><p>以下实例同时执行 10000 个请求来检测性能：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ redis-benchmark -n 10000 -q<br>PING_INLINE: 77519.38 requests per second<br>PING_BULK: 69444.45 requests per second<br>SET: 79365.08 requests per second<br>GET: 81967.21 requests per second<br>INCR: 78740.16 requests per second<br>LPUSH: 86956.52 requests per second<br>RPUSH: 81300.81 requests per second<br>LPOP: 84033.61 requests per second<br>RPOP: 81967.21 requests per second<br>SADD: 88495.58 requests per second<br>HSET: 90090.09 requests per second<br>SPOP: 92592.59 requests per second<br>LPUSH (needed to benchmark LRANGE): 91743.12 requests per second<br>LRANGE_100 (first 100 elements): 91743.12 requests per second<br>LRANGE_300 (first 300 elements): 84033.61 requests per second<br>LRANGE_500 (first 450 elements): 90090.09 requests per second<br>LRANGE_600 (first 600 elements): 87719.30 requests per second<br>MSET (10 keys): 90909.09 requests per second<br></code></pre></td></tr></table></figure><p>redis 性能测试工具可选参数如下所示：</p><table><thead><tr><th>序号</th><th>选项</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>1</td><td>-h</td><td>指定服务器主机名</td><td>127.0.0.1</td></tr><tr><td>2</td><td>-p</td><td>指定服务器端口</td><td>6379</td></tr><tr><td>3</td><td>-s</td><td>指定服务器</td><td>socket</td></tr><tr><td>4</td><td>-c</td><td>指定并发连接数</td><td>50</td></tr><tr><td>5</td><td>-n</td><td>指定请求数</td><td>10000</td></tr><tr><td>6</td><td>-d</td><td>以字节的形式指定 SET/GET 值的数据大小</td><td>2</td></tr><tr><td>7</td><td>-k</td><td>1=keep alive 0=reconnect</td><td>1</td></tr><tr><td>8</td><td>-r</td><td>SET/GET/INCR 使用随机 key, SADD 使用随机值</td><td></td></tr><tr><td>9</td><td>-P</td><td>通过管道传输 <numreq> 请求</td><td>1</td></tr><tr><td>10</td><td>-q</td><td>强制退出 redis。仅显示 query/sec 值</td><td></td></tr><tr><td>11</td><td>–csv</td><td>以 CSV 格式输出</td><td></td></tr><tr><td>12</td><td>-l</td><td>生成循环，永久执行测试</td><td></td></tr><tr><td>13</td><td>-t</td><td>仅运行以逗号分隔的测试命令列表。</td><td></td></tr><tr><td>14</td><td>-I</td><td>Idle 模式。仅打开 N 个 idle 连接并等待。</td><td></td></tr></tbody></table><h3 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h3><p>以下实例我们使用了多个参数来测试 redis 性能：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ redis-benchmark -h 127.0.0.1 -p 6379 -t <span class="hljs-built_in">set</span>,lpush -n 10000 -q<br>SET: 71942.45 requests per second<br>LPUSH: 73529.41 requests per second<br></code></pre></td></tr></table></figure><p>以上实例中主机为 127.0.0.1，端口号为 6379，执行的命令为 set,lpush，请求数为 10000，通过 -q 参数让结果只显示每秒执行的请求数。</p><h2 id="Redis-客户端连接"><a href="#Redis-客户端连接" class="headerlink" title="Redis 客户端连接"></a>Redis 客户端连接</h2><p>Redis 通过监听一个 TCP 端口或者 Unix socket 的方式来接收来自客户端的连接，当一个连接建立后，Redis 内部会进行以下一些操作：</p><p>首先，客户端 socket 会被设置为非阻塞模式，因为 Redis 在网络事件处理上采用的是非阻塞多路复用模型。<br>然后为这个 socket 设置 TCP_NODELAY 属性，禁用 Nagle 算法<br>然后创建一个可读的文件事件用于监听这个客户端 socket 的数据发送</p><h3 id="最大连接数"><a href="#最大连接数" class="headerlink" title="最大连接数"></a>最大连接数</h3><p>在 Redis2.4 中，最大连接数是被直接硬编码在代码里面的，而在2.6版本中这个值变成可配置的。</p><p><code>maxclients</code> 的默认值是 <strong>10000</strong>，你也可以在 redis.conf 中对这个值进行修改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">config get maxclients<br><br>1) <span class="hljs-string">&quot;maxclients&quot;</span><br>2) <span class="hljs-string">&quot;10000&quot;</span><br></code></pre></td></tr></table></figure><h3 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h3><p>以下实例我们在服务启动时设置最大连接数为 100000：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-server --maxclients 100000<br></code></pre></td></tr></table></figure><h2 id="Redis-管道技术"><a href="#Redis-管道技术" class="headerlink" title="Redis 管道技术"></a>Redis 管道技术</h2><p>Redis是一种基于客户端-服务端模型以及请求/响应协议的TCP服务。这意味着通常情况下一个请求会遵循以下步骤：</p><p>客户端向服务端发送一个查询请求，并监听Socket返回，通常是以阻塞模式，等待服务端响应。<br>服务端处理命令，并将结果返回给客户端。</p><p><strong>Redis 管道技术</strong>可以在服务端未响应时，客户端可以继续向服务端发送请求，并最终一次性读取所有服务端的响应。</p><h3 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h3><p>查看 redis 管道，只需要启动 redis 实例并输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">$(<span class="hljs-built_in">echo</span> -en <span class="hljs-string">&quot;PING\r\n SET runoobkey redis\r\nGET runoobkey\r\nINCR visitor\r\nINCR visitor\r\nINCR visitor\r\n&quot;</span>; sleep 10) | nc localhost 6379<br><br>+PONG<br>+OK<br><span class="hljs-variable">$5</span><br>redis<br>:1<br>:2<br>:3<br></code></pre></td></tr></table></figure><p>以上实例中我们通过使用 PING 命令查看redis服务是否可用， 之后我们设置了 runoobkey 的值为 redis，然后我们获取 runoobkey 的值并使得 visitor 自增 3 次。</p><p>在返回的结果中我们可以看到这些命令一次性向 redis 服务提交，并最终一次性读取所有服务端的响应</p><h3 id="管道技术的优势"><a href="#管道技术的优势" class="headerlink" title="管道技术的优势"></a>管道技术的优势</h3><p>管道技术最显著的优势是提高了 redis 服务的性能。</p><h2 id="Redis-分区"><a href="#Redis-分区" class="headerlink" title="Redis 分区"></a>Redis 分区</h2><p>分区是分割数据到多个Redis实例的处理过程，因此每个实例只保存key的一个子集。</p><h3 id="分区的优势"><a href="#分区的优势" class="headerlink" title="分区的优势"></a>分区的优势</h3><ul><li>通过利用多台计算机内存的和值，允许我们构造更大的数据库。</li><li>通过多核和多台计算机，允许我们扩展计算能力；通过多台计算机和网络适配器，允许我们扩展网络带宽。</li></ul><h3 id="分区的不足"><a href="#分区的不足" class="headerlink" title="分区的不足"></a>分区的不足</h3><p>redis的一些特性在分区方面表现的不是很好：</p><ul><li>涉及多个key的操作通常是不被支持的。举例来说，当两个set映射到不同的redis实例上时，你就不能对这两个set执行交集操作。</li><li>涉及多个key的redis事务不能使用。</li><li>当使用分区时，数据处理较为复杂，比如你需要处理多个rdb/aof文件，并且从多个实例和主机备份持久化文件。</li><li>增加或删除容量也比较复杂。redis集群大多数支持在运行时增加、删除节点的透明数据平衡的能力，但是类似于客户端分区、代理等其他系统则不支持这项特性。然而，一种叫做presharding的技术对此是有帮助的。</li></ul><h3 id="分区类型"><a href="#分区类型" class="headerlink" title="分区类型"></a>分区类型</h3><p>Redis 有两种类型分区。 假设有4个Redis实例 R0，R1，R2，R3，和类似user:1，user:2这样的表示用户的多个key，对既定的key有多种不同方式来选择这个key存放在哪个实例中。也就是说，有不同的系统来映射某个key到某个Redis服务。</p><h3 id="范围分区"><a href="#范围分区" class="headerlink" title="范围分区"></a>范围分区</h3><p>最简单的分区方式是按范围分区，就是映射一定范围的对象到特定的Redis实例。</p><p>比如，ID从0到10000的用户会保存到实例R0，ID从10001到 20000的用户会保存到R1，以此类推。</p><p>这种方式是可行的，并且在实际中使用，不足就是要有一个区间范围到实例的映射表。这个表要被管理，同时还需要各 种对象的映射表，通常对Redis来说并非是好的方法。</p><h3 id="哈希分区"><a href="#哈希分区" class="headerlink" title="哈希分区"></a>哈希分区</h3><p>另外一种分区方法是hash分区。这对任何key都适用，也无需是object_name:这种形式，像下面描述的一样简单：</p><ul><li>用一个hash函数将key转换为一个数字，比如使用crc32 hash函数。对key foobar执行crc32(foobar)会输出类似93024922的整数。</li><li>对这个整数取模，将其转化为0-3之间的数字，就可以将这个整数映射到4个Redis实例中的一个了。93024922 % 4 = 2，就是说key foobar应该被存到R2实例中。注意：取模操作是取除的余数，通常在多种编程语言中用%操作符实现。</li></ul><h2 id="PHP-使用-Redis"><a href="#PHP-使用-Redis" class="headerlink" title="PHP 使用 Redis"></a>PHP 使用 Redis</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>开始在 PHP 中使用 Redis 前， 我们需要确保已经安装了 redis 服务及 PHP redis 驱动，且你的机器上能正常使用 PHP。 接下来让我们安装 PHP redis 驱动：下载地址为:<a href="https://github.com/phpredis/phpredis/releases"><strong>https://github.com/phpredis/phpredis/releases</strong></a>。</p><h3 id="PHP安装redis扩展"><a href="#PHP安装redis扩展" class="headerlink" title="PHP安装redis扩展"></a>PHP安装redis扩展</h3><p>以下操作需要在下载的 phpredis 目录中完成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ wget https://github.com/phpredis/phpredis/archive/3.1.4.tar.gz<br>$ <span class="hljs-built_in">cd</span> phpredis-3.1.4                      <span class="hljs-comment"># 进入 phpredis 目录</span><br>$ /usr/<span class="hljs-built_in">local</span>/php/bin/phpize              <span class="hljs-comment"># php安装后的路径</span><br>$ ./configure --with-php-config=/usr/<span class="hljs-built_in">local</span>/php/bin/php-config<br>$ make &amp;&amp; make install<br></code></pre></td></tr></table></figure><h3 id="修改php-ini文件"><a href="#修改php-ini文件" class="headerlink" title="修改php.ini文件"></a>修改php.ini文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /usr/<span class="hljs-built_in">local</span>/php/lib/php.ini<br></code></pre></td></tr></table></figure><p>增加如下内容:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">extension_dir = <span class="hljs-string">&quot;/usr/local/php/lib/php/extensions/no-debug-zts-20090626&quot;</span><br><br>extension=redis.so<br></code></pre></td></tr></table></figure><p>安装完成后重启php-fpm 或 apache。查看phpinfo信息，就能看到redis扩展。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/11/14022020088882.jpg" alt="PHP 使用 Redis"></p><h3 id="连接到-redis-服务"><a href="#连接到-redis-服务" class="headerlink" title="连接到 redis 服务"></a>连接到 redis 服务</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-comment">//连接本地的 Redis 服务</span><br>   <span class="hljs-variable">$redis</span> = <span class="hljs-keyword">new</span> Redis();<br>   <span class="hljs-variable">$redis</span>-&gt;connect(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">6379</span>);<br>   <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Connection to server successfully&quot;</span>;<br>         <span class="hljs-comment">//查看服务是否运行</span><br>   <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Server is running: &quot;</span> . <span class="hljs-variable">$redis</span>-&gt;ping();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>执行脚本，输出结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Connection to server sucessfully<br>Server is running: PONG<br></code></pre></td></tr></table></figure><h3 id="Redis-PHP-String-字符串-实例"><a href="#Redis-PHP-String-字符串-实例" class="headerlink" title="Redis PHP String(字符串) 实例"></a>Redis PHP String(字符串) 实例</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>   <span class="hljs-comment">//连接本地的 Redis 服务</span><br>   <span class="hljs-variable">$redis</span> = <span class="hljs-keyword">new</span> Redis();<br>   <span class="hljs-variable">$redis</span>-&gt;connect(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">6379</span>);<br>   <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Connection to server successfully&quot;</span>;<br>   <span class="hljs-comment">//设置 redis 字符串数据</span><br>   <span class="hljs-variable">$redis</span>-&gt;set(<span class="hljs-string">&quot;tutorial-name&quot;</span>, <span class="hljs-string">&quot;Redis tutorial&quot;</span>);<br>   <span class="hljs-comment">// 获取存储的数据并输出</span><br>   <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Stored string in redis:: &quot;</span> . <span class="hljs-variable">$redis</span>-&gt;get(<span class="hljs-string">&quot;tutorial-name&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>执行脚本，输出结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Connection to server sucessfully<br>Stored string <span class="hljs-keyword">in</span> redis:: Redis tutorial<br></code></pre></td></tr></table></figure><hr><h2 id="Redis-PHP-List-列表-实例"><a href="#Redis-PHP-List-列表-实例" class="headerlink" title="Redis PHP List(列表) 实例"></a>Redis PHP List(列表) 实例</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>   <span class="hljs-comment">//连接本地的 Redis 服务</span><br>   <span class="hljs-variable">$redis</span> = <span class="hljs-keyword">new</span> Redis();<br>   <span class="hljs-variable">$redis</span>-&gt;connect(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">6379</span>);<br>   <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Connection to server successfully&quot;</span>;<br>   <span class="hljs-comment">//存储数据到列表中</span><br>   <span class="hljs-variable">$redis</span>-&gt;lpush(<span class="hljs-string">&quot;tutorial-list&quot;</span>, <span class="hljs-string">&quot;Redis&quot;</span>);<br>   <span class="hljs-variable">$redis</span>-&gt;lpush(<span class="hljs-string">&quot;tutorial-list&quot;</span>, <span class="hljs-string">&quot;Mongodb&quot;</span>);<br>   <span class="hljs-variable">$redis</span>-&gt;lpush(<span class="hljs-string">&quot;tutorial-list&quot;</span>, <span class="hljs-string">&quot;Mysql&quot;</span>);<br>   <span class="hljs-comment">// 获取存储的数据并输出</span><br>   <span class="hljs-variable">$arList</span> = <span class="hljs-variable">$redis</span>-&gt;lrange(<span class="hljs-string">&quot;tutorial-list&quot;</span>, <span class="hljs-number">0</span> ,<span class="hljs-number">5</span>);<br>   <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Stored string in redis&quot;</span>;<br>   print_r(<span class="hljs-variable">$arList</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>执行脚本，输出结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">Connection to server sucessfully<br>Stored string <span class="hljs-keyword">in</span> redis<br>Mysql<br>Mongodb<br>Redis<br></code></pre></td></tr></table></figure><hr><h2 id="Redis-PHP-Keys-实例"><a href="#Redis-PHP-Keys-实例" class="headerlink" title="Redis PHP Keys 实例"></a>Redis PHP Keys 实例</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>   <span class="hljs-comment">//连接本地的 Redis 服务</span><br>   <span class="hljs-variable">$redis</span> = <span class="hljs-keyword">new</span> Redis();<br>   <span class="hljs-variable">$redis</span>-&gt;connect(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">6379</span>);<br>   <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Connection to server successfully&quot;</span>;<br>   <span class="hljs-comment">// 获取数据并输出</span><br>   <span class="hljs-variable">$arList</span> = <span class="hljs-variable">$redis</span>-&gt;keys(<span class="hljs-string">&quot;*&quot;</span>);<br>   <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Stored keys in redis:: &quot;</span>;<br>   print_r(<span class="hljs-variable">$arList</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>执行脚本，输出结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">Connection to server sucessfully<br>Stored string <span class="hljs-keyword">in</span> redis::<br>tutorial-name<br>tutorial-list<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过sh脚本执行Deployer代码部署</title>
    <link href="/2020/04/03/%E9%80%9A%E8%BF%87sh%E8%84%9A%E6%9C%AC%E6%89%A7%E8%A1%8CDeployer%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2/"/>
    <url>/2020/04/03/%E9%80%9A%E8%BF%87sh%E8%84%9A%E6%9C%AC%E6%89%A7%E8%A1%8CDeployer%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>在上一篇<a href="/2020/04/02/Deployer%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/">Deployer部署项目</a>中，我们编写单个 <code>Deployer</code> PHP脚本来实现无需登陆远程服务器，通过 <code>ssh</code> 方式将 <code>git</code> 仓库代码上传到远程服务器。<br>极大的方便了运维代码发布的操作和时间的节约。<br>当手中有多个项目需要代码维护时，虽然可以对不同项目添加不同的部署文件，通过 <code>dep deploy --file=&quot;test.php&quot;</code> 来部署项目。但，这里希望实现如下需求：</p><ul><li>运维每次执行一个命令，即可实现项目部署</li><li>支持通过传递参数，来区分不同项目</li><li>要能够发布指定分支的代码</li></ul><p>通过一下脚本来实现</p><h1 id="sh脚本"><a href="#sh脚本" class="headerlink" title="sh脚本"></a>sh脚本</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#  $1：项目名，如：erp|api|member|crm</span><br><span class="hljs-comment">#  $2：环境，如：ta|tb|tc</span><br><span class="hljs-comment">#  $3：分支，如：task111</span><br><br><span class="hljs-function"><span class="hljs-title">confirm</span></span>() &#123;<br>sleep 1<br><span class="hljs-built_in">read</span> -p $<span class="hljs-string">&#x27;\x0a确认是否执行:(y/n)&#x27;</span> v_q<br><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$v_q</span>&quot;</span> == <span class="hljs-string">&#x27;y&#x27;</span> ]]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m开始执行 \033[0m&quot;</span><br>        sleep 1<br><span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m退出执行 \033[0m&quot;</span><br>        <span class="hljs-built_in">exit</span> 0;<br><span class="hljs-keyword">fi</span><br>&#125;<br><br><br><span class="hljs-keyword">if</span> ! [ <span class="hljs-variable">$#</span> -eq 3 ];<span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31m 告警: 必须输入3个参数 \033[0m&quot;</span><br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m 如: <span class="hljs-variable">$0</span>  项目名  环境  分支 \033[0m&quot;</span><br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m 如: <span class="hljs-variable">$0</span>  erp    ta   master \033[0m&quot;</span><br>        <span class="hljs-built_in">exit</span> 0;<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> ! [ -d /home/www/<span class="hljs-built_in">log</span>/<span class="hljs-string">&quot;<span class="hljs-variable">$2</span>&quot;</span> ];<span class="hljs-keyword">then</span><br>        mkdir -p /home/www/<span class="hljs-built_in">log</span>/<span class="hljs-string">&quot;<span class="hljs-variable">$2</span>&quot;</span><br><span class="hljs-keyword">fi</span><br><br><br>start_time=`date <span class="hljs-string">&#x27;+%Y_%m_%d&#x27;</span>_<span class="hljs-string">&#x27;%H:%M:%S&#x27;</span>`<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m&quot;</span>开始时间: <span class="hljs-variable">$start_time</span><span class="hljs-string">&quot; \033[0m&quot;</span> &gt;&gt; /home/www/<span class="hljs-built_in">log</span>/<span class="hljs-string">&quot;<span class="hljs-variable">$2</span>&quot;</span>/<span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>.<span class="hljs-built_in">log</span><br><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$1</span> <span class="hljs-keyword">in</span><br><br>www|erp|srt|api)<br>        confirm;<br>        dep deploy --file=/home/<span class="hljs-built_in">test</span>/deployer/<span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>.php --branch=task1111 -vvv | tee -a /home/<span class="hljs-built_in">test</span>/<span class="hljs-built_in">log</span>/<span class="hljs-string">&quot;<span class="hljs-variable">$2</span>&quot;</span>/<span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>.<span class="hljs-built_in">log</span><br>;;<br><br>*)<br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m输入错误\033[0m&quot;</span><br>;;<br><br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><p>终端输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ chmod +x deploy.sh    <span class="hljs-comment"># 赋予脚本可执行权限</span><br>$ ./deploy.sh<br>告警: 必须输入3个参数 <br> 如: ./deploy.sh  项目名  环境  分支 <br> 如: ./deploy.sh  erp    ta   master<br> $ ./deploy.sh erp ta task111<br> ✈︎ Deploying task111 on 192.168.15.75<br>• <span class="hljs-keyword">done</span> on [192.168.15.75]<br>➤ Executing task deploy:prepare<br>[192.168.15.75] &gt; <span class="hljs-built_in">echo</span> <span class="hljs-variable">$0</span><br>[192.168.15.75] &lt; ssh multiplexing initialization<br>[192.168.15.75] &lt; bash<br>[192.168.15.75] &gt; <span class="hljs-keyword">if</span> [ ! -d /opt/molbase.inc/data_app/dev13/srt.molbase.org ]; <span class="hljs-keyword">then</span> mkdir -p /opt/molbase.inc/data_app/dev13/srt.molbase.org; <span class="hljs-keyword">fi</span><br>[192.168.15.75] &gt; <span class="hljs-keyword">if</span> [ ! -L /opt/molbase.inc/data_app/dev13/srt.molbase.org/current ] &amp;&amp; [ -d /opt/molbase.inc/data_app/dev13/srt.molbase.org/current ]; <span class="hljs-keyword">then</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;true&#x27;</span>; <span class="hljs-keyword">fi</span><br>[192.168.15.75] &gt; <span class="hljs-built_in">cd</span> /opt/molbase.inc/data_app/dev13/srt.molbase.org &amp;&amp; <span class="hljs-keyword">if</span> [ ! -d .dep ]; <span class="hljs-keyword">then</span> mkdir .dep; <span class="hljs-keyword">fi</span><br>[192.168.15.75] &gt; <span class="hljs-built_in">cd</span> /opt/molbase.inc/data_app/dev13/srt.molbase.org &amp;&amp; <span class="hljs-keyword">if</span> [ ! -d releases ]; <span class="hljs-keyword">then</span> mkdir releases; <span class="hljs-keyword">fi</span><br>[192.168.15.75] &gt; <span class="hljs-built_in">cd</span> /opt/molbase.inc/data_app/dev13/srt.molbase.org &amp;&amp; <span class="hljs-keyword">if</span> [ ! -d shared ]; <span class="hljs-keyword">then</span> mkdir shared; <span class="hljs-keyword">fi</span><br>• <span class="hljs-keyword">done</span> on [192.168.13.202]<br>...<br></code></pre></td></tr></table></figure><p>这样，在每次维护完一个项目的 <code>Deployer</code> 文件，只要执行 <code>deploy.sh</code>脚本，带上要发布的项目（寻找对应项目的 <code>Deployer</code> 文件）、发布位置（具体位置，以 <code>Deployer</code> 文件中定义的变量 <code>deploy_path</code> 为准）、对应分支（存在的git分支）即可。</p>]]></content>
    
    
    <categories>
      
      <category>Deployer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Deployer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Deployer部署项目</title>
    <link href="/2020/04/02/Deployer%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/"/>
    <url>/2020/04/02/Deployer%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/php/deployer.png"></p><h1 id="Deployer-简介"><a href="#Deployer-简介" class="headerlink" title="Deployer 简介"></a>Deployer 简介</h1><p>Deployer是一个用PHP编写的 <code>cli</code> 部署工具，用于部署任何 <code>PHP</code> 应用程序，包括 <code>Laravel</code>、<code>Symfony</code>、<code>Zend Framework</code> 等框架。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>简单的设置过程和最小的学习曲线</li><li>可以使用在大多数框架上</li><li>没有扩展的并行执行</li><li>出现错误，可以回滚到之前版本</li><li>没有使用什么代理，仅仅是 <code>SSH</code></li><li>可以实现零停机部署</li></ul><h1 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -LO https://deployer.org/deployer.phar<br>mv deployer.phar /usr/<span class="hljs-built_in">local</span>/bin/dep<br>chmod +x /usr/<span class="hljs-built_in">local</span>/bin/dep<br></code></pre></td></tr></table></figure><p>测试 <code>Deployer</code> 是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ dep --version<br>Deployer 6.7.3<br></code></pre></td></tr></table></figure><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p>安装完后，你可以通过 <code>dep</code> 命令在你的项目目录下运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ dep init<br><span class="hljs-comment"># 运行此命令后会出现下图的选项</span><br>                                            <br>  Welcome to the Deployer config generator  <br>                                            <br><br><br> This utility will walk you through creating a deploy.php file.<br> It only covers the most common items, and tries to guess sensible defaults.<br> <br> Press ^C at any time to quit.<br><br> Please select your project <span class="hljs-built_in">type</span> [Common]:<br>  [0 ] Common<br>  [1 ] Laravel<br>  [2 ] Symfony<br>  [3 ] Yii<br>  [4 ] Yii2 Basic App<br>  [5 ] Yii2 Advanced App<br>  [6 ] Zend Framework<br>  [7 ] CakePHP<br>  [8 ] CodeIgniter<br>  [9 ] Drupal<br>  [10] TYPO3<br> &gt; <br></code></pre></td></tr></table></figure><p>依照提示生成 <code>deployer.php</code> 文件。文件中包含了基本的部署配置和任务，你可以根据注释在适当的地方添加配置以及任务。</p><h2 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h2><p>添加一个测试项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">task(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-function"><span class="hljs-title">function</span></span> () &#123;<br>    writeln(<span class="hljs-string">&#x27;Hello world&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>执行查看结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ dep <span class="hljs-built_in">test</span><br><span class="hljs-comment"># output:</span><br>➤ Executing task <span class="hljs-built_in">test</span><br>Hello world<br>• <span class="hljs-keyword">done</span> on [project.com]<br>✔ Ok [0ms]<br></code></pre></td></tr></table></figure><h1 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h1><p>直接上完整的部署文件 <code>deployer.php</code>,这里以 <code>Laravel</code> 框架为例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Deployer</span>;<br><br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;recipe/laravel.php&#x27;</span>;<br><br><span class="hljs-comment">// 项目名称</span><br>set(<span class="hljs-string">&#x27;application&#x27;</span>, <span class="hljs-string">&#x27;my_project&#x27;</span>);<br><br><span class="hljs-comment">// 代码仓库</span><br>set(<span class="hljs-string">&#x27;repository&#x27;</span>, <span class="hljs-string">&#x27;git@gitserver.com:_inc/bbs.git&#x27;</span>);<br><br><span class="hljs-comment">// 允许 git 执行 clone 操作，默认为 false</span><br>set(<span class="hljs-string">&#x27;git_tty&#x27;</span>, <span class="hljs-literal">true</span>); <br><br><span class="hljs-comment">// 保存发行版本数</span><br>set(<span class="hljs-string">&#x27;keep_releases&#x27;</span>, <span class="hljs-number">5</span>);<br><br><span class="hljs-comment">// 部署时不同版本共享的文件和文件夹</span><br>add(<span class="hljs-string">&#x27;shared_files&#x27;</span>, [<span class="hljs-string">&#x27;.env&#x27;</span>]);<br>add(<span class="hljs-string">&#x27;shared_dirs&#x27;</span>, [<br>    <span class="hljs-string">&#x27;public/static&#x27;</span>,<br>    <span class="hljs-string">&#x27;storage&#x27;</span>,<br>]);<br><br><span class="hljs-comment">// 允许服务器写入的文件夹</span><br>add(<span class="hljs-string">&#x27;writable_dirs&#x27;</span>, []);<br><br><br><span class="hljs-comment">// 主机信息</span><br>host(<span class="hljs-string">&#x27;192.168.15.75&#x27;</span>)<br>    -&gt;user(<span class="hljs-string">&#x27;deployer&#x27;</span>) <span class="hljs-comment">// 这里的 deployer 用户名要求要是服务器上存在的账户名，已实现 ssh 登陆</span><br>      <span class="hljs-comment">// 指定私钥的位置，前提是公钥已经发送到服务器端</span><br>    -&gt;identityFile(<span class="hljs-string">&#x27;~/.ssh/id_rsa&#x27;</span>)<br>    -&gt;set(<span class="hljs-string">&#x27;deploy_path&#x27;</span>, <span class="hljs-string">&#x27;/www/bbs.gitserver.com&#x27;</span>);    <span class="hljs-comment"># deploy_path：代码发布到服务器上的位置</span><br>    <br><span class="hljs-comment">// Tasks</span><br>task(<span class="hljs-string">&#x27;build&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    run(<span class="hljs-string">&#x27;cd &#123;&#123;release_path&#125;&#125; &amp;&amp; build&#x27;</span>);<br>&#125;);<br><br>task(<span class="hljs-string">&#x27;success&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    writeln(<span class="hljs-string">&#x27;Deploy success!&#x27;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 当你想在 部署 前/后 执行一些其他的 task 操作，可以通过配置 before()、after() 来实现</span><br>before(<span class="hljs-string">&#x27;deploy:symlink&#x27;</span>, <span class="hljs-string">&#x27;artisan:migrate&#x27;</span>);<br>after(<span class="hljs-string">&#x27;deploy:failed&#x27;</span>, <span class="hljs-string">&#x27;deploy:unlock&#x27;</span>);<br>after(<span class="hljs-string">&#x27;deploy:update_code&#x27;</span>, <span class="hljs-string">&#x27;success&#x27;</span>); <span class="hljs-comment"># 这里的 success 为 上面 task 定义的内容</span><br></code></pre></td></tr></table></figure><p><code>Deployer</code> 将会在服务器上生成一下三个目录：</p><ul><li><code>releases</code> 保留部署的历史版本文件夹,</li><li><code>shared</code> 共享文件夹，它的作用就是存储我们项目中版本间共享的文件，比如 <code>Laravel</code> 中的配置文件 <code>.env</code></li><li><code>current</code> 指向当前发型版本的软连接，比如指向 <code>releases</code> 下面的 <code>1</code> 号文件夹</li></ul><h2 id="dep-rollback"><a href="#dep-rollback" class="headerlink" title="dep rollback"></a>dep rollback</h2><p>如果新版本或者当前部署进程有什么错误的话，可以通过执行 <code>dep rollback</code> 会推到前一个版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">dep rollback<br>✔ Executing task rollback <span class="hljs-comment"># 执行成功之后查看 current 对应的软链接会发现，已经指向上一个版本了！</span><br></code></pre></td></tr></table></figure><h2 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h2><p>分支部署：<br>如果当前需要部署一个特别的 branch、tag、reversion，只需要在后面添加对应的选项就可以。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">dep deploy --branch=task1111<br>dep deploy --tag=<span class="hljs-string">&quot;v0.1&quot;</span><br>dep deploy --revision=<span class="hljs-string">&quot;5daefb59edbaa75&quot;</span><br></code></pre></td></tr></table></figure><p>更多的配置项，请查看官方文档：<a href="https://deployer.org/docs/getting-started.html">https://deployer.org/docs/getting-started.html</a></p><p>参考文档： <a href="https://learnku.com/articles/13242/another-introduction-to-the-use-of-deployer">https://learnku.com/articles/13242/another-introduction-to-the-use-of-deployer</a></p><p><strong>升级版本</strong>参考<a href="/2020/04/03/%E9%80%9A%E8%BF%87sh%E8%84%9A%E6%9C%AC%E6%89%A7%E8%A1%8CDeployer%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2/">通过sh脚本执行Deployer代码部署</a></p>]]></content>
    
    
    <categories>
      
      <category>Deployer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Deployer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装gitlab</title>
    <link href="/2020/04/01/Docker%E5%AE%89%E8%A3%85gitlab/"/>
    <url>/2020/04/01/Docker%E5%AE%89%E8%A3%85gitlab/</url>
    
    <content type="html"><![CDATA[<h1 id="在Docker中运行-gitlab-镜像"><a href="#在Docker中运行-gitlab-镜像" class="headerlink" title="在Docker中运行 gitlab 镜像"></a>在Docker中运行 gitlab 镜像</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker run --detach \<br>  --hostname gitlab.example.com \<br>  --publish 443:443 --publish 80:80 --publish 22:22 \<br>  --name gitlab \<br>  --restart always \<br>  --volume /srv/gitlab/config:/etc/gitlab \<br>  --volume /srv/gitlab/logs:/var/<span class="hljs-built_in">log</span>/gitlab \<br>  --volume /srv/gitlab/data:/var/opt/gitlab \<br>  gitlab/gitlab-ce:latest<br></code></pre></td></tr></table></figure><p>上面的命令将会下载最新的 <code>gitlab-ce</code> 镜像，并创建一个容器。同时开放了 <code>80、443、22</code> 端口。数据存储在 <code>/srv/gitlab/</code> 中。<strong>容器将会跟随系统一起启动</strong>。 </p><h2 id="Docker容器的重启策略如下："><a href="#Docker容器的重启策略如下：" class="headerlink" title="Docker容器的重启策略如下："></a>Docker容器的重启策略如下：</h2><ul><li><code>no</code>，默认策略，在容器退出时不重启容器</li><li><code>on-failure</code>，在容器非正常退出时（退出状态非0），才会重启容器</li><li><code>on-failure:3</code>，在容器非正常退出时重启容器，最多重启3次</li><li><code>always</code>，在容器退出时总是重启容器</li><li><code>unless-stopped</code>，在容器退出时总是重启容器，但是不考虑在Docker守护进程启动时就已经停止了的容器</li><li><code>unless-stopped</code>，在容器退出时总是重启容器，但是不考虑在Docker守护进程启动时就已经停止了的容器</li></ul><h2 id="数据存放在哪里"><a href="#数据存放在哪里" class="headerlink" title="数据存放在哪里"></a>数据存放在哪里</h2><p><code>Gitlab</code> 容器使用主机绑定的 <code>volumes</code> 来存储数据：</p><table><thead><tr><th>本地路径</th><th>容器路径</th><th>用途</th></tr></thead><tbody><tr><td><code>/srv/gitlab/data</code></td><td><code>/var/opt/gitlab</code></td><td>存储应用数据</td></tr><tr><td><code>/srv/gitlab/logs</code></td><td><code>/var/log/gitlab</code></td><td>存储日志</td></tr><tr><td><code>/srv/gitlab/config</code></td><td><code>/etc/gitlab</code></td><td>存储 <code>gitlab</code> 配置文件</td></tr></tbody></table><h2 id="配置-Gtilab"><a href="#配置-Gtilab" class="headerlink" title="配置 Gtilab"></a>配置 Gtilab</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入容器</span><br>$ sudo docker <span class="hljs-built_in">exec</span> -it gitlab /bin/bash<br><span class="hljs-comment"># 或者直接编辑配置文件</span><br>$ sudo docker <span class="hljs-built_in">exec</span> -it gitlab editor /etc/gitlab/gitlab.rb<br><span class="hljs-comment"># 然后重启 gitlab</span><br>$ sudo docker restart gitlab<br></code></pre></td></tr></table></figure><h2 id="或者也可以在启动-Gitlab镜像时加入配置信息"><a href="#或者也可以在启动-Gitlab镜像时加入配置信息" class="headerlink" title="或者也可以在启动 Gitlab镜像时加入配置信息"></a>或者也可以在启动 Gitlab镜像时加入配置信息</h2><p>可以通过环境变量 <code>GITLAB_OMNIBUS_CONFIG</code> 来添加配置信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker run --detach \<br>  --hostname gitlab.example.com \<br>  --env GITLAB_OMNIBUS_CONFIG=<span class="hljs-string">&quot;external_url &#x27;http://gitlab.example.com/&#x27;; gitlab_rails[&#x27;lfs_enabled&#x27;] = true;&quot;</span> \<br>  --publish 443:443 --publish 80:80 --publish 22:22 \<br>  --name gitlab \<br>  --restart always \<br>  --volume /srv/gitlab/config:/etc/gitlab \<br>  --volume /srv/gitlab/logs:/var/<span class="hljs-built_in">log</span>/gitlab \<br>  --volume /srv/gitlab/data:/var/opt/gitlab \<br>  gitlab/gitlab-ce:latest<br></code></pre></td></tr></table></figure><h1 id="通过-docker-compose-安装-Gitlab"><a href="#通过-docker-compose-安装-Gitlab" class="headerlink" title="通过 docker-compose 安装 Gitlab"></a>通过 <code>docker-compose</code> 安装 Gitlab</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">version: <span class="hljs-string">&#x27;2&#x27;</span><br><br>services:<br>    gitlab:<br>      image: <span class="hljs-string">&#x27;gitlab/gitlab-ce:latest&#x27;</span><br>      restart: unless-stopped<br>      hostname: <span class="hljs-string">&#x27;gitlab.example.com&#x27;</span><br>      environment:<br>        TZ: <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span><br>        GITLAB_OMNIBUS_CONFIG: |<br>          external_url <span class="hljs-string">&#x27;http://gitlab.example.com&#x27;</span><br>          unicorn[<span class="hljs-string">&#x27;port&#x27;</span>] = 80<br>          gitlab_rails[<span class="hljs-string">&#x27;time_zone&#x27;</span>] = <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span><br>          <span class="hljs-comment"># Add any other gitlab.rb configuration here, each on its own line</span><br>      ports:<br>        - <span class="hljs-string">&#x27;80:80&#x27;</span><br>        - <span class="hljs-string">&#x27;443:443&#x27;</span><br>        - <span class="hljs-string">&#x27;22:22&#x27;</span><br>      volumes:<br>        - <span class="hljs-string">&#x27;/home/xxxx/docker/gitlab/config:/etc/gitlab&#x27;</span><br>        - <span class="hljs-string">&#x27;/home/xxxx/docker/gitlab/logs:/var/log/gitlab&#x27;</span><br>        - <span class="hljs-string">&#x27;/home/xxxx/docker/gitlab/data:/var/opt/gitlab&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><ul><li><p>安装完成之后，浏览器打开你自己定义的地址 <code>http://gitlab.example.com</code>,输入登陆密码：<br><img src="/images/docker/gitlab-login.png" alt="gitlab-login.png"></p></li><li><p>添加一个测试项目：<br><img src="/images/docker/gitlab-new-project.png" alt="gitlab-new-project.png"></p></li></ul><p>到此，<code>Gitlab</code> 安装完成！</p>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang-环境搭建</title>
    <link href="/2020/03/26/golang/Golang-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2020/03/26/golang/Golang-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="安装包下载"><a href="#安装包下载" class="headerlink" title="安装包下载"></a>安装包下载</h1><p><a href="https://dl.google.com/go/go1.14.1.linux-amd64.tar.gz">go1.14.1.linux-amd64.tar.gz</a></p><h1 id="解压到指定目录下"><a href="#解压到指定目录下" class="headerlink" title="解压到指定目录下"></a>解压到指定目录下</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ tar -C /usr/<span class="hljs-built_in">local</span> -xzf go1.14.1.linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><h1 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h1><p>环境变量设置可以选择 <code>/etc/profile</code> 或 <code>~/.bashrc</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ dedit ~/.bashrc<br></code></pre></td></tr></table></figure><p>Go环境变量配置如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># golang</span><br><span class="hljs-built_in">export</span> GOROOT=/usr/<span class="hljs-built_in">local</span>/go             <span class="hljs-comment"># GOROOT: GO的安装路径</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$GOROOT</span>/bin           <br><span class="hljs-built_in">export</span> GOPATH=~/go                      <span class="hljs-comment"># GOPATH: GO的工作路径</span><br><span class="hljs-built_in">export</span> GO111MODULE=on                   <span class="hljs-comment"># 开始 Go Modules</span><br></code></pre></td></tr></table></figure><h1 id="刷新环境变量"><a href="#刷新环境变量" class="headerlink" title="刷新环境变量"></a>刷新环境变量</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ go env<br>GO111MODULE=<span class="hljs-string">&quot;on&quot;</span><br>GOARCH=<span class="hljs-string">&quot;amd64&quot;</span><br>GOBIN=<span class="hljs-string">&quot;&quot;</span><br>GOCACHE=<span class="hljs-string">&quot;/home/xxxx/.cache/go-build&quot;</span><br>GOENV=<span class="hljs-string">&quot;/home/xxxx/.config/go/env&quot;</span><br>GOEXE=<span class="hljs-string">&quot;&quot;</span><br>GOFLAGS=<span class="hljs-string">&quot;&quot;</span><br>GOHOSTARCH=<span class="hljs-string">&quot;amd64&quot;</span><br>GOHOSTOS=<span class="hljs-string">&quot;linux&quot;</span><br>GOINSECURE=<span class="hljs-string">&quot;&quot;</span><br>GONOPROXY=<span class="hljs-string">&quot;&quot;</span><br>GONOSUMDB=<span class="hljs-string">&quot;&quot;</span><br>GOOS=<span class="hljs-string">&quot;linux&quot;</span><br>GOPATH=<span class="hljs-string">&quot;/home/xxxx/go&quot;</span><br>GOPRIVATE=<span class="hljs-string">&quot;&quot;</span><br>GOPROXY=<span class="hljs-string">&quot;https://proxy.golang.org,direct&quot;</span><br>GOROOT=<span class="hljs-string">&quot;/usr/local/go&quot;</span><br>GOSUMDB=<span class="hljs-string">&quot;sum.golang.org&quot;</span><br>GOTMPDIR=<span class="hljs-string">&quot;&quot;</span><br>GOTOOLDIR=<span class="hljs-string">&quot;/usr/local/go/pkg/tool/linux_amd64&quot;</span><br>GCCGO=<span class="hljs-string">&quot;gccgo&quot;</span><br>AR=<span class="hljs-string">&quot;ar&quot;</span><br>CC=<span class="hljs-string">&quot;gcc&quot;</span><br>CXX=<span class="hljs-string">&quot;g++&quot;</span><br>CGO_ENABLED=<span class="hljs-string">&quot;1&quot;</span><br>GOMOD=<span class="hljs-string">&quot;/dev/null&quot;</span><br>CGO_CFLAGS=<span class="hljs-string">&quot;-g -O2&quot;</span><br>CGO_CPPFLAGS=<span class="hljs-string">&quot;&quot;</span><br>CGO_CXXFLAGS=<span class="hljs-string">&quot;-g -O2&quot;</span><br>CGO_FFLAGS=<span class="hljs-string">&quot;-g -O2&quot;</span><br>CGO_LDFLAGS=<span class="hljs-string">&quot;-g -O2&quot;</span><br>PKG_CONFIG=<span class="hljs-string">&quot;pkg-config&quot;</span><br>GOGCCFLAGS=<span class="hljs-string">&quot;-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build248485667=/tmp/go-build -gno-record-gcc-switches&quot;</span><br></code></pre></td></tr></table></figure><h1 id="Go-工作空间"><a href="#Go-工作空间" class="headerlink" title="Go 工作空间"></a>Go 工作空间</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ tree<br>.<br>├── bin             <span class="hljs-comment"># 存放编译后生成的可执行文件</span><br>├── pkg             <span class="hljs-comment"># 存放编译后生成的文件</span><br>└── src             <span class="hljs-comment"># 存放源代码</span><br></code></pre></td></tr></table></figure><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">package main<br><br>import <span class="hljs-string">&quot;fmt&quot;</span><br> <br>func <span class="hljs-function"><span class="hljs-title">main</span></span>()&#123;<br>    fmt.Printf(<span class="hljs-string">&quot;hello world\n&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ go run hello.go<br>hello world<br></code></pre></td></tr></table></figure><p>至此，<code>Go</code> 开发环境搭建完成</p>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【转】shell-文本处理利器 awk</title>
    <link href="/2019/05/29/shell/shell-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%88%A9%E5%99%A8%20awk/"/>
    <url>/2019/05/29/shell/shell-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%88%A9%E5%99%A8%20awk/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>awk</code> 是一个强大的文本分析工具，相对于 <code>grep</code> 的查找，<code>sed</code> 的编辑，<code>awk</code> 在其对数据分析并生成报告时，显得尤为强大。简单来说 <code>awk</code> 就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">awk <span class="hljs-string">&#x27;&#123;pattern + action&#125;&#x27;</span> &#123;filenames&#125;<br></code></pre></td></tr></table></figure><p>其中 <code>pattern</code> 表示 <strong>awk</strong> 在数据中查找的内容，而 <code>action</code> 是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。<code>pattern</code> 就是要表示的正则表达式，用斜杠括起来。</p><p><strong>awk</strong> 语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，<strong>awk</strong>抽取信息后，才能进行其他文本操作。完整的<strong>awk</strong>脚本通常用来格式化文本文件中的信息。</p><p>通常，<strong>awk</strong>是以文件的一行为处理单位的。<strong>awk</strong>每接收文件的一行，然后执行相应的命令，来处理文本。</p><h2 id="调用-awk"><a href="#调用-awk" class="headerlink" title="调用 awk"></a>调用 awk</h2><p>有三种方式调用 <code>awk</code></p><ul><li>命令行方式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">awk [-F  field-separator]  <span class="hljs-string">&#x27;commands&#x27;</span>  input-file(s)<br>其中，commands 是真正awk命令，[-F域分隔符]是可选的。 input-file(s) 是待处理的文件。<br>在awk中，文件的每一行中，由域分隔符分开的每一项称为一个域。通常，在不指名-F域分隔符的情况下，默认的域分隔符是空格。<br></code></pre></td></tr></table></figure><ul><li>shell 脚本方式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">将所有的awk命令插入一个文件，并使awk程序可执行，然后awk命令解释器作为脚本的首行，一遍通过键入脚本名称来调用。<br>相当于shell脚本首行的：<span class="hljs-comment">#!/bin/sh</span><br>可以换成：<span class="hljs-comment">#!/bin/awk</span><br></code></pre></td></tr></table></figure><ul><li>将所有 awk 命令插入一个单独文件，然后调用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">awk -f awk-script-file input-file(s)<br>其中，-f选项加载awk-script-file中的awk脚本，input-file(s)跟上面的是一样的。<br></code></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><strong>显示登录账户信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ last -n 5<span class="hljs-comment"># 列出最近 5 条目前与过去登入系统的用户相关信息</span><br>aurora   tty1         :0               Mon May 27 08:44   still logged <span class="hljs-keyword">in</span><br>reboot   system boot  4.15.0-29deepin- Mon May 27 08:29   still running<br>aurora   tty1         :0               Tue May 21 08:40 - down  (3+09:23)<br>reboot   system boot  4.15.0-29deepin- Tue May 21 08:40 - 18:03 (3+09:23)<br>aurora   tty1         :0               Mon May 20 08:52 - crash  (23:47)<br>$ last -n 5 | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> <span class="hljs-comment"># 只显示最近登录的 5 个账号</span><br>aurora<br>reboot<br>aurora<br>reboot<br>aurora<br></code></pre></td></tr></table></figure><p><code>awk</code> 工作流程是这样的：读入有 ‘\n’ 换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，<code>$0</code> 则表示所有域， <code>$1</code>表示第一个域，<code>$n</code>表示第n个域。默认域分隔符是”空白键” 或 “[tab]键”,所以 <code>$1</code> 表示登录用户，<code>$3</code> 表示登录用户ip，以此类推。</p><p><strong>显示‘/etc/passwd’账户</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cat /etc/passwd | awk -F <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span><br>root<br>daemon<br>bin<br>sys<br>sync<br>......<br></code></pre></td></tr></table></figure><p>这种是 <code>awk+action</code> 的示例，每行都执行 <code>action&#123;print $1&#125;</code>。<code>-F</code> 指定域分隔符为’:’。</p><p><strong>只显示’/etc/passwd‘的账户和对应的shell</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cat /etc/passwd | awk -F <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;&#123;print $1&quot;\t&quot;$7&#125;&#x27;</span><br>root/bin/bash<br>daemon/usr/sbin/nologin<br>bin/usr/sbin/nologin<br>sys/usr/sbin/nologin<br>sync/bin/sync<br>......<br>$ cat /etc/passwd | awk -F <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;BEGIN &#123;print &quot;name,shell&quot;&#125; &#123;print $1&quot;,&quot;$7&#125; END &#123;print &quot;blue,/bin/nosh&quot;&#125;&#x27;</span><br>name,shell<br>root,/bin/bash<br>daemon,/usr/sbin/nologin<br>bin,/usr/sbin/nologin<br>sys,/usr/sbin/nologin<br>sync,/bin/sync<br>......<br>blue,/bin/nosh<br></code></pre></td></tr></table></figure><p>第二条命令的作用是：只是显示 <code>/etc/passwd</code> 的账户和账户对应的 shell，而账户与 shell 之间以逗号分割，而且在所有行添加列名 name、shell，在最后一行添加 “blue,/bin/nosh”。</p><p><strong>awk</strong> 工作流程是这样的：先执行 <strong>BEGIN</strong>，然后读取文件，读入有 <code>/n</code> 换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，*$0 则表示所有域*, <em>$1 表示第一个域，</em><em>$n表示第n个域</em>，随后开始执行模式所对应的动作 action。接着开始读入第二条记录······直到所有的记录都读完，最后执行END操作。</p><p><strong>搜索‘/etc/passwd’有 root 关键字的所有行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ awk -F <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;/root/&#x27;</span> /etc/passwd <span class="hljs-comment"># 打印匹配正则的所有行</span><br>root:x:0:0:root:/root:/bin/bash<br>......<br>$ awk -F <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;/root/&#123;print $7&#125;&#x27;</span> /etc/passwd <span class="hljs-comment"># 打印匹配正则的 $7 参数</span><br>/bin/bash<br>......<br></code></pre></td></tr></table></figure><p>1）这种是 <strong>pattern</strong> 的使用示例，匹配了 <strong>pattern</strong> (这里是root)的行才会执行 <strong>action</strong> (没有指定action，默认输出每行的内容)。</p><p>搜索支持正则，例如找 ’root‘ 开头的：<code> awk -F: &#39;/^root/&#39; /etc/passwd</code> </p><p>2）这里指定了 <strong>action</strong> ：<code>&#123;print $7&#125;</code></p><h1 id="awk内置变量"><a href="#awk内置变量" class="headerlink" title="awk内置变量"></a>awk内置变量</h1><p>awk有许多内置变量用来设置环境信息，这些变量可以被改变，下面给出了最常用的一些变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">ARGC               命令行参数个数<br>ARGV               命令行参数排列<br>ENVIRON            支持队列中系统环境变量的使用<br>FILENAME           awk浏览的文件名<br>FNR                浏览文件的记录数<br>FS                 设置输入域分隔符，等价于命令行 -F选项<br>NF                 浏览记录的域的个数<br>NR                 已读的记录数<br>OFS                输出域分隔符<br>ORS                输出记录分隔符<br>RS                 控制记录分隔符<br></code></pre></td></tr></table></figure><p> 此外,$0变量是指整条记录。$1表示当前行的第一个域，$2表示当前行的第二个域，……以此类推。</p><p><strong>统计‘/etc/passwd’：文件名，每行的行号，每行的列数，对应的完整行内容</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ awk  -F <span class="hljs-string">&#x27;:&#x27;</span>  <span class="hljs-string">&#x27;&#123;print &quot;filename:&quot; FILENAME &quot;,linenumber:&quot; NR &quot;,columns:&quot; NF &quot;,linecontent:&quot;$0&#125;&#x27;</span> /etc/passwd<br>filename:/etc/passwd,linenumber:1,columns:7,linecontent:root:x:0:0:root:/root:/bin/bash<br>filename:/etc/passwd,linenumber:2,columns:7,linecontent:daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin<br>filename:/etc/passwd,linenumber:3,columns:7,linecontent:bin:x:2:2:bin:/bin:/usr/sbin/nologin<br>filename:/etc/passwd,linenumber:4,columns:7,linecontent:sys:x:3:3:sys:/dev:/usr/sbin/nologin<br>filename:/etc/passwd,linenumber:5,columns:7,linecontent:sync:x:4:65534:sync:/bin:/bin/sync<br>......<br>$  awk  -F <span class="hljs-string">&#x27;:&#x27;</span>  <span class="hljs-string">&#x27;&#123;printf(&quot;filename:%10s,linenumber:%s,columns:%s,linecontent:%s\n&quot;,FILENAME,NR,NF,$0)&#125;&#x27;</span> /etc/passwd<br>filename:/etc/passwd,linenumber:1,columns:7,linecontent:root:x:0:0:root:/root:/bin/bash<br>filename:/etc/passwd,linenumber:2,columns:7,linecontent:daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin<br>filename:/etc/passwd,linenumber:3,columns:7,linecontent:bin:x:2:2:bin:/bin:/usr/sbin/nologin<br>filename:/etc/passwd,linenumber:4,columns:7,linecontent:sys:x:3:3:sys:/dev:/usr/sbin/nologin<br>filename:/etc/passwd,linenumber:5,columns:7,linecontent:sync:x:4:65534:sync:/bin:/bin/sync<br>......<br>$ awk -F <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;BEGIN&#123;print &quot;fileName, lineNumber, columns, content&quot;&#125;&#123;print FILENAME &quot;, &quot; NR &quot;, &quot; NF &quot;, &quot; $0&#125;&#x27;</span> /etc/passwd<br>fileName, lineNumber, columns, content<br>/etc/passwd, 1, 7, root:x:0:0:root:/root:/bin/bash<br>/etc/passwd, 2, 7, daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin<br>/etc/passwd, 3, 7, bin:x:2:2:bin:/bin:/usr/sbin/nologin<br>/etc/passwd, 4, 7, sys:x:3:3:sys:/dev:/usr/sbin/nologin<br>/etc/passwd, 5, 7, sync:x:4:65534:sync:/bin:/bin/sync<br>......<br></code></pre></td></tr></table></figure><p>使用 <code>printf</code> 替代 <code>print，</code>可以让代码更加简洁，易读（当然，使用 BEGIN 修饰的话，显示效果更好）。</p><h2 id="print和printf"><a href="#print和printf" class="headerlink" title="print和printf"></a><strong>print和printf</strong></h2><p><strong>awk</strong> 中同时提供了 <code>print</code> 和 <code>printf</code> 两种打印输出的函数。</p><p>其中 <code>print</code> 函数的参数可以是变量、数值或者字符串。<strong>字符串必须用双引号引用</strong>，<strong>参数用逗号分隔</strong>。如果没有逗号，参数就串联在一起而无法区分。这里，逗号的作用与输出文件的分隔符的作用是一样的，只是后者是空格而已。</p><p><code>printf</code> 函数，其用法和 c 语言中 printf 基本相似,可以格式化字符串,输出复杂时，<code>printf</code> 更加好用，代码更易懂。</p><h1 id="awk编程"><a href="#awk编程" class="headerlink" title="awk编程"></a>awk编程</h1><h2 id="变量和赋值"><a href="#变量和赋值" class="headerlink" title="变量和赋值"></a>变量和赋值</h2><p>除了 <strong>awk</strong> 的内置变量，<strong>awk</strong> 还可以自定义变量。</p><p>示例：统计 ‘/etc/passwd’ 的账户人数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ awk <span class="hljs-string">&#x27;&#123;count++;print $0;&#125; END&#123;print &quot;user count is &quot;, count&#125;&#x27;</span> /etc/passwd<br>root:x:0:0:root:/root:/bin/bash<br>......<br>user count is  44<br></code></pre></td></tr></table></figure><p><code>count</code> 是自定义变量。之前的 <code>action&#123;&#125;</code> 里都是只有一个 <code>print,</code>其实 <code>print</code> 只是一个语句，而<strong>action{}可以有多个语句，以<code>;</code>号隔开</strong>。</p><p>这里没有初始化 <code>count</code>，虽然默认是0，但是妥当的做法还是初始化为0。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ awk <span class="hljs-string">&#x27;BEGIN &#123;count=0;print &quot;[start]user count is &quot;, count&#125; &#123;count=count+1;print $0;&#125; END&#123;print &quot;[end]user count is &quot;, count&#125;&#x27;</span> /etc/passwd<br>[start]user count is  0<br>root:x:0:0:root:/root:/bin/bash<br>......<br>[end]user count is  44<br></code></pre></td></tr></table></figure><p><strong>统计某个文件夹下的文件占用的字节数</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">pwd</span> <br>/tmp<br>$ ls -l | awk <span class="hljs-string">&#x27;BEGIN &#123;size=0;&#125; &#123;size=size+$5;&#125; END&#123;print &quot;[end]size is &quot;, size&#125;&#x27;</span> <span class="hljs-comment"># 以 byte 为单位</span><br>[end]size is  340835<br>$ ls -l |awk <span class="hljs-string">&#x27;BEGIN &#123;size=0;&#125; &#123;size=size+$5;&#125; END&#123;print &quot;[end]size is &quot;, size/1024/1024,&quot;M&quot;&#125;&#x27;</span>  <span class="hljs-comment"># 以 M 为单位</span><br>[end]size is  0.325046 M<br></code></pre></td></tr></table></figure><p><em>注意，统计不包括文件夹的子目录。</em></p><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><p><strong>awk</strong> 中的条件语句是从 C 语言中借鉴来的，见如下声明方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> (expression) &#123;<br>    statement;<br>    statement;<br>    ... ...<br>&#125;<br><br><span class="hljs-keyword">if</span> (expression) &#123;<br>    statement;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    statement2;<br>&#125;<br><br><span class="hljs-keyword">if</span> (expression) &#123;<br>    statement1;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (expression1) &#123;<br>    statement2;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    statement3;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>统计某个文件夹下的文件占用的字节数,过滤4096大小的文件(一般都是文件夹)</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">pwd</span><br>/tmp<br>$ ls -l | awk <span class="hljs-string">&#x27;BEGIN &#123;size=0;print &quot;[start]size is &quot;, size&#125; &#123;if($5!=4096)&#123;size=size+$5&#125;&#125; END&#123;print &quot;[end size is ]&quot;, size/1024/1024, &quot;M&quot;&#125;&#x27;</span><br>[start]size is  0<br>[end size is ] 0.286259 M<br></code></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p><strong>awk</strong>中的循环语句同样借鉴于 C 语言，支持 <code>while</code>、<code>do/while</code>、<code>for</code>、<code>break</code>、<code>continue</code>，这些关键字的语义和 C 语言中的语义完全相同。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>因为<strong>awk</strong>中数组的下标可以是数字和字母，数组的下标通常被称为关键字(key)。值和关键字都存储在内部的一张针对 <code>key/value</code> 应用<strong>hash</strong>的表格里。由于<strong>hash</strong>不是顺序存储，因此在显示数组内容时会发现，它们并不是按照你预料的顺序显示出来的。数组和变量一样，都是在使用时自动创建的，<strong>awk</strong>也同样会自动判断其存储的是数字还是字符串。一般而言，<strong>awk</strong>中的数组用来从记录中收集信息，可以用于计算总和、统计单词以及跟踪模板被匹配的次数等等。</p><p><strong>显示/etc/passwd的账户</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ awk -F <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;BEGIN &#123;count=0;&#125; &#123;name[count] = $1;count++;&#125;; END&#123;for (i = 0; i &lt; NR; i++) print i, name[i]&#125;&#x27;</span> /etc/passwd<br>0 root<br>1 daemon<br>2 bin<br>3 sys<br>4 sync<br>......<br></code></pre></td></tr></table></figure><p><em>这里使用for循环遍历数组</em></p><p>awk编程的内容极多，这里只罗列简单常用的用法，更多请参考 <a href="http://www.gnu.org/software/gawk/manual/gawk.html">http://www.gnu.org/software/gawk/manual/gawk.html</a></p><h2 id="重定向和管道"><a href="#重定向和管道" class="headerlink" title="重定向和管道"></a>重定向和管道</h2><ul><li><p>awk 可使用 shell 的重定向符进行重定向输出，如：<code>$ awk &#39;$1 = 100 &#123;print $1 &gt; &quot;output_file&quot; &#125;&#39; test</code>。上式表示如果第一个域的值等于100，则把它输出到output_file中。也可以用 <code>&gt;&gt;</code> 来重定向输出，但<strong>不清空文件，只做追加操作</strong>。</p></li><li><p>输出重定向需用到 <strong>getline</strong> 函数。<strong>getline</strong> 从标准输入、管道或者当前正在处理的文件之外的其他输入文件获得输入。它负责从输入获得下一行的内容，并给NF,NR和FNR等内建变量赋值。如果得到一条记录，<strong>getline</strong> 函数返回1，如果到达文件的末尾就返回0，如果出现错误，例如打开文件失败，就返回-1。如：</p><p><code>$ awk &#39;BEGIN&#123; &quot;date&quot; | getline d; print d&#125;&#39; test</code>。执行linux的date命令，并通过管道输出给 <strong>getline</strong>，然后再把输出赋值给自定义变量d，并打印它。</p><p><code>$ awk &#39;BEGIN&#123;&quot;date&quot; | getline d; split(d,mon); print mon[2]&#125;&#39; test</code>。执行shell的date命令，并通过管道输出给 <strong>getline</strong>，然后getline从管道中读取并将输入赋值给d，split函数把变量d转化成数组mon，然后打印数组mon的第二个元素。</p><p><code>$ awk &#39;BEGIN&#123;while( &quot;ls&quot; | getline) print&#125;&#39;</code>，命令 <code>ls</code> 的输出传递给 geline 作为输入，循环使getline从ls的输出中读取一行，并把它打印到屏幕。这里没有输入文件，因为 <strong>BEGIN</strong> 块在打开输入文件前执行，所以可以忽略输入文件。</p><p><code>$ awk &#39;BEGIN&#123;printf &quot;What is your name?&quot;; getline name &lt; &quot;/dev/tty&quot; &#125; $1 ~name &#123;print &quot;Found&quot; name on line &quot;, NR &quot;.&quot;&#125; END&#123;print &quot;See you,&quot; name &quot;.&quot;&#125; test</code>。在屏幕上打印”What is your name?”,并等待用户应答。当一行输入完毕后，getline函数从终端接收该行输入，并把它储存在自定义变量name中。如果第一个域匹配变量name的值，print函数就被执行，<strong>END</strong> 块打印See you和name的值。</p><p><code>$ awk &#39;BEGIN&#123;while (getline &lt; &quot;/etc/passwd&quot; &gt; 0) lc++; print lc&#125;&#39;</code>。awk将逐行读取文件/etc/passwd的内容，在到达文件末尾前，计数器lc一直增加，当到末尾时，打印lc的值。注意，如果文件不存在，getline返回-1，如果到达文件的末尾就返回0，如果读到一行，就返回1，所以命令 <code>while (getline &lt; &quot;/etc/passwd&quot;)</code>在文件不存在的情况下将陷入无限循环，因为返回-1表示逻辑真。</p></li><li><p>可以在awk中打开一个管道，且同一时刻只能有一个管道存在。通过close()可关闭管道。如：<code>$ awk &#39;&#123;print $1, $2 | &quot;sort&quot; &#125;&#39; test END &#123;close(&quot;sort&quot;)&#125;</code>。awd把print语句的输出通过管道作为linux命令sort的输入,END块执行关闭管道操作。</p></li><li><p><strong>system</strong>函数可以在awk中执行linux的命令。如：<code>$ awk &#39;BEGIN&#123;system(&quot;clear&quot;)&#39;</code>。</p></li><li><p><strong>fflush</strong>函数用以刷新输出缓冲区，如果没有参数，就刷新标准输出的缓冲区，如果以空字符串为参数，如<code>fflush(&quot;&quot;)</code>,则刷新所有文件和管道的输出缓冲区。</p></li></ul><h1 id="awk脚本"><a href="#awk脚本" class="headerlink" title="awk脚本"></a>awk脚本</h1><p>awk脚本是由<strong>模式</strong>和<strong>操作</strong>组成的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pattern &#123;action&#125; 如$ awk <span class="hljs-string">&#x27;/root/&#x27;</span> <span class="hljs-built_in">test</span>，或$ awk <span class="hljs-string">&#x27;$3 &lt; 100&#x27;</span> <span class="hljs-built_in">test</span>。<br></code></pre></td></tr></table></figure><p>两者是可选的，如果<strong>没有模式，则action应用到全部记录</strong>，如果<strong>没有action，则输出匹配全部记录</strong>。默认情况下，每一个输入行都是一条记录，但用户可通过<strong>RS</strong>变量指定不同的分隔符进行分隔。</p><h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><p>模式可以是以下任意一个：</p><ul><li>/正则表达式/：使用通配符的扩展集。</li><li>关系表达式：可以用下面运算符表中的关系运算符进行操作，可以是字符串或数字的比较，如$2&gt;%1选择第二个字段比第一个字段长的行。</li><li>模式匹配表达式：用运算符<del>(匹配)和</del>!(不匹配)。</li><li>模式，模式：<strong>指定一个行的范围</strong>。该语法不能包括BEGIN和END模式。</li><li>BEGIN：让用户指定<strong>在第一条输入记录被处理之前所发生的动作</strong>，通常可在这里设置全局变量。</li><li>END：让用户在最后一条输入记录被<strong>读取之后发生</strong>的动作。</li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>操作由一人或多个命令、函数、表达式组成，之间由换行符或分号隔开，并<strong>位于大括号内</strong>。主要有四部份：</p><ul><li>变量或数组赋值</li><li>输出命令</li><li>内置函数</li><li>控制流命令</li></ul><h1 id="awk的环境变量"><a href="#awk的环境变量" class="headerlink" title="awk的环境变量"></a>awk的环境变量</h1><table><thead><tr><th align="left">变量</th><th>描述</th></tr></thead><tbody><tr><td align="left">$n</td><td>当前记录的第n个字段，字段间由FS分隔。</td></tr><tr><td align="left">$0</td><td>完整的输入记录。</td></tr><tr><td align="left">ARGC</td><td>命令行参数的数目。</td></tr><tr><td align="left">ARGIND</td><td>命令行中当前文件的位置(从0开始算)。</td></tr><tr><td align="left">ARGV</td><td>包含命令行参数的数组。</td></tr><tr><td align="left">CONVFMT</td><td>数字转换格式(默认值为%.6g)</td></tr><tr><td align="left">ENVIRON</td><td>环境变量关联数组。</td></tr><tr><td align="left">ERRNO</td><td>最后一个系统错误的描述。</td></tr><tr><td align="left">FIELDWIDTHS</td><td>字段宽度列表(用空格键分隔)。</td></tr><tr><td align="left">FILENAME</td><td>当前文件名。</td></tr><tr><td align="left">FNR</td><td>同NR，但相对于当前文件。</td></tr><tr><td align="left">FS</td><td>字段分隔符(默认是任何空格)。</td></tr><tr><td align="left">IGNORECASE</td><td>如果为真，则进行忽略大小写的匹配。</td></tr><tr><td align="left">NF</td><td>当前记录中的字段数。</td></tr><tr><td align="left">NR</td><td>当前记录数。</td></tr><tr><td align="left">OFMT</td><td>数字的输出格式(默认值是%.6g)。</td></tr><tr><td align="left">OFS</td><td>输出字段分隔符(默认值是一个空格)。</td></tr><tr><td align="left">ORS</td><td>输出记录分隔符(默认值是一个换行符)。</td></tr><tr><td align="left">RLENGTH</td><td>由match函数所匹配的字符串的长度。</td></tr><tr><td align="left">RS</td><td>记录分隔符(默认是一个换行符)。</td></tr><tr><td align="left">RSTART</td><td>由match函数所匹配的字符串的第一个位置。</td></tr><tr><td align="left">SUBSEP</td><td>数组下标分隔符(默认值是\034)。</td></tr></tbody></table><h1 id="awk运算符"><a href="#awk运算符" class="headerlink" title="awk运算符"></a>awk运算符</h1><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>= += -= *= /= %= ^= **=</td><td>赋值</td></tr><tr><td>?:</td><td>C条件表达式</td></tr><tr><td>||</td><td>逻辑或</td></tr><tr><td>&amp;&amp;</td><td>逻辑与</td></tr><tr><td>~ ~!</td><td>匹配正则表达式和不匹配正则表达式</td></tr><tr><td>&lt; &lt;= &gt; &gt;= != ==</td><td>关系运算符</td></tr><tr><td>空格</td><td>连接</td></tr><tr><td>+ -</td><td>加，减</td></tr><tr><td>* / &amp;</td><td>乘，除与求余</td></tr><tr><td>+ - !</td><td>一元加，减和逻辑非</td></tr><tr><td>^ ***</td><td>求幂</td></tr><tr><td>++ –</td><td>增加或减少，作为前缀或后缀</td></tr><tr><td>$</td><td>字段引用</td></tr><tr><td>in</td><td>数组成员</td></tr></tbody></table><h1 id="记录和域"><a href="#记录和域" class="headerlink" title="记录和域"></a>记录和域</h1><h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><p>awk把<strong>每一个以换行符结束的行称为一个记录</strong>。</p><p>记录分隔符：默认的输入和输出的分隔符都是<strong>回车</strong>，保存在内建变量<code>ORS</code>和<code>RS</code>中。</p><h2 id="域"><a href="#域" class="headerlink" title="域"></a>域</h2><p><strong>记录中每个单词称做“域”</strong>，默认情况下以空格或tab分隔。awk可跟踪域的个数，并在内建变量<code>NF</code>中保存该值。如$ awk ‘{print $1,$3}’ test将打印test文件中第一和第三个以空格分开的列(域)。</p><h2 id="域分隔符"><a href="#域分隔符" class="headerlink" title="域分隔符"></a>域分隔符</h2><p>内建变量<code>FS</code>保存输入域分隔符的值，默认是<em>空格 或 tab</em>。我们可以通过<code>-F</code>命令行选项修改<code>FS</code>的值。如<code>$ awk -F: &#39;&#123;print $1,$5&#125;&#39; test</code>将打印以冒号为分隔符的第一，第五列的内容。</p><p>可以同时使用多个域分隔符，这时应该把分隔符写成放到方括号中，如<code>$awk -F&#39;[:\t]&#39; &#39;&#123;print $1,$3&#125;&#39; test</code>，表示以空格、冒号和tab作为分隔符。</p><p>输出域的分隔符默认是一个空格，保存在<code>OFS</code>中。如<code>$ awk -F: &#39;&#123;print $1,$5&#125;&#39; test</code>，$1和$5间的逗号就是OFS的值。</p><h1 id="gawk专用正则表达式元字符"><a href="#gawk专用正则表达式元字符" class="headerlink" title="gawk专用正则表达式元字符"></a>gawk专用正则表达式元字符</h1><p>以下几个是gawk专用的，不适合unix版本的awk。</p><p>\Y    匹配一个单词开头或者末尾的空字符串。</p><p>\B    匹配单词内的空字符串。</p><p>\&lt;    匹配一个单词的开头的空字符串，锚定开始。</p><p>\&gt;    匹配一个单词的末尾的空字符串，锚定末尾。</p><p>\w    匹配一个字母数字组成的单词。</p><p>\W    匹配一个非字母数字组成的单词。</p><p>\‘    匹配字符串开头的一个空字符串。</p><p>\‘    匹配字符串末尾的一个空字符串。</p><h1 id="awk的内建函数"><a href="#awk的内建函数" class="headerlink" title="awk的内建函数"></a>awk的内建函数</h1><h2 id="字符串内建函数"><a href="#字符串内建函数" class="headerlink" title="字符串内建函数"></a>字符串内建函数</h2><ul><li><strong>sub</strong> 函数匹配记录中最大、最靠左边的子字符串正则表达式，并用替换字符串替换这些字符串。如果没有指定目标字符串就默认使用整个记录。替换只发生在第一次匹配的时候。格式如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sub （regular expression, substitution string）:<br>sub (regular expression, substitution string, target string)<br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ awk <span class="hljs-string">&#x27;&#123;sub(/test/, &quot;mytest&quot;); print&#125;&#x27;</span> testfile<br>$ awk <span class="hljs-string">&#x27;&#123;sub(/test/, &quot;mytest&quot;, $1); print&#125;&#x27;</span> testfile<br></code></pre></td></tr></table></figure><p>第一个例子在整个记录中匹配，替换只发生在第一次匹配发生的时候。如要在整个文件中进行匹配需要用到 <strong>gsub</strong></p><p>第二个例子在整个记录的第一个域中进行匹配，替换只发生在第一次匹配发生的时候。</p><ul><li><p><strong>gsub</strong> 函数作用如 <strong>sub</strong>，但它在整个文档中进行匹配。格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gsub (regular expression, substitution string)<br>gsub (regular expression, substitution string, target string)<br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ awk <span class="hljs-string">&#x27;&#123; gsub(/test/, &quot;mytest&quot;); print &#125;&#x27;</span> testfile<br>$ awk <span class="hljs-string">&#x27;&#123; gsub(/test/, &quot;mytest&quot; , $1) &#125;; print &#125;&#x27;</span> testfile<br></code></pre></td></tr></table></figure><p>第一个例子在整个文档中匹配 test，匹配的都被替换成 mytest。</p><p>第二个例子在整个文档的第一个域中匹配，所有匹配的都被替换成mytest。</p></li><li><p><strong>index</strong> 函数返回子字符串第一次被匹配的位置，偏移量从位置1开始。格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">index(string, substring)<br></code></pre></td></tr></table></figure><p>实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ awk <span class="hljs-string">&#x27;&#123; print index(&quot;test&quot;, &quot;mytest&quot;) &#125;&#x27;</span> testfile<br></code></pre></td></tr></table></figure><p>实例返回 test 在 mytest 的位置。</p></li><li><p><strong>length</strong> 函数返回记录的字符数。格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">length( string )<br>length<br></code></pre></td></tr></table></figure><p>实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ awk <span class="hljs-string">&#x27;&#123; print length( &quot;test&quot; ) &#125;&#x27;</span> <br>$ awk <span class="hljs-string">&#x27;&#123; print length &#125;&#x27;</span> testfile<br></code></pre></td></tr></table></figure><p>第一个实例返回 test 字符串的长度。</p><p>第二个实例返回 testfile 文件中<strong>第条记录</strong>的字符数。</p></li><li><p><strong>substr</strong> 函数返回从位置1开始的子字符串，如果指定长度超过实际长度，就返回整个字符串。格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">substr( string, starting position )<br>substr( string, starting position, length of string )<br></code></pre></td></tr></table></figure><p>实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ awk <span class="hljs-string">&#x27;&#123; print substr( &quot;hello world&quot;, 7,11 ) &#125;&#x27;</span> <br></code></pre></td></tr></table></figure><p>上例截取了 world 子字符串。</p></li><li><p><strong>match</strong> 函数返回在字符串中正则表达式位置的<strong>索引</strong>，如果找不到指定的正则表达式则返回0。match函数会设置内建变量 <strong>RSTART</strong> 为字符串中子字符串的开始位置，<strong>RLENGTH</strong> 为到子字符串末尾的字符个数。<strong>substr</strong> 可利于这些变量来截取字符串。函数格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">match( string, regular expression )<br></code></pre></td></tr></table></figure><p>实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ awk <span class="hljs-string">&#x27;&#123;start=match(&quot;this is a test&quot;,/[a-z]+$/); print start&#125;&#x27;</span><br>$ awk <span class="hljs-string">&#x27;&#123;start=match(&quot;this is a test&quot;,/[a-z]+$/); print start, RSTART, RLENGTH &#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>第一个实例打印以连续小写字符结尾的开始位置，这里是11。</p><p>第二个实例还打印 <strong>RSTART</strong> 和 <strong>RLENGTH</strong> 变量，这里是11(start)，11(RSTART)，4(RLENGTH)。</p></li><li><p><strong>toupper</strong> 和<strong>tolower</strong> 函数可用于字符串大小间的转换，该功能只在 <strong>gawk</strong> 中有效。格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">toupper( string )<br>tolower( string )<br></code></pre></td></tr></table></figure><p>实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ awk <span class="hljs-string">&#x27;&#123; print toupper(&quot;test&quot;), tolower(&quot;TEST&quot;) &#125;&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>split</strong> 函数可按给定的分隔符把字符串分割为一个数组。如果分隔符没提供，则按当前 <strong>FS</strong> 值进行分割。格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">split( string, array, field separator )<br>split( string, array )<br></code></pre></td></tr></table></figure><p>实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ awk <span class="hljs-string">&#x27;&#123; split( &quot;20:18:00&quot;, time, &quot;:&quot; ); print time[2] &#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>上例把时间按冒号分割到time数组内，并显示第二个数组元素18。</p></li></ul><h2 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h2><ul><li><p><strong>systime</strong> 函数返回从1970年1月1日开始到当前时间(不计闰年)的整秒数。格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systime()<br></code></pre></td></tr></table></figure><p>实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ awk <span class="hljs-string">&#x27;&#123; now = systime(); print now &#125;&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>strftime</strong> 函数使用C库中的strftime函数格式化时间。格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systime( [format specification][,timestamp] )<br></code></pre></td></tr></table></figure></li></ul><p>​                                            <strong>日期和时间格式说明符</strong></p><table><thead><tr><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>%a</td><td>星期几的缩写(Sun)</td></tr><tr><td>%A</td><td>星期几的完整写法(Sunday)</td></tr><tr><td>%b</td><td>月名的缩写(Oct)</td></tr><tr><td>%B</td><td>月名的完整写法(October)</td></tr><tr><td>%c</td><td>本地日期和时间</td></tr><tr><td>%d</td><td>十进制日期</td></tr><tr><td>%D</td><td>日期 08/20/99</td></tr><tr><td>%e</td><td>日期，如果只有一位会补上一个空格</td></tr><tr><td>%H</td><td>用十进制表示24小时格式的小时</td></tr><tr><td>%I</td><td>用十进制表示12小时格式的小时</td></tr><tr><td>%j</td><td>从1月1日起一年中的第几天</td></tr><tr><td>%m</td><td>十进制表示的月份</td></tr><tr><td>%M</td><td>十进制表示的分钟</td></tr><tr><td>%p</td><td>12小时表示法(AM/PM)</td></tr><tr><td>%S</td><td>十进制表示的秒</td></tr><tr><td>%U</td><td>十进制表示的一年中的第几个星期(星期天作为一个星期的开始)</td></tr><tr><td>%w</td><td>十进制表示的星期几(星期天是0)</td></tr><tr><td>%W</td><td>十进制表示的一年中的第几个星期(星期一作为一个星期的开始)</td></tr><tr><td>%x</td><td>重新设置本地日期(08/20/99)</td></tr><tr><td>%X</td><td>重新设置本地时间(12：00：00)</td></tr><tr><td>%y</td><td>两位数字表示的年(99)</td></tr><tr><td>%Y</td><td>当前月份</td></tr><tr><td>%Z</td><td>时区(PDT)</td></tr><tr><td>%%</td><td>百分号(%)</td></tr></tbody></table><p><strong>实例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ awk <span class="hljs-string">&#x27;&#123; now=strftime( &quot;%D&quot;, systime() ); print now &#125;&#x27;</span><br>$ awk <span class="hljs-string">&#x27;&#123; now=strftime(&quot;%m/%d/%y&quot;); print now &#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="内建数学函数"><a href="#内建数学函数" class="headerlink" title="内建数学函数"></a>内建数学函数</h2><table><thead><tr><th>函数名称</th><th>返回值</th></tr></thead><tbody><tr><td>atan2(x,y)</td><td>y,x范围内的余切</td></tr><tr><td>cos(x)</td><td>余弦函数</td></tr><tr><td>exp(x)</td><td>求幂</td></tr><tr><td>int(x)</td><td>取整</td></tr><tr><td>log(x)</td><td>自然对数</td></tr><tr><td>rand()</td><td>随机数</td></tr><tr><td>sin(x)</td><td>正弦</td></tr><tr><td>sqrt(x)</td><td>平方根</td></tr><tr><td>srand(x)</td><td>x是rand()函数的种子</td></tr><tr><td>int(x)</td><td>取整，过程没有舍入</td></tr><tr><td>rand()</td><td>产生一个大于等于0而小于1的随机数</td></tr></tbody></table><h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><p>在 <strong>awk</strong> 中还可自定义函数，格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> name ( parameter, parameter, parameter, ... ) &#123;<br>statements<br><span class="hljs-built_in">return</span> expression<span class="hljs-comment"># the return statement and expression are optional</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h1><ul><li><strong>统计nginx 日志单 ip 访问请求数排名钱5名</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># awk 循环计算，相同IP数量++，最后打印；sort `-n`按照数字排序，`-r`倒序，`-k2` 以第二个域的排序；head -n 5 打印前5条</span><br>$ awk <span class="hljs-string">&#x27;&#123;S[$1]++&#125; END &#123;for(a in S) print a, S[a]&#125;&#x27;</span> <span class="hljs-built_in">log</span>/access.log |sort -rn -k 2 |head -n5<br>192.168.15.66 51<br>192.168.15.77 10<br>192.168.22.65 5<br>192.168.12.48 2<br>192.168.22.36 1<br></code></pre></td></tr></table></figure><ul><li><strong>统计服务器当前单IP连接数最大的IP地址前十</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># `netstat -an` 直接显示所有连线中的网络IP地址；`awk -F &#x27;[ :]+&#x27; &#x27;&#123;++S[$6]&#125; END &#123;for (key in S) print &quot;ip:&quot;key&quot;-----&gt;&quot;,S[key]&#125;&#x27;` 循环输出第六个域（Foreign Address）和出现次数；`sort -rn -k2` 对第二个域倒序排序（即对IP出现次数倒序排序）；`head` 默认打印 10 行</span><br>$ netstat -an |grep EST |awk -F <span class="hljs-string">&#x27;[ :]+&#x27;</span> <span class="hljs-string">&#x27;&#123;++S[$6]&#125; END &#123;for (key in S) print &quot;ip:&quot;key&quot;-----&gt;&quot;,S[key]&#125;&#x27;</span> |sort -rn -k2 |head<br>ip:192.168.13.235-----&gt; 69<br>ip:192.168.13.204-----&gt; 66<br>ip:192.168.13.229-----&gt; 21<br>ip:192.168.15.63-----&gt; 5<br>ip:192.168.15.37-----&gt; 5<br>ip:192.168.15.36-----&gt; 4<br>ip:192.168.15.77-----&gt; 2<br></code></pre></td></tr></table></figure><ul><li><strong>处理以下文件内容,将域名取出并根据域名进行计数排序处理</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cat test.log <br>http://www.etiantian.org/index.html<br>http://www.etiantian.org/1.html<br>http://post.etiantian.org/index.html<br>http://mp3.etiantian.org/index.html<br>http://www.etiantian.org/3.html<br>http://post.etiantian.org/2.html<br><span class="hljs-comment"># ①`awk -F &quot;/&quot; &#x27;&#123;print $3&#125;&#x27; test.log`：以‘/’分隔每一行，输出第三个域；`sort` 默认排序；`uniq -c`：报告或忽略文件中的重复行，在每列旁边显示该行重复出现的次数；</span><br>$ awk -F <span class="hljs-string">&quot;/&quot;</span> <span class="hljs-string">&#x27;&#123;print $3&#125;&#x27;</span> test.log |sort |uniq -c <br>1 mp3.etiantian.org<br>2 post.etiantian.org<br>3 www.etiantian.org<br><span class="hljs-comment"># ②`sed &#x27;s#^http://##g&#x27; test.log`：编辑缓冲区，将‘http://’替换为空字符；`sed &#x27;s#/.*##g&#x27;`：将‘/’之后的内容变为空字符；`sort` 默认排序；`uniq -c`：报告或忽略文件中的重复行，在每列旁边显示该行重复出现的次数；</span><br>$ sed <span class="hljs-string">&#x27;s#^http://##g&#x27;</span> test.log|sed <span class="hljs-string">&#x27;s#/.*##g&#x27;</span>|sort |uniq -c<br>1 mp3.etiantian.org<br>2 post.etiantian.org<br>3 www.etiantian.org<br><span class="hljs-comment"># ③以‘/’分隔每行；以第三个域作为数组键值，相同键值++；循环输出数组内容</span><br>$ awk -F <span class="hljs-string">&quot;/&quot;</span> <span class="hljs-string">&#x27;&#123;++S[$3]&#125; END &#123;for(key in S) print S[key],key&#125;&#x27;</span> test.log<br>1 mp3.etiantian.org<br>3 www.etiantian.org<br>2 post.etiantian.org<br><span class="hljs-comment"># ④ 这行命令与方法①类似，关键在于 `-F &#x27;[:/]+&#x27;` 这里的正则所表达的含义</span><br>$ awk -F <span class="hljs-string">&#x27;[:/]+&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> test.log |sort |uniq -c<br>      1 mp3.etiantian.org<br>      2 post.etiantian.org<br>      3 www.etiantian.org<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell-流编辑sed</title>
    <link href="/2019/05/28/shell/shell-%E6%B5%81%E7%BC%96%E8%BE%91sed/"/>
    <url>/2019/05/28/shell/shell-%E6%B5%81%E7%BC%96%E8%BE%91sed/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是-sed"><a href="#什么是-sed" class="headerlink" title="什么是 sed"></a>什么是 sed</h1><p><strong>sed</strong> 是一种流编辑器，它是文本处理中非常中的工具，能够完美的配合正则表达式使用，功能不同凡响。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash">说明：功能强大的流式文本编辑器<br>用法: sed [选项]... &#123;脚本(如果没有其他脚本)&#125; [输入文件]...<br><br>  -n, --quiet, --silent<br>                 取消自动打印模式空间<br>  -e 脚本, --expression=脚本<br>                 添加“脚本”到程序的运行列表<br>  -f 脚本文件, --file=脚本文件<br>                 添加“脚本文件”到程序的运行列表<br>  --follow-symlinks<br>                 直接修改文件时跟随软链接<br>  -i[SUFFIX], --in-place[=SUFFIX]<br>                 edit files <span class="hljs-keyword">in</span> place (makes backup <span class="hljs-keyword">if</span> SUFFIX supplied)<br>  -l N, --line-length=N<br>                 指定“l”命令的换行期望长度<br>  --posix<br>                 关闭所有 GNU 扩展<br>  -E, -r, --regexp-extended<br>                 use extended regular expressions <span class="hljs-keyword">in</span> the script<br>                 (<span class="hljs-keyword">for</span> portability use POSIX -E).<br>  -s, --separate<br>                 consider files as separate rather than as a single,<br>                 continuous long stream.<br>      --sandbox<br>                 operate <span class="hljs-keyword">in</span> sandbox mode.<br>  -u, --unbuffered<br>                 从输入文件读取最少的数据，更频繁的刷新输出<br>  -z, --null-data<br>                 separate lines by NUL characters<br>      --<span class="hljs-built_in">help</span>     打印帮助并退出<br>      --version  输出版本信息并退出<br><br>如果没有 -e, --expression, -f 或 --file 选项，那么第一个非选项参数被视为<br>sed脚本。其他非选项参数被视为输入文件，如果没有输入文件，那么程序将从标准<br>输入读取数据。<br>GNU sed home page: &lt;http://www.gnu.org/software/sed/&gt;.<br>General <span class="hljs-built_in">help</span> using GNU software: &lt;http://www.gnu.org/gethelp/&gt;.<br>E-mail bug reports to: &lt;bug-sed@gnu.org&gt;.<br><br></code></pre></td></tr></table></figure><h1 id="sed示例"><a href="#sed示例" class="headerlink" title="sed示例"></a>sed示例</h1><h2 id="sed工作方式"><a href="#sed工作方式" class="headerlink" title="sed工作方式"></a>sed工作方式</h2><p><code>sed</code> 通过对输入数据执行任意数量用户指定的编辑操作（命令）。<code>sed</code> 是基于行的，因此按顺序对每一行执行命令。然后将其结果写入标准输出。</p><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ head -n10 /etc/passwd &gt; /tmp/passwd.bak <span class="hljs-comment"># 将 /etc/passwd 文件的头10行复制到 /tmp/passwd.bak 文件中</span><br>$ cat /tmp/passwd.bak <span class="hljs-comment"># 查看 /tmp/passwd.bak 文件内容</span><br>root:x:0:0:root:/root:/bin/bash<br>daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin<br>bin:x:2:2:bin:/bin:/usr/sbin/nologin<br>sys:x:3:3:sys:/dev:/usr/sbin/nologin<br>sync:x:4:65534:sync:/bin:/bin/sync<br>games:x:5:60:games:/usr/games:/usr/sbin/nologin<br>man:x:6:12:man:/var/cache/man:/usr/sbin/nologin<br>lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin<br>mail:x:8:8:mail:/var/mail:/usr/sbin/nologin<br>news:x:9:9:news:/var/spool/news:/usr/sbin/nologin<br>$ sed -e <span class="hljs-string">&#x27;d&#x27;</span> /tmp/passwd.bak <span class="hljs-comment"># 删除缓冲区中每一行，输出为空</span><br>$ sed -e <span class="hljs-string">&#x27;5d&#x27;</span> /tmp/passwd.bak <span class="hljs-comment"># 删除缓冲区中第5行，输出结果</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong></p><p>在上述示例中：</p><p>1）根本没有修改 <code>/tmp/passwd.bak</code> 文件</p><p>2）<code>sed</code> 是面向行的，即 <code>sed</code> 对给定的缓冲区数据是一行一行进行处理的</p><p>3）养成使用单引号括起 <code>sed</code> 命令的习惯，这样可以禁用 shell 扩展</p><h2 id="sed工作的地址范围"><a href="#sed工作的地址范围" class="headerlink" title="sed工作的地址范围"></a>sed工作的地址范围</h2><p><strong>工作范围</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sed -e <span class="hljs-string">&#x27;1,5d&#x27;</span> /tmp/passwd.bak<br>games:x:5:60:games:/usr/games:/usr/sbin/nologin<br>man:x:6:12:man:/var/cache/man:/usr/sbin/nologin<br>lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin<br>mail:x:8:8:mail:/var/mail:/usr/sbin/nologin<br>news:x:9:9:news:/var/spool/news:/usr/sbin/nologin<br></code></pre></td></tr></table></figure><p><code>/tmp/passwd.bak</code> 一共10行数据，这里通过给 <code>sed</code> 传递  <code> &#39;1,5d&#39;</code> ，其中 <code>d</code> 是删除命令，作用与 1到5行。因此这条命令作用就是删除这个文件缓冲区的第一到第五行。</p><p><strong>忽略注释</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cat /etc/rc.local <span class="hljs-comment"># 注释1</span><br><span class="hljs-comment">#!/bin/sh -e</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># rc.local</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># This script is executed at the end of each multiuser runlevel.</span><br><span class="hljs-comment"># Make sure that the script will &quot;exit 0&quot; on success or any other</span><br><span class="hljs-comment"># value on error.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># In order to enable or disable this script just change the execution</span><br><span class="hljs-comment"># bits.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># By default this script does nothing.</span><br><br>service php-fpm start<br>service mysql start<br>service nginx start<br><br><span class="hljs-built_in">exit</span> 0<br>$ sed -e <span class="hljs-string">&#x27;/^#/d&#x27;</span> /etc/rc.local <span class="hljs-comment"># 注释2</span><br><br>service php-fpm start<br>service mysql start<br>/usr/<span class="hljs-built_in">local</span>/nginx/sbin/nginx<br><br><span class="hljs-built_in">exit</span> 0<br></code></pre></td></tr></table></figure><p>注释1：查看 <code>/etc/rc.local</code> 文件克制，文件中包含注释（以 <code>#</code> 开头的行）、空格和寻常命令；注释2：成功删除所有注释信息。</p><p>删除注册的关键在于规则表达式 <code>&#39;/^#/&#39;</code>，<code>&#39;/^#/&#39;</code> 表示以’#‘开头的行，通过 ’d‘ 命令删除该行。</p><p>​                                          <strong>sed 中使用的规则表达式字符</strong></p><table><thead><tr><th align="center">字符</th><th>描述</th></tr></thead><tbody><tr><td align="center">^</td><td>行首匹配</td></tr><tr><td align="center">$</td><td>行尾匹配</td></tr><tr><td align="center">.</td><td>任一字符匹配</td></tr><tr><td align="center">*</td><td>与前一个字符的零个或多个匹配</td></tr><tr><td align="center">[]</td><td>与 [] 之内的所有字符匹配</td></tr></tbody></table><p>​                                      <strong>sed 中的规则表达式实例</strong></p><table><thead><tr><th align="center">规则表达式</th><th>描述</th></tr></thead><tbody><tr><td align="center">/./</td><td>将与包含至少一个字符的任何行匹配</td></tr><tr><td align="center">/../</td><td>将与包含至少两个字符的任何行匹配</td></tr><tr><td align="center">/^#/</td><td>将与以 ’#‘ 开头的任意行匹配，通常这是注释</td></tr><tr><td align="center">/^$/</td><td>将与所有空行匹配</td></tr><tr><td align="center">/}^/</td><td>将与 ’}‘ 结束的任意行匹配</td></tr><tr><td align="center">/} *^/</td><td>注意在 ’}‘ 后面有一个空格，这将与 ’}‘ 后面跟随零个或多个空格结束的任意行匹配</td></tr><tr><td align="center">/[abc]/</td><td>将与包含小写字母 ’a‘ 或 ’b‘ 或 ’c‘ 的任意行匹配</td></tr><tr><td align="center">/^[abc]/</td><td>将与以 ’a‘ 或 ’b‘ 或 ’c‘ 开始的任意行匹配</td></tr></tbody></table><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sed -e <span class="hljs-string">&#x27;/^#/d&#x27;</span> /etc/rc.local <span class="hljs-comment"># 删除缓冲区所有注释行</span><br><br>service php-fpm start<br>service mysql start<br>/usr/<span class="hljs-built_in">local</span>/nginx/sbin/nginx<br><br><span class="hljs-built_in">exit</span> 0<br>$ sed -n -e <span class="hljs-string">&#x27;/^#/p&#x27;</span> /etc/rc.local <span class="hljs-comment"># 显示缓冲区所有注释行</span><br><span class="hljs-comment">#!/bin/sh -e</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># rc.local</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># This script is executed at the end of each multiuser runlevel.</span><br><span class="hljs-comment"># Make sure that the script will &quot;exit 0&quot; on success or any other</span><br><span class="hljs-comment"># value on error.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># In order to enable or disable this script just change the execution</span><br><span class="hljs-comment"># bits.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># By default this script does nothing.</span><br><span class="hljs-comment">#/etc/init.d/nginx start</span><br>$ sed -e <span class="hljs-string">&#x27;/^[^#]/d&#x27;</span> /etc/rc.local <span class="hljs-comment"># 删除不是以 # 号开头的行（空行没有被删除）</span><br><span class="hljs-comment">#!/bin/sh -e</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># rc.local</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># This script is executed at the end of each multiuser runlevel.</span><br><span class="hljs-comment"># Make sure that the script will &quot;exit 0&quot; on success or any other</span><br><span class="hljs-comment"># value on error.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># In order to enable or disable this script just change the execution</span><br><span class="hljs-comment"># bits.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># By default this script does nothing.</span><br><br><span class="hljs-comment">#/etc/init.d/nginx start</span><br><br></code></pre></td></tr></table></figure><h1 id="更强大的-sed-功能"><a href="#更强大的-sed-功能" class="headerlink" title="更强大的 sed 功能"></a>更强大的 sed 功能</h1><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><p>与上面打印、删除文本行不同的是，<code>sed</code> 的替换命令可以将文本流中的摸个字符串全部替换成另一个字符串。</p><p><strong>使用 sed 替换文本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cat demo.c <br><span class="hljs-comment"># include &lt;stdio.h&gt;</span><br><span class="hljs-comment"># include &lt;math.h&gt;</span><br><br>long int power(int, int);<br><br>int <span class="hljs-function"><span class="hljs-title">main</span></span>() &#123;<br>    int base, n;<br>    scanf(<span class="hljs-string">&quot;%d, %d\n&quot;</span>, &amp;base, &amp;n);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The power is: %d\n&quot;</span>, power(base, n));<br>&#125;<br><br>long int power(int base, int n) <br>&#123;<br>    <span class="hljs-built_in">return</span> base^n;<br>&#125;<br>$ sed -e <span class="hljs-string">&#x27;s/power/aurora/g&#x27;</span> /tmp/demo.c<br><span class="hljs-comment"># include &lt;stdio.h&gt;</span><br><span class="hljs-comment"># include &lt;math.h&gt;</span><br><br>long int aurora(int, int); <span class="hljs-comment"># power</span><br><br>int <span class="hljs-function"><span class="hljs-title">main</span></span>() &#123;<br>    int base, n;<br>    scanf(<span class="hljs-string">&quot;%d, %d\n&quot;</span>, &amp;base, &amp;n);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The aurora is: %d\n&quot;</span>, aurora(base, n)); <span class="hljs-comment"># power</span><br>&#125;<br><br>long int aurora(int base, int n)  <span class="hljs-comment"># power</span><br>&#123;<br>    <span class="hljs-built_in">return</span> base^n;<br>&#125;<br>$<br></code></pre></td></tr></table></figure><p>在上述例子中使用了命令 <code>&#39;s/power/aurora/g&#39;</code>。命令全局查找文件 <code>demo.c</code> 中的 ’power‘ 关键爱你字符串，替换为 ’aurora‘。其中 <code>s</code> 是替换命令，<code>g</code> 告诉 <code>sed</code></p><p>执行全局查找替换。</p><p><strong>地址范围+替换操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sed -e <span class="hljs-string">&#x27;1,10s/power/aurora/g&#x27;</span> /tmp/demo.c <span class="hljs-comment"># 替换1到10行中的所有power</span><br><span class="hljs-comment"># include &lt;stdio.h&gt;</span><br><span class="hljs-comment"># include &lt;math.h&gt;</span><br><br>long int aurora(int, int);<span class="hljs-comment"># 此处被替换</span><br><br>int <span class="hljs-function"><span class="hljs-title">main</span></span>() &#123;<br>    int base, n;<br>    scanf(<span class="hljs-string">&quot;%d, %d\n&quot;</span>, &amp;base, &amp;n);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The aurora is: %d\n&quot;</span>, aurora(base, n)); <span class="hljs-comment"># 此处被替换</span><br>&#125;<br><br>long int power(int base, int n) <span class="hljs-comment"># 此处没被替换</span><br>&#123;<br>    <span class="hljs-built_in">return</span> base^n;<br>&#125;<br>$ sed -e <span class="hljs-string">&#x27;/main[[:space:]]*(/,/^)/s/power/aurora/g&#x27;</span> /tmp/demo.c <span class="hljs-comment"># 替换 main 函数中所有 power（没起作用，后面的 power都被替换了）</span><br><span class="hljs-comment"># include &lt;stdio.h&gt;</span><br><span class="hljs-comment"># include &lt;math.h&gt;</span><br><br>long int power(int, int);<br><br>int <span class="hljs-function"><span class="hljs-title">main</span></span>() &#123;<br>    int base, n;<br>    scanf(<span class="hljs-string">&quot;%d, %d\n&quot;</span>, &amp;base, &amp;n);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The aurora is: %d\n&quot;</span>, aurora(base, n)); <span class="hljs-comment"># 此处被替换</span><br>&#125;<br><br>long int aurora(int base, int n) <span class="hljs-comment"># 此处被替换</span><br>&#123;<br>    <span class="hljs-built_in">return</span> base^n;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="组合命令的使用"><a href="#组合命令的使用" class="headerlink" title="组合命令的使用"></a>组合命令的使用</h2><p>有些时候可能需要将多条命令应用到同一行中，这就需要将命令组合使用。</p><p>最简单的组合命令方法是使用分号分隔命令，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cat /tmp/passwd.bak<br>root:x:0:0:root:/root:/bin/bash<br>daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin<br>bin:x:2:2:bin:/bin:/usr/sbin/nologin<br>sys:x:3:3:sys:/dev:/usr/sbin/nologin<br>sync:x:4:65534:sync:/bin:/bin/sync<br>games:x:5:60:games:/usr/games:/usr/sbin/nologin<br>man:x:6:12:man:/var/cache/man:/usr/sbin/nologin<br>lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin<br>mail:x:8:8:mail:/var/mail:/usr/sbin/nologin<br>news:x:9:9:news:/var/spool/news:/usr/sbin/nologin<br>$ sed -n -e <span class="hljs-string">&#x27;=;p&#x27;</span> /tmp/passwd.bak<br>1<br>root:x:0:0:root:/root:/bin/bash<br>2<br>daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin<br>3<br>bin:x:2:2:bin:/bin:/usr/sbin/nologin<br>4<br>sys:x:3:3:sys:/dev:/usr/sbin/nologin<br>5<br>sync:x:4:65534:sync:/bin:/bin/sync<br>6<br>games:x:5:60:games:/usr/games:/usr/sbin/nologin<br>7<br>man:x:6:12:man:/var/cache/man:/usr/sbin/nologin<br>8<br>lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin<br>9<br>mail:x:8:8:mail:/var/mail:/usr/sbin/nologin<br>10<br>news:x:9:9:news:/var/spool/news:/usr/sbin/nologin<br></code></pre></td></tr></table></figure><p>这个命令分为两部分，一部分是等号（=），一部分是 ‘p’ 命令。命令之间使用分号（;）隔开。等号命令告诉 <code>sed</code> 打印行号，‘p’  命令告诉 <code>sed</code> 打印该行。</p><p>如果你不想通过分号来组合多个命令，也可以通过一个 <code>-e</code> 来连接一个命令，那么上面的命令等同于 <code>sed -n -e &#39;=&#39; -e &#39;p&#39; /tmp/passwd.bak</code>。</p><p>如果我们要执行多条命令，甚至 <code>-e</code> 命令也不够使用时，可以将命令写入一个文本文件中，然后通过 <code>-f</code> 参数引用命令，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cat handle.sed<br>1d<br>s:sbin/nologin:bin/zsg:g<br>p<br>$ cat passwd.bak <br>root:x:0:0:root:/root:/bin/bash<br>daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin<br>bin:x:2:2:bin:/bin:/usr/sbin/nologin<br>sys:x:3:3:sys:/dev:/usr/sbin/nologin<br>sync:x:4:65534:sync:/bin:/bin/sync<br>games:x:5:60:games:/usr/games:/usr/sbin/nologin<br>man:x:6:12:man:/var/cache/man:/usr/sbin/nologin<br>lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin<br>mail:x:8:8:mail:/var/mail:/usr/sbin/nologin<br>news:x:9:9:news:/var/spool/news:/usr/sbin/nologin<br>$ sed -n -f handle.sed /tmp/passwd.bak<br>daemon:x:1:1:daemon:/usr/sbin:/usr/bin/zsg<br>bin:x:2:2:bin:/bin:/usr/bin/zsg<br>sys:x:3:3:sys:/dev:/usr/bin/zsg<br>sync:x:4:65534:sync:/bin:/bin/sync<br>games:x:5:60:games:/usr/games:/usr/bin/zsg<br>man:x:6:12:man:/var/cache/man:/usr/bin/zsg<br>lp:x:7:7:lp:/var/spool/lpd:/usr/bin/zsg<br>mail:x:8:8:mail:/var/mail:/usr/bin/zsg<br>news:x:9:9:news:/var/spool/news:/usr/bin/zsg<br></code></pre></td></tr></table></figure><p>这个例子中，sed 要执行的命令写入<code>handle.sed</code> 文件中，文件中 3 行分别表示：</p><p>1）<code>1d</code> 告诉 <strong>sed</strong> 删除 passwd.bak 文件的第一行</p><p>2）<code>s:sbin/nologin:bin/zsg:g</code> 替换命令，将 ‘sbin/nologin’ 替换为 <code>bin/zsg</code>。由于替换内容中有 ‘/’ 符号，因此在 “s///” 命令中，这里使用 ‘:’代替‘/’符号，这样就不需要转义‘/’ 字符了。</p><p>3）<code>p</code> 命令明确告诉 <strong>sed</strong> 在 <code>-n</code> 模式下打印该行。</p><h2 id="将多个命令应用到一个地址范围"><a href="#将多个命令应用到一个地址范围" class="headerlink" title="将多个命令应用到一个地址范围"></a>将多个命令应用到一个地址范围</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cat passwd.bak <br>root:x:0:0:root:/root:/bin/bash<br>daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin<br>bin:x:2:2:bin:/bin:/usr/sbin/nologin<br>sys:x:3:3:sys:/dev:/usr/sbin/nologin<br>sync:x:4:65534:sync:/bin:/bin/sync<br>games:x:5:60:games:/usr/games:/usr/sbin/nologin<br>man:x:6:12:man:/var/cache/man:/usr/sbin/nologin<br>lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin<br>mail:x:8:8:mail:/var/mail:/usr/sbin/nologin<br>news:x:9:9:news:/var/spool/news:/usr/sbin/nologin<br>$ sed -n -e <span class="hljs-string">&#x27;1,5&#123;s:sbin/nologin:bin/zsh:g;s/:/|/g;p&#125;&#x27;</span> /tmp/passwd.bak<br>root|x|0|0|root|/root|/bin/bash<br>daemon|x|1|1|daemon|/usr/sbin|/usr/bin/zsh<br>bin|x|2|2|bin|/bin|/usr/bin/zsh<br>sys|x|3|3|sys|/dev|/usr/bin/zsh<br>sync|x|4|65534|sync|/bin|/bin/sync<br></code></pre></td></tr></table></figure><p>命令 <code>&#123;s:sbin/nologin:bin/zsh:g;s/:/|/g;p&#125;</code> 同时执行了下面的操作：</p><p>1）将 ‘sbin/nologin’ 替换为 ‘bin/zsh’;</p><p>2）将 ‘:’ 替换为 ‘|’；</p><p>3）打印输出行</p><h2 id="sed-i"><a href="#sed-i" class="headerlink" title="sed -i"></a>sed -i</h2><p><strong>sed</strong> 的 <code>-i</code> 参数作用是将命令执行的结果直接作用与操作的文件，而不是缓冲区。</p><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cat /tmp/passwd.bak<br>root:x:0:0:root:/root:/bin/bash<br>daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin<br>bin:x:2:2:bin:/bin:/usr/sbin/nologin<br>sys:x:3:3:sys:/dev:/usr/sbin/nologin<br>sync:x:4:65534:sync:/bin:/bin/sync<br>games:x:5:60:games:/usr/games:/usr/sbin/nologin<br>man:x:6:12:man:/var/cache/man:/usr/sbin/nologin<br>lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin<br>mail:x:8:8:mail:/var/mail:/usr/sbin/nologin<br>news:x:9:9:news:/var/spool/news:/usr/sbin/nologin<br>$ sed -i <span class="hljs-string">&#x27;s/:/|/g&#x27;</span> /tmp/passwd.bak | grep cat <span class="hljs-comment"># 将文件中所有的 ：替换为 |</span><br>$ cat /tmp/passwd.bak<br>root|x|0|0|root|/root|/bin/bash<br>daemon|x|1|1|daemon|/usr/sbin|/usr/sbin/nologin<br>bin|x|2|2|bin|/bin|/usr/sbin/nologin<br>sys|x|3|3|sys|/dev|/usr/sbin/nologin<br>sync|x|4|65534|sync|/bin|/bin/sync<br>games|x|5|60|games|/usr/games|/usr/sbin/nologin<br>man|x|6|12|man|/var/cache/man|/usr/sbin/nologin<br>lp|x|7|7|lp|/var/spool/lpd|/usr/sbin/nologin<br>mail|x|8|8|mail|/var/mail|/usr/sbin/nologin<br>news|x|9|9|news|/var/spool/news|/usr/sbin/nologin<br>$ sed -i <span class="hljs-string">&#x27;s:sbin/nologin:bin/szh:g&#x27;</span> /tmp/passwd.bak<br>$ cat /tmp/passwd.bak<br>root|x|0|0|root|/root|/bin/bash<br>daemon|x|1|1|daemon|/usr/sbin|/usr/bin/szh<br>bin|x|2|2|bin|/bin|/usr/bin/szh<br>sys|x|3|3|sys|/dev|/usr/bin/szh<br>sync|x|4|65534|sync|/bin|/bin/sync<br>games|x|5|60|games|/usr/games|/usr/bin/szh<br>man|x|6|12|man|/var/cache/man|/usr/bin/szh<br>lp|x|7|7|lp|/var/spool/lpd|/usr/bin/szh<br>mail|x|8|8|mail|/var/mail|/usr/bin/szh<br>news|x|9|9|news|/var/spool/news|/usr/bin/szh<br></code></pre></td></tr></table></figure><p>由上面的例子看到 <strong>sed</strong> 的 <code>-i</code> 参数实用性要大得多，往往我们在通过脚本修改某些配置文件时，通过 <code>sed -i</code> 命令直接操作配置文件中要修改的哪一行就可以实现，而不需要打开这个配置文件。</p>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell-文件和文件系统</title>
    <link href="/2019/05/21/shell/shell-%E6%96%87%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <url>/2019/05/21/shell/shell-%E6%96%87%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="列出文件"><a href="#列出文件" class="headerlink" title="列出文件"></a>列出文件</h2><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p><code>ls</code> 命令用于显示目录或文件名的内容。<code>ls</code> 将每个由 <code>Directory</code> 参数指定的目录或者每个有 <code>File</code> 参数指定的名称写道标准输出，以及你所要求的和标志一起的其他信息。如果不指定参数，<code>ls</code> 命令显示当前目录的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs bash">用法：ls [选项]... [文件]...<br>列出文件信息 (默认是当前目录)。<br><br>必选参数对长短选项同时适用。<br>  -a, --all不隐藏任何以. 开始的项目<br>  -A, --almost-all列出除. 及.. 以外的任何项目<br>      --author与-l 同时使用时列出每个文件的作者<br>  -b, --escape以八进制溢出序列表示不可打印的字符<br>  -B, --ignore-backups  不输出以“～”结尾的备份文件<br>  -c                    输出文件的 i 节点的修改时间，并以此排序<br>  -C                    按列输出，纵向排序<br>  -d, --directory       将目录像文件一样显示，而不是显示其下的文件。<br>  -D, --dired           生成为Emacs dired模式设计的输出     <br>  -f                    对输出的文件不排序，不区分颜色<br>  -F, --classify        在每个文件后面附加一个字符，以说明该文件的类型，“*”表示可执行的普通文件；“/”表示目录；“@”表示符号链接；“|”表示FIFOs；“=”表示套接字（socket）<br>  -g类似-l，但不列出所有者<br>  -G, --no-group    无明显效果<br>  -h, --human-readable       与 -l、-s连用显示可读性的文件大小(例如, 1K 234M 2G)<br>  -H, --dereference-command-line无明显效果<br>  -i, --inode                输出文件索引<br>  -I, --ignore=PATTERN       不列出匹配shell模式的隐含条目<br>  -k, --kibibytes            磁盘使用默认为1024字节块<br>  -l使用较长格式列出信息<br>  -L, --dereference当显示符号链接的文件信息时，显示符号链接所指示<br>的对象而并非符号链接本身的信息<br>  -m所有文件以逗号分隔，并填满整行行宽<br>  -n, --numeric-uid-gid      类似 -l, 类似 -l, 但是用户以数字显示，用户组以id显示<br>  -N, --literal              不要用引号引起文件名<br>  -o                         类似 -l, 但是不显示组信息<br>  -p, --indicator-style=slash向目录追加/指示符<br>  -q, --hide-control-chars   打印吗?而不是非图形字符<br>  -Q, --quote-name           将条目名称用双引号括起来 <br>  -r, --reverse逆序排列<br>  -R, --recursive递归显示子目录<br>  -s, --size以块数形式显示每个文件分配的尺寸<br>  -S                    以文件大小倒序排序                     <br>  -t                    根据修改时间倒序排序<br>  -T, --tabsize=COLS         假定每个制表符宽度是 cols 。缺省为 8。为求效率， ls 可能在输出中使用制表符。  若 cols 为 0，则不使用制表符<br>  -u                         与 -lt连用，以访问时间倒序排序<br>                               与 -l连用，显示访问时间，并且以名称排序<br>否则以访问时间排序<br>  -U                         不排序;按目录顺序列出条目<br>  -v                         文本中的(版本)数字的自然排序<br>  -w, --width=COLS           将输出宽度设置为COLS。0表示没有极限<br>  -x                         按行而不是按列列出条目<br>  -X                         按条目扩展名的字母顺序排序<br>  -Z, --context              打印每个文件的任何安全上下文<br>  -1                         每行列出一个文件。避免使用带-q或-b的\n<br></code></pre></td></tr></table></figure><h2 id="文件的类型"><a href="#文件的类型" class="headerlink" title="文件的类型"></a>文件的类型</h2><p>命令 <code>ls -l</code> 输出，第一列信息表示的文件的类型和读写权限，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">pwd</span><br>/home/aurora<br>$ ls -l<br><br></code></pre></td></tr></table></figure><p>第一列字段由 10 个字符组成，其中第一个字符会有 6 中不同的字符，分别是：</p><p><strong>-</strong> 普通文件</p><p><strong>d</strong> 文件夹</p><p><strong>b</strong> 块设备文件，硬盘（/dev/sda）、光盘（/dev/cdrom）等</p><p><strong>c</strong> 字符设备文件，内存（/dev/mem）、终端（/dev/tty）、黑洞（/dev/null）等</p><p><strong>l</strong> 软连接文件</p><p><strong>s</strong> 套接字文件</p><h2 id="文件的权限"><a href="#文件的权限" class="headerlink" title="文件的权限"></a>文件的权限</h2><p>在 Linux 中的每个文件或目录都包含有访问权限，这些访问权限决定了谁能访问和如何访问这些文件和目录。</p><h3 id="用户分组"><a href="#用户分组" class="headerlink" title="用户分组"></a>用户分组</h3><p>对于一个文件来说，可以针对 3 种不同的用户类型设置不同的访问权限。</p><ul><li><strong>OWNER</strong> 所有者，指创建文件的用户。</li><li><strong>GROUP</strong> 用户组，用户组是指一组相似用户。用户组中的单个用户能够设置其所在用户组访问该用户文件的权限。</li><li><strong>OTHER</strong> 其他用户，用户也可以将自己的文件向系统内的其他所有用户开放。</li></ul><h4 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">说明：更改与文件关联的所有者或组<br><br>用法：chown [选项]... [所有者][:[组]] 文件...<br>　或：chown [选项]... --reference=参考文件 文件...<br><br>  -c, --changes          效果类似“-v”参数，但仅回报更改的部分；<br>  -f, --silent, --quiet  禁止除用法消息之外的所有错误消息;<br>  -v, --verbose          显示指令执行过程<br>      --dereference      效果和“-h”参数相同；<br>  -h, --no-dereference   只对符号连接的文件作修改，而不更改其他任何相关文件；<br>  -R, --recursive        o递归处理，将指定目录下的所有文件及子目录一并处理；<br>  -H                     如果命令行参数是指向目录的符号链接，则遍历它，遍历遇到的每个指向目录的符号链接<br>  -P                     不遍历任何符号链接(默认)<br><br>示例：<br>  chown root /u将 /u 的属主更改为<span class="hljs-string">&quot;root&quot;</span>。<br>  chown root:staff /u和上面类似，但同时也将其属组更改为<span class="hljs-string">&quot;staff&quot;</span>。<br>  chown -hR root /u将 /u 及其子目录下所有文件的属主更改为<span class="hljs-string">&quot;root&quot;</span>。<br></code></pre></td></tr></table></figure><h4 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">说明：变更文件或目录的所属群组<br><br>用法：chgrp [选项]... 用户组 文件...<br>　或：chgrp [选项]... --reference=参考文件 文件...<br><br>  -c, --changes         效果类似“-v”参数，但仅回报更改的部分；<br>  -f, --silent, --quiet  禁止除用法消息之外的所有错误消息;<br>  -v, --verbose          显示指令执行过程；<br>  -h, --no-dereference   只对符号连接的文件作修改，而不是该其他任何相关文件；<br>  -R, --recursive        递归式地改变指定目录及其下的所有子目录和文件的所属的组<br>  -H                     如果命令行参数是一个通到目录的符号链接，则遍历符号链接<br>  -L                    遍历每一个遇到的通到目录的符号链接<br>  -P                    不遍历任何符号链接（默认）<br><br>示例：<br>  chgrp staff /u            将 /u 的属组更改为<span class="hljs-string">&quot;staff&quot;</span>。<br>  chgrp -hR staff /u    将 /u 及其子目录下所有文件的属组更改为<span class="hljs-string">&quot;staff&quot;</span>。<br></code></pre></td></tr></table></figure><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><p>对于每个文件来说，文件所有者或超级用户可以设置文件的可读、可写和可执行权限，他们分别是<strong>r</strong>、<strong>w</strong>、<strong>x</strong>。</p><ul><li><strong>r（Read，读取）</strong> 对于文件而言，可以读取文件内容；对于目录而言，具有浏览目录的权限。</li><li><strong>w（Write，写入）</strong> 对于文件而言，具有新增、修改文件内容的权限；对于目录而言，具有移动、删除目录的权限。</li><li><strong>x（eXecute，执行）</strong> 对于文件而言，具有执行文件的权限；对于目录而言，该用户具有进入目录的权限</li></ul><p><strong>Linux 文件的权限位图：</strong></p><img src='/images/shell/linux文件的权限位图.png' /><h4 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">说明：用来变更文件或目录的权限<br><br>用法：chmod [选项]... 模式[,模式]... 文件...<br>　或：chmod [选项]... 八进制模式 文件...<br>　或：chmod [选项]... --reference=参考文件 文件...<br><br>  -c, --changes          效果类似“-v”参数，但仅回报更改的部分，如果文件权限已经改变，显示其操作信息；<br>  -f, --silent, --quiet  操作过程中不显示任何错误信息；<br>  -v, --verbose          显示命令运行时的详细执行过程；<br>  -R, --recursive        递归处理，将指令目录下的所有文件及子目录一并处理；<br></code></pre></td></tr></table></figure><h2 id="文件的修改时间"><a href="#文件的修改时间" class="headerlink" title="文件的修改时间"></a>文件的修改时间</h2><p>通过 <code>ls -l</code> 查看 <code>/tmp</code> 下文件的详细信息，其中第 6 列就是文件的修改时间，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ls -l /tmp<br>-rw------- 1 aurora              aurora                   0 5月  21 08:40  config-err-Rtp07N<br>srw------- 1 aurora              aurora                   0 5月  21 08:40  fcitx-socket-:0<br>drwxr-xr-x 2 aurora              aurora                4096 5月  23 14:12  hsperfdata_aurora<br>drwxr-xr-x 2 aurora              aurora                4096 5月  21 16:13  insomnia_6.3.2<br>-rw-r--r-- 1 aurora              aurora                   0 5月  21 08:41  lastore-session-helper-source-checked<br><br></code></pre></td></tr></table></figure><h4 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">说明：将每个文件的访问和修改该事件修改为当前时间；当一个文件不存在时，创建这个空文件（除非提供 -c 或 -h 参数）。<br><br>用法：touch [选项]... 文件...<br><br>必选参数对长短选项同时适用。<br>  -a只更改访问时间<br>  -c, --no-create不创建任何文件<br>  -d, --date=字符串使用指定字符串表示时间而非当前时间<br>  -f尝试强制 touch 运行，不管文件的读和写许可权<br>  -h, --no-dereference会影响符号链接本身，而非符号链接所指示的目的地 (当系统支持更改符号链接的所有者时，此选项才有用)<br>  -m只更改修改时间<br>  -r, --reference=FILE   使用该文件的时间代替当前时间<br>  -t STAMP               使用制定时间 [[CC]YY]MMDDhhmm[.ss] 代替当前时间<br>      --time=WORD        change the specified time:<br>                           WORD is access, atime, or use: equivalent to -a<br>                           WORD is modify or mtime: equivalent to -m<br>     <br>请注意，-d 和-t 选项可接受不同的时间/日期格式。<br></code></pre></td></tr></table></figure><h1 id="寻找文件"><a href="#寻找文件" class="headerlink" title="寻找文件"></a>寻找文件</h1><p>在 UNIX/Linux 下寻找文件的机制很强大，使用 <code>find</code> 命令与其他工具结合时，你就能：</p><ul><li>找到符合某种规则的文件</li><li>对这类文件一次执行某命令</li></ul><h2 id="find-命令的参数"><a href="#find-命令的参数" class="headerlink" title="find 命令的参数"></a>find 命令的参数</h2><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs bash">说明：在指定目录下查找文件<br>find命令 用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。<br><br>用法: find [-H] [-L] [-P] [-Olevel] [-D debugopts] [path...] [expression]<br><br>-amin&lt;分钟&gt;：查找在指定时间曾被存取过的文件或目录，单位以分钟计算；<br>-anewer&lt;参考文件或目录&gt;：查找其存取时间较指定文件或目录的存取时间更接近现在的文件或目录；<br>-atime&lt;24小时数&gt;：查找在指定时间曾被存取过的文件或目录，单位以24小时计算；<br>-cmin&lt;分钟&gt;：查找在指定时间之时被更改过的文件或目录；<br>-cnewer&lt;参考文件或目录&gt;查找其更改时间较指定文件或目录的更改时间更接近现在的文件或目录；<br>-ctime&lt;24小时数&gt;：查找在指定时间之时被更改的文件或目录，单位以24小时计算；<br>-daystart：从本日开始计算时间；<br>-depth：从指定目录下最深层的子目录开始查找；<br>-expty：寻找文件大小为0 Byte的文件，或目录下没有任何子目录或文件的空目录；<br>-<span class="hljs-built_in">exec</span>&lt;执行指令&gt;：假设find指令的回传值为True，就执行该指令；<br>-<span class="hljs-literal">false</span>：将find指令的回传值皆设为False；<br>-fls&lt;列表文件&gt;：此参数的效果和指定“-ls”参数类似，但会把结果保存为指定的列表文件；<br>-follow：排除符号连接；<br>-fprint&lt;列表文件&gt;：此参数的效果和指定“-<span class="hljs-built_in">print</span>”参数类似，但会把结果保存成指定的列表文件；<br>-fprint0&lt;列表文件&gt;：此参数的效果和指定“-print0”参数类似，但会把结果保存成指定的列表文件；<br>-fprintf&lt;列表文件&gt;&lt;输出格式&gt;：此参数的效果和指定“-<span class="hljs-built_in">printf</span>”参数类似，但会把结果保存成指定的列表文件；<br>-fstype&lt;文件系统类型&gt;：只寻找该文件系统类型下的文件或目录；<br>-gid&lt;群组识别码&gt;：查找符合指定之群组识别码的文件或目录；<br>-group&lt;群组名称&gt;：查找符合指定之群组名称的文件或目录；<br>-<span class="hljs-built_in">help</span>或——<span class="hljs-built_in">help</span>：在线帮助；<br>-ilname&lt;范本样式&gt;：此参数的效果和指定“-lname”参数类似，但忽略字符大小写的差别；<br>-iname&lt;范本样式&gt;：此参数的效果和指定“-name”参数类似，但忽略字符大小写的差别；<br>-inum&lt;inode编号&gt;：查找符合指定的inode编号的文件或目录；<br>-ipath&lt;范本样式&gt;：此参数的效果和指定“-path”参数类似，但忽略字符大小写的差别；<br>-iregex&lt;范本样式&gt;：此参数的效果和指定“-regexe”参数类似，但忽略字符大小写的差别；<br>-links&lt;连接数目&gt;：查找符合指定的硬连接数目的文件或目录；<br>-iname&lt;范本样式&gt;：指定字符串作为寻找符号连接的范本样式；<br>-ls：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出；<br>-maxdepth&lt;目录层级&gt;：设置最大目录层级；<br>-mindepth&lt;目录层级&gt;：设置最小目录层级；<br>-mmin&lt;分钟&gt;：查找在指定时间曾被更改过的文件或目录，单位以分钟计算；<br>-mount：此参数的效果和指定“-xdev”相同；<br>-mtime&lt;24小时数&gt;：查找在指定时间曾被更改过的文件或目录，单位以24小时计算；<br>-name&lt;范本样式&gt;：指定字符串作为寻找文件或目录的范本样式；<br>-newer&lt;参考文件或目录&gt;：查找其更改时间较指定文件或目录的更改时间更接近现在的文件或目录；<br>-nogroup：找出不属于本地主机群组识别码的文件或目录；<br>-noleaf：不去考虑目录至少需拥有两个硬连接存在；<br>-nouser：找出不属于本地主机用户识别码的文件或目录；<br>-ok&lt;执行指令&gt;：此参数的效果和指定“-<span class="hljs-built_in">exec</span>”类似，但在执行指令之前会先询问用户，若回答“y”或“Y”，则放弃执行命令；<br>-path&lt;范本样式&gt;：指定字符串作为寻找目录的范本样式；<br>-perm&lt;权限数值&gt;：查找符合指定的权限数值的文件或目录；<br>-<span class="hljs-built_in">print</span>：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式为每列一个名称，每个名称前皆有“./”字符串；<br>-print0：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式为全部的名称皆在同一行；<br>-<span class="hljs-built_in">printf</span>&lt;输出格式&gt;：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式可以自行指定；<br>-prune：不寻找字符串作为寻找文件或目录的范本样式;<br>-regex&lt;范本样式&gt;：指定字符串作为寻找文件或目录的范本样式；<br>-size&lt;文件大小&gt;：查找符合指定的文件大小的文件；<br>-<span class="hljs-literal">true</span>：将find指令的回传值皆设为True；<br>-<span class="hljs-built_in">type</span>&lt;文件类型&gt;：只寻找符合指定的文件类型的文件；<br>-uid&lt;用户识别码&gt;：查找符合指定的用户识别码的文件或目录；<br>-used&lt;日数&gt;：查找文件或目录被更改之后在指定时间曾被存取过的文件或目录，单位以日计算；<br>-user&lt;拥有者名称&gt;：查找符和指定的拥有者名称的文件或目录；<br>-version或——version：显示版本信息；<br>-xdev：将范围局限在先行的文件系统中；<br>-xtype&lt;文件类型&gt;：此参数的效果和指定“-<span class="hljs-built_in">type</span>”参数类似，差别在于它针对符号连接检查。<br></code></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ find /etc -iname <span class="hljs-string">&quot;*rc&quot;</span> -<span class="hljs-built_in">print</span> <span class="hljs-comment"># 递归检索 /etc 下的所有文件，打印输出以 rc 结尾的文件</span><br>/etc/screenrc<br>/etc/nanorc<br>/etc/drirc<br>/etc/X11/xinit/xserverrc<br>/etc/X11/xinit/xinputrc<br>/etc/X11/xinit/xinitrc<br>/etc/X11/imwheel/imwheelrc<br>/etc/X11/Xsession.d/40x11-common_xsessionrc<br>/etc/init.d/rc<br>/etc/libreoffice/sofficerc<br>/etc/xdg/xfce4/helpers.rc<br>$ find /etc -iname <span class="hljs-string">&quot;*rc&quot;</span> -<span class="hljs-built_in">exec</span> cp &#123;&#125; /tmp/rcfile/ \; <span class="hljs-comment"># 递归检索 /etc 下的所有文件，然后将这类文件执行命令 `cp file /tmp/rcfile/` 将文件复制到 /tmp/rcfile 目录下</span><br><span class="hljs-variable">$ls</span> /tmp/rcfile<br>screenrcnanorcdrircxserverrcxinputrcxinitrc<br>imwheelrc40x11-common_xsessionrcrcsofficerchelpers.rc<br>$ find . -perm 755 <span class="hljs-comment"># 找出当前目录下权限位为 755 的文件</span><br>./rcfile<br>./rcfile/rc<br>./rcfile/xinitrc<br>./dir022<br>...<br>$ find . -iname <span class="hljs-string">&quot;*.txt&quot;</span> <span class="hljs-comment"># 找到当前目录下后缀名为 .txt 的文件，不区分大小写</span><br>./X11/rgb.txt<br>./java-10-openjdk/security/policy/README.txt<br>$ find . -maxdepth 1 -<span class="hljs-built_in">type</span> d -<span class="hljs-built_in">print</span> <span class="hljs-comment"># 找出当前目录下所有的文件夹（d）,仅列出深度为 1 的目录</span><br>.<br>./XMind Zen Crashes<br>./systemd-private-c2b4f3fdcf3c46c19413929c99d1aea7-ModemManager.service-9E5vPg<br>./systemd-private-c2b4f3fdcf3c46c19413929c99d1aea7-systemd-timesyncd.service-8x3wT2<br>./pulse-2L9K88eMlGn7<br>./runtime-root<br>./.X11-unix<br>./.mount_insomniPOkzf<br>./mysql-workbench-27530<br>./insomnia_6.3.2<br>./.font-unix<br>./.Test-unix<br>./.wine-1000<br></code></pre></td></tr></table></figure><h2 id="遍历文件"><a href="#遍历文件" class="headerlink" title="遍历文件"></a>遍历文件</h2><p>​    在使用 <code>find</code> 命令的 <code>-exec</code> 选项处理匹配到的文件时，<code>find</code> 命令将所有匹配到的文件一起传递给 <code>exec</code> 执行。但有些系统对能够传递给 <code>exec</code> 的命令长度有限制，这样在 <code>find</code> 命令运行几分钟之后，就会出现溢出的错误。错误信息通常是“参数列太长”或“参数列溢出”。这就是 <strong><code>xargs</code></strong> 命令的用处所在，特别是与 <code>find</code> 命令一起使用。</p><p>​    <code>find</code>  把匹配到的文件传递给 <code>xargs</code> 命令，<code>xargs</code> 命令每次值获取一部分文件而不是全部，不像 <code>-exec</code> 那样。这样他就可以先处理最先获取到的一部分文件，然后是下一批，依次处理。</p><p>​    另外，<code>-exec</code> 再处理每个文件时，都会发起一个进程；而使用 <code>xargs</code> 只会生成一个进程。这样，两个命令对系统资源的占用就显而易见了。</p><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ find /tmp -maxdepth 1 -<span class="hljs-built_in">type</span> f -<span class="hljs-built_in">print</span> | xargs file <span class="hljs-comment"># 先通过 find 命令查找指定条件的文件，然后用 file 命令 查看文件详细类型</span><br>/tmp/sogou-qimpanel:0.pid:                     ASCII text<br>/tmp/.org.chromium.Chromium.yQ9ITt:            ELF 64-bit LSB pie executable x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=60dce875a215f4a70652fe45471fae0b7d79f5f5, not stripped<br>/tmp/.org.chromium.Chromium.Gx2uO8:            ELF 64-bit LSB pie executable x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=0fd8ffb3df5232bcd7ad3ea9b4088effb852e15d, not stripped<br>/tmp/startdde-login-sound-mark:                empty<br>/tmp/config-err-Rtp07N:                        empty<br></code></pre></td></tr></table></figure><h1 id="比较文件"><a href="#比较文件" class="headerlink" title="比较文件"></a>比较文件</h1><h2 id="使用-comm-比较排序后文件"><a href="#使用-comm-比较排序后文件" class="headerlink" title="使用 comm 比较排序后文件"></a>使用 comm 比较排序后文件</h2><p><code>comm</code> 命令会一行行地比较两个已排序文件的差异，并将结果显示出来。要求被比较的文件需先完成排序。</p><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cat test.txt <br>line1<br>line2<br>line3<br>$ cat test2.txt <br>line1<br>line2<br>line4<br>$ comm test.txt test2.txt <br>line1<br>line2<br>line3<br>line4<br>$ comm -1 test.txt test2.txt <span class="hljs-comment"># 不显示只在第一个文件里出现过的列</span><br>line1<br>line2<br>line4<br>$ comm -2 test.txt test2.txt <span class="hljs-comment"># 不显示只在第二个文件里出现过的列</span><br>line1<br>line2<br>line3<br>$ comm -3 test.txt test2.txt <span class="hljs-comment"># 不显示只在第一个文件和第二个文件里出现过的列</span><br>line3<br>line4<br>$ comm -13 test.txt test2.txt<br>line4<br>$ comm -23 test.txt test2.txt<br>line3<br></code></pre></td></tr></table></figure><h2 id="使用-diff-比较文件"><a href="#使用-diff-比较文件" class="headerlink" title="使用 diff 比较文件"></a>使用 diff 比较文件</h2><p><code>diff</code> 命令会逐行比较两个文本文件，列出其不同之处。他比 <code>comm</code> 命令能完成更加复杂的检查。他对给出的文件进行系统的检查，并且显示两个文件中所有不同的行，不要求实现对文件进行排序。</p><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cat test.txt <br>line1<br>line2<br>line3<br>$ cat test2.txt <br>line1<br>line2<br>line4<br>$ cat test3.txt<br>line1<br>line2<br>$ diff test.txt test2.txt<br>3c3<br>&lt; line3<br>---<br>&gt; line4<br>$ diff test.txt test3.txt<br>3d2<br>&lt; line3<br>$ diff test3.txt test.txt<br>2a3<br>&gt; line3<br>$ diff test2.txt test3.txt<br>3d2<br>&lt; line4<br></code></pre></td></tr></table></figure><p>​                               <strong>diff 命令的输出格式</strong></p><table><thead><tr><th align="center">Lines Affected in File1</th><th align="center">Action</th><th align="center">Lines Affected in File2</th></tr></thead><tbody><tr><td align="center">Number1</td><td align="center">a</td><td align="center">Num2[,Number3]</td></tr><tr><td align="center">Num1[,Number2]</td><td align="center">d</td><td align="center">Number3</td></tr><tr><td align="center">Num1[,Number2]</td><td align="center">c</td><td align="center">Num3[,Number4]</td></tr></tbody></table><h3 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs bash">说明：逐行比较文本文件，也可以比较目录内容<br>用法：diff [选项]... 文件们<br><br>  -q, --brief                   只有在文件不同时报告<br>  -s, --report-identical-files  当两个一样时仍然显示结果<br>  -c, -C NUM, --context[=NUM]   输出上下文的复制行数(默认为3行)<br>  -u, -U 数量, --unified[=数量] 输出 &lt;数量&gt;（默认为 3）行一致化上下文<br>  -e, --ed                      以 ed script 方式输出<br>  -n, --rcs                     以 RCS diff 格式输出<br>  -y, --side-by-side            output <span class="hljs-keyword">in</span> two columns<br>  -W, --width=数量              每行显示最多 &lt;数量&gt;（默认 130）个字符<br>      --left-column             当有两行相同时只显示左边栏的一行<br>      --suppress-common-lines   当有两行相同时不显示<br><br>  -p, --show-c-function         show <span class="hljs-built_in">which</span> C <span class="hljs-keyword">function</span> each change is <span class="hljs-keyword">in</span><br>  -F, --show-function-line=RE   show the most recent line matching RE<br>      --label LABEL             use LABEL instead of file name and timestamp<br>                                  (can be repeated)<br><br>  -t, --expand-tabs             将输出中的 tab 转换成空格<br>  -T, --initial-tab             每行先加上 tab 字符，使 tab 字符可以对齐<br>      --tabsize=数字           TAB 格的宽度，默认为 8 个打印列宽<br>      --suppress-blank-empty    suppress space or tab before empty output lines<br>  -l, --paginate                将输出送至 “pr” 指令来分页<br><br>  -r, --recursive                 连同所有子目录一起比较<br>      --no-dereference            don<span class="hljs-string">&#x27;t follow symbolic links</span><br><span class="hljs-string">  -N, --new-file                  不存在的文件以空文件方式处理</span><br><span class="hljs-string">      --unidirectional-new-file   若第一文件不存在，以空文件处理</span><br><span class="hljs-string">      --ignore-file-name-case     忽略文件名大小写的区别</span><br><span class="hljs-string">      --no-ignore-file-name-case  不忽略文件名大小写的区别</span><br><span class="hljs-string">  -x, --exclude=模式              排除匹配 &lt;模式&gt; 的文件</span><br><span class="hljs-string">  -X, --exclude-from=文件         排除所有匹配在&lt;文件&gt;中列出的模式的文件</span><br><span class="hljs-string">  -S, --starting-file=文件        当比较目录時，由&lt;文件&gt;开始比较</span><br><span class="hljs-string">      --from-file=文件1           将&lt;文件1&gt;和操作数中的所有文件/目录作比较；</span><br><span class="hljs-string">                                    &lt;文件1&gt;可以是目录</span><br><span class="hljs-string">      --to-file=文件2             将操作数中的所有文件/目录和&lt;文件2&gt;作比较；</span><br><span class="hljs-string">                                    &lt;文件2&gt;可以是目录</span><br><span class="hljs-string"></span><br><span class="hljs-string">  -i, --ignore-case               忽略文件内容大小写的区别</span><br><span class="hljs-string">  -E, --ignore-tab-expansion      忽略由制表符宽度造成的差异</span><br><span class="hljs-string">  -Z, --ignore-trailing-space     忽略每行末端的空格</span><br><span class="hljs-string">  -b, --ignore-space-change       忽略由空格数不同造成的差异</span><br><span class="hljs-string">  -w, --ignore-all-space          忽略所有空格</span><br><span class="hljs-string">  -B, --ignore-blank-lines        忽略任何因空行而造成的差异</span><br><span class="hljs-string">  -I, --ignore-matching-lines=正则 若某行完全匹配 &lt;正则&gt;，则忽略由该行造成的差异</span><br><span class="hljs-string"></span><br><span class="hljs-string">  -a, --text                      所有文件都以文本方式处理</span><br><span class="hljs-string">      --strip-trailing-cr         去除输入内容每行末端的回车（CR）字符</span><br><span class="hljs-string"></span><br><span class="hljs-string">  -D, --ifdef=名称                输出的内容以 ‘#ifdef &lt;名称&gt;’ 方式标明差异</span><br><span class="hljs-string">      --GTYPE-group-format=GFMT   以 GFMT 格式处理 GTYPE 输入行组</span><br><span class="hljs-string">      --line-format=LFMT          以 LFMT 格式处理每一行资料</span><br><span class="hljs-string">      --LTYPE-line-format=LFMT    以 LFMT 格式处理 LTYPE 输入的行</span><br><span class="hljs-string">    These format options provide fine-grained control over the output</span><br><span class="hljs-string">      of diff, generalizing -D/--ifdef.</span><br><span class="hljs-string">    LTYPE 可以是 “old”、“new” 或 “unchanged”。GTYPE 可以是 LTYPE 的选择</span><br><span class="hljs-string">    或是 “changed”。</span><br><span class="hljs-string">  （仅）GFMT 可包括：</span><br><span class="hljs-string">      %&lt;  该组中每行属于&lt;文件1&gt;的差异</span><br><span class="hljs-string">      %&gt;  该组中每行属于&lt;文件2&gt;的差异</span><br><span class="hljs-string">      %=  该组中同时在&lt;文件1&gt;和&lt;文件2&gt;出现的每一行</span><br><span class="hljs-string">      %[-][宽度][.[精确度]]&#123;doxX&#125;字符  以 printf 格式表示该&lt;字符&gt;代表的内容</span><br><span class="hljs-string">        大写&lt;字符&gt;表示属于新的文件，小写表示属于旧的文件。&lt;字符&gt;的意义如下：</span><br><span class="hljs-string">          F  行组中第一行的行号</span><br><span class="hljs-string">          L  行组中最后一行的行号</span><br><span class="hljs-string">          N  行数 ( =L-F+1 )</span><br><span class="hljs-string">          E  F-1</span><br><span class="hljs-string">          M  L+1</span><br><span class="hljs-string">      %(A=B?T:E)  如果 A 等于 B 那么 T 否则 E</span><br><span class="hljs-string">  （仅）LFMT 可包括：</span><br><span class="hljs-string">      %L  该行的内容</span><br><span class="hljs-string">      %l  该行的内容，但不包括结束的换行符</span><br><span class="hljs-string">      %[-][宽度][.[精确度]]&#123;doxX&#125;n  以 printf 格式表示的输入行号</span><br><span class="hljs-string">    GFMT 或 LFMT 都可包括：</span><br><span class="hljs-string">      %%        %</span><br><span class="hljs-string">      %c&#x27;</span>C<span class="hljs-string">&#x27;     单个字符 C</span><br><span class="hljs-string">      %c&#x27;</span>\OOO<span class="hljs-string">&#x27;  八进制码 OOO 所代表的字符</span><br><span class="hljs-string">      C         字符 C（处上述转义外的其他字符代表它们自身）</span><br><span class="hljs-string"></span><br><span class="hljs-string">  -d, --minimal            尽可能找出最小的差异。</span><br><span class="hljs-string">      --horizon-lines=数量 保持&lt;数量&gt;行的一致前后缀</span><br><span class="hljs-string">      --speed-large-files  假设文件十分大而且文件中含有许多微小的差异</span><br><span class="hljs-string">      --color[=WHEN]       colorize the output; WHEN can be &#x27;</span>never<span class="hljs-string">&#x27;, &#x27;</span>always<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">                             or &#x27;</span>auto<span class="hljs-string">&#x27; (the default)</span><br><span class="hljs-string">      --palette=PALETTE    the colors to use when --color is active; PALETTE is</span><br><span class="hljs-string">                             a colon-separated list of terminfo capabilities</span><br></code></pre></td></tr></table></figure><h3 id="comm"><a href="#comm" class="headerlink" title="comm"></a>comm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">说明：逐行比较已排序的文件文件1 和文件2。When FILE1 or FILE2 (not both) is -, <span class="hljs-built_in">read</span> standard input.<br>用法：comm [选项]... 文件1 文件2<br><br><br>如果不附带选项，程序会生成三列输出。第一列包含文件1 特有的行，第二列包含 文件2 特有的行，而第三列包含两个文件共有的行。<br><br>  -1不输出文件1 特有的行<br>  -2不输出文件2 特有的行<br>  -3不输出两个文件共有的行<br><br>  --check-order检查输入是否被正确排序，即使所有输入行均成对<br>  --nocheck-order不检查输入是否被正确排序<br>  --output-delimiter=STR依照STR 分列<br>  --total           output a summary<br>  -z, --zero-terminated    line delimiter is NUL, not newline<br><br>示例：<br>  comm -12 文件1 文件2  只打印在文件1 和文件2 中都有的行<br>  comm -3  文件1 文件2  打印在文件1 中有，而文件2 中没有的行。反之亦然。<br></code></pre></td></tr></table></figure><h2 id="其他文本比较方法"><a href="#其他文本比较方法" class="headerlink" title="其他文本比较方法"></a>其他文本比较方法</h2><p><code>vimdiff</code></p>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【转】正向代理与反向代理</title>
    <link href="/2019/04/24/nginx/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <url>/2019/04/24/nginx/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="转载链接正向代理与反向代理【总结】"><a href="#转载链接正向代理与反向代理【总结】" class="headerlink" title="转载链接正向代理与反向代理【总结】"></a>转载链接<a href="https://www.cnblogs.com/Anker/p/6056540.html">正向代理与反向代理【总结】</a></h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　最近工作中用到反向代理，发现网络代理的玩法还真不少，网络背后有很多需要去学习。而在此之前仅仅使用了过代理软件，曾经为了访问google，使用了代理软件，需要在浏览器中配置代理的地址。我只知道有代理这个概念，并不清楚代理还有正向和反向之分，于是赶紧学习一下，补充一下知识。首先弄清楚什么是正向代理，什么是反向代理，然后是二者在实际使用中展示的方式是什么样的，最后总结一下正向代理用来做什么，反向代理可以做什么。</p><h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><p>正向代理类似一个跳板机，代理访问外部资源。</p><img src="/images/forward-proxy.png"><p>举个例子：</p><p>　　我是一个用户，我访问不了某网站，但是我能访问一个代理服务器，这个代理服务器呢,他能访问那个我不能访问的网站，于是我先连上代理服务器,告诉他我需要那个无法访问网站的内容，代理服务器去取回来,然后返回给我。从网站的角度，只在代理服务器来取内容的时候有一次记录，有时候并不知道是用户的请求，也隐藏了用户的资料，这取决于代理告不告诉网站。</p><p><strong>客户端必须设置正向代理服务器，当然前提是要知道正向代理服务器的IP地址，还有代理程序的端口。</strong></p><p>例如之前使用过这类软件例如CCproxy，<a href="http://www.ccproxy.com/">http://www.ccproxy.com</a>/ 需要在浏览器中配置代理的地址。</p><p>总结来说：<em>正向代理 是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理</em>。</p><p><strong>正向代理的用途：</strong></p><ul><li><p>访问原来无法访问的资源，如 google</p></li><li><p>可以做缓存，加速访问资源</p></li><li><p>对客户端访问授权，上网进行认证</p></li><li><p>代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息</p></li></ul><p>例如CCProxy用途：</p><img src="/images/ccProxy.png"><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>初次接触方向代理的感觉是，客户端是<code>无感知代理的存在</code>的，反向代理对外都是透明的，访问者者并不知道自己访问的是一个代理。因为客户端不需要任何配置就可以访问。</p><p>　　反向代理（Reverse Proxy）实际运行方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。</p><p><strong>反向代理的作用：</strong></p><ul><li>保证内网的安全，可以使用反向代理提供WAF功能，阻止 web 攻击大型网站，通常将反向代理作为公网访问地址，Web服务器是内网。</li></ul><img src="/images/reverse-proxy1.png"><ul><li>负载均衡，通过反向代理服务器来优化网站的负载</li></ul><img src="/images/reverse-proxy2.png"><h2 id="二者区别"><a href="#二者区别" class="headerlink" title="二者区别"></a>二者区别</h2><p>借用知乎两张图来表达：<a href="https://www.zhihu.com/question/24723688">https://www.zhihu.com/question/24723688</a></p><img src="/images/forward-reverse.png"><img src="/images/forward-reverse2.png"><h2 id="nginx的反向代理"><a href="#nginx的反向代理" class="headerlink" title="nginx的反向代理"></a><strong>nginx的反向代理</strong></h2><p>nginx 支持配置反向代理，通过反向代理实现网站的负载均衡。这部分先写一个nginx 的配置，后续需要深入研究 nginx 的代理模块和负载均衡模块。</p><p>nginx 通过 <code>proxy_pass_http</code> 配置代理站点，<code>upstream</code> 实现负载均衡。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">upstream</span> www_proxy_test_80 &#123;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">190.80.12.112:80</span>;<br>&#125;<br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span><span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span>www.site3.com;<br>    <br>    <span class="hljs-attribute">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://www_proxy_test_80;<br>        <span class="hljs-attribute">proxy_set_header</span> Host $host;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Real-IP $remote_addr;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto https;<br>        <span class="hljs-attribute">proxy_redirect</span> <span class="hljs-literal">off</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考资料：</p><p><a href="http://z00w00.blog.51cto.com/515114/1031287">http://z00w00.blog.51cto.com/515114/1031287</a></p><p><a href="http://blog.csdn.net/m13666368773/article/details/8060481">http://blog.csdn.net/m13666368773/article/details/8060481</a></p>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
      <tag>负载均衡</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell-基本文本处理</title>
    <link href="/2019/04/16/shell/shell-%E5%9F%BA%E6%9C%AC%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/"/>
    <url>/2019/04/16/shell/shell-%E5%9F%BA%E6%9C%AC%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="排序文本"><a href="#排序文本" class="headerlink" title="排序文本"></a>排序文本</h1><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sort [OPTION]... [FILE]...<br>sort [OPTION]... --files0-from=F<br></code></pre></td></tr></table></figure><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>1、将所有文件的排序连接写入标准输出。</p><p>2、如果没有文件，或者当文件为-时，读取标准输入。</p><h2 id="sort-命令的-行排序"><a href="#sort-命令的-行排序" class="headerlink" title="sort 命令的 行排序"></a>sort 命令的 行排序</h2><p><strong>使用 sort 命令排序文本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cat fruits.txt<br>banana<br>orange<br>Apple<br>Persimmon<br>apple<br>%%banana<br>apple<br>ORANGE<br>$ LANG=En_US sort fruits.txt <span class="hljs-comment"># ASCII 排序：ASCII中，%在大写字母前，大写字母在小写字母前</span><br>%%banana<br>Apple<br>ORANGE<br>Persimmon<br>apple<br>apple<br>banana<br>orange<br>$ sort fruits.txt <span class="hljs-comment"># 普通排序</span><br>apple<br>apple<br>Apple<br>banana<br>%%banana<br>orange<br>ORANGE<br>Persimmon<br>$ sort -d fruits.txt<span class="hljs-comment"># 字典排序</span><br>apple<br>apple<br>Apple<br>banana<br>%%banana<br>orange<br>ORANGE<br>Persimmon<br>$ sort -d -f fruits.txt <span class="hljs-comment"># -f 忽略大小写差异</span><br>apple<br>apple<br>Apple<br>banana<br>%%banana<br>orange<br>ORANGE<br>Persimmon<br>$ sort -d -f -u fruits.txt <span class="hljs-comment"># -u 去除重复项</span><br>Apple<br>banana<br>orange<br>Persimmon<br></code></pre></td></tr></table></figure><h2 id="sort-命令的字段排序"><a href="#sort-命令的字段排序" class="headerlink" title="sort 命令的字段排序"></a>sort 命令的字段排序</h2><p><code>sort</code> 命令还可以对字段进行排序，在 <code>sort</code> 的参数列表中，<code>-k</code> 参数可以选定排序字段，<code>-t</code> 参数可以选择字段分界符，默认是空白符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 字段排序</span><br>$ cat /etc/group<br>root:x:0:<br>sudo:x:27:aurora<br>www-data:x:33:<br>games:x:60:<br>users:x:100:aurora<br>aurora:x:1000:<br>nobody:x:998:<br>docker:x:996:aurora<br>mysql:x:1001:<br>redis:x:125:<br>$ sort -t: -k3 -m /etc/group<br>root:x:0:<br>sudo:x:27:aurora<br>www-data:x:33:<br>games:x:60:<br>users:x:100:aurora<br>redis:x:125:<br>vboxusers:x:126:<br>docker:x:996:aurora<br>nobody:x:998:<br>aurora:x:1000:<br>mysql:x:1001:<br><br></code></pre></td></tr></table></figure><h1 id="文本去重"><a href="#文本去重" class="headerlink" title="文本去重"></a>文本去重</h1><h3 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h3><p>UNIX/Linux 系统中的另一条用于数据记录去重的命令。<code>uniq</code> 命令去除数据流中重复的记录，只留下第一条记录。</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">uniq [ -c | -d | -u ] [ InFile [ OutFile ]]<br></code></pre></td></tr></table></figure><h4 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h4><p><code>uniq</code> 命令读取由 <code>InFile</code> 参数指定的标准输入或文件，删除重复行。该命令首先比较相邻的行，然后去除第二行和该行的后续副本。<strong>重复的行一定相邻</strong>（在使用 <code>uniq</code> 命令之前，要先使用 <code>sort</code> 命令，使所有重复行相邻）。最后，<code>uniq</code> 将最终单独的行写入输出或由 <code>OutFile</code> 参数指定的文件。<code>InFile</code> 和 <code>OutFile</code> 参数必须指定不同的文件。</p><p>输入文件必须是文本文件，且文本文件中一行的长度不能超过 2048 个字节（包含所有换行符），并且其中不能包含空字符。</p><p>执行成功，返回0；失败，返回值大于0。</p><h4 id="标志"><a href="#标志" class="headerlink" title="标志"></a>标志</h4><ul><li><strong>-c</strong> 在输出行前面加上每行在输入文件中出现的次数。</li><li><strong>-d</strong> 仅显示重复行。</li><li><strong>-u</strong> 仅显示不重复的行。</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>删除重复行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">uniq file.txt<br>sort file.txt | uniq<br>sort -u file.txt<br></code></pre></td></tr></table></figure><p>只显示但一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">uniq -u file.txt<br>sort file.txt | uniq -u<br></code></pre></td></tr></table></figure><p>统计各行在文件中出现的次数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sort file.txt | uniq -c<br></code></pre></td></tr></table></figure><p>在文件中找出重复的行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sort file.txt | uniq -d<br></code></pre></td></tr></table></figure><p><em><code>uniq</code> 命令常常与其他工具结合使用，来去除文本中的冗余。</em></p><h1 id="统计文本行数、字数以及字符数"><a href="#统计文本行数、字数以及字符数" class="headerlink" title="统计文本行数、字数以及字符数"></a>统计文本行数、字数以及字符数</h1><h3 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h3><p>UNIX/Linux 中的 <code>wc</code> 命令可以提供文本的行数、字数、字符数统计。</p><p><strong>示例1</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ wc /etc/passwd<span class="hljs-comment"># 28行、54个单词、1411个字符</span><br>28   54 1411 /etc/passwd<br>$ wc -c /etc/passwd<span class="hljs-comment"># 1411个字符</span><br>1411 /etc/passwd<br>$ wc -w /etc/passwd<span class="hljs-comment"># 54个单词</span><br>54 /etc/passwd<br>$ wc -l /etc/passwd<span class="hljs-comment"># 28行</span><br>28 /etc/passwd<br></code></pre></td></tr></table></figure><p><strong>示例2</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ find /etc -iname <span class="hljs-string">&quot;*.conf&quot;</span> | wc -l<span class="hljs-comment"># 找出 /etc 文件夹下 conf 文件的个数</span><br>228<br>$ grep <span class="hljs-string">&quot;bash&quot;</span> /etc/passwd | wc -l<span class="hljs-comment"># 找出 /etc/passwd 文件中包含 bash 字符串的行数</span><br>3<br></code></pre></td></tr></table></figure><p>其实 <code>... grep str | wc -l</code> 有更简便的写法，它已经被集成到了 <code>grep</code> 命令，通过参数 <code>-c</code> 实现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ grep <span class="hljs-string">&quot;bash&quot;</span> /etc/passwd | wc -l<br>3<br>$ grep -c <span class="hljs-string">&quot;bash&quot;</span> /etc/passwd<span class="hljs-comment"># 这两条命令实现了相同的效果</span><br>3<br></code></pre></td></tr></table></figure><p><code>wc</code> 还可以同时统计多个文件中的数据，并且将统计结果汇总。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ wc /etc/*rc<br>   93   376  3003 /etc/bashrc<br>   72   204  1620 /etc/csh.cshrc<br>   42   114   942 /etc/inputrc<br>  216   868  6722 /etc/screenrc<br>   64   283  1982 /etc/vimrc<br>   64   283  1982 /etc/virc<br>  125   794  4479 /etc/wgetrc<br>  676  2922 20730 总用量<br></code></pre></td></tr></table></figure><p><em><code>wc</code> 命令统计 <code>/etc</code> 下所有以 <code>rc</code> 结尾的文件，统计他们中的字符数、单词数和行数，并且在最后一行将总计的结果打印出来。</em></p><h1 id="打印和格式化输出"><a href="#打印和格式化输出" class="headerlink" title="打印和格式化输出"></a>打印和格式化输出</h1><h2 id="使用-pr-打印文件"><a href="#使用-pr-打印文件" class="headerlink" title="使用 pr 打印文件"></a>使用 <code>pr</code> 打印文件</h2><h3 id="pr"><a href="#pr" class="headerlink" title="pr"></a>pr</h3><p>UNIX/Linux 的 <code>pr</code> 命令可以用来将文本转换成适合打印的文件。</p><p>这个工具的基本用途就是将较大的文件分割成多个页面，并为每个页面添加标题。</p><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pr --<span class="hljs-built_in">help</span><br>用法：pr [选项]... [文件]...<br>如果没有指定文件，或者文件为<span class="hljs-string">&quot;-&quot;</span>，则从标准输入读取。<br><br>必选参数对长短选项同时适用。<br>  +首页[:末页], --pages=首页[:末页]<br>在指定的首页/末页处开始/停止打印<br>  -列数, --columns=列数<br>输出指定的列数。如果指定了-a 选项，则从上到下列印。<br>程序会自动在每一页均衡每列占用的行数。<br>  -a, --across设置每列从上到下输出，配合<span class="hljs-string">&quot;-列数&quot;</span>选项一起使用<br>  -c, --show-control-chars<br>使用头标(^G)和八进制反斜杠标记<br>  -d, --double-space加倍输出空白区域<br>  -D, --date-format=格式<br>使用遵循指定格式的页眉日期<br>  -e[字符[宽度]], --expand-tabs[=字符[宽度]]<br>扩展输入的字符(制表符) 到制表符宽度(8)<br>  -F, -f, --form-feed使用出纸页页标代替新行作为页面间的分隔符<br>(使用-F 选项时报头为3 行,不使用时为5 行)<br>  -h, --header=页眉在页眉中使用居中的指定字符代替文件名<br>-h <span class="hljs-string">&quot;&quot;</span> 输出一个空行，不要使用 -h<span class="hljs-string">&quot;&quot;</span><br>  -i[字符[宽度]], --output-tabs[=字符[宽度]]<br>使用指定字符(或制表符)代替空格不足到指定制表符宽度(默认8)<br>  -J, --join-lines合并整个行，关闭-W 选项的行截断，不使用栏调整，使用<br>--sep-string[=字符串] 设置分隔符<br>  -l, --length=PAGE_LENGTH<br>                    <span class="hljs-built_in">set</span> the page length to PAGE_LENGTH (66) lines<br>                    (default number of lines of text 56, and with -F 63).<br>                    implies -t <span class="hljs-keyword">if</span> PAGE_LENGTH &lt;= 10<br>  -m, --merge       <span class="hljs-built_in">print</span> all files <span class="hljs-keyword">in</span> parallel, one <span class="hljs-keyword">in</span> each column,<br>                    truncate lines, but join lines of full length with -J<br>  -n[分隔符[位数]], --number-lines[=分隔符[位数]]<br>显示行号，使用指定(默认5) 位数，后接分隔符(默认TAB)<br>默认从输入文件的第一行开始计数<br>  -N, --first-line-number=数字<br>从首页的首行以指定数字开始计数(参看<span class="hljs-string">&quot;+首页&quot;</span>)<br>  -o, --indent=缩进量<br>将每行缩进(默认0)个空格，不影响-w 或-W 参数，<br>缩进亮的值将被加入页面宽度<br>  -r, --no-file-warnings<br>当文件无法打开时忽略警告<br>  -s[CHAR], --separator[=CHAR]<br>                    separate columns by a single character, default <span class="hljs-keyword">for</span> CHAR<br>                    is the &lt;TAB&gt; character without -w and <span class="hljs-string">&#x27;no char&#x27;</span> with -w.<br>                    -s[CHAR] turns off line truncation of all 3 column<br>                    options (-COLUMN|-a -COLUMN|-m) except -w is <span class="hljs-built_in">set</span><br>  -S[STRING], --sep-string[=STRING]<br>                    separate columns by STRING,<br>                    without -S: Default separator &lt;TAB&gt; with -J and &lt;space&gt;<br>                    otherwise (same as -S<span class="hljs-string">&quot; &quot;</span>), no effect on column options<br>  -t, --omit-header  omit page headers and trailers;<br>                     implied <span class="hljs-keyword">if</span> PAGE_LENGTH &lt;= 10<br>  -T, --omit-pagination<br>按照输入文件中的设置忽略页眉和页脚并除去所有分页记号<br>  -v, --show-nonprinting<br>使用八进制反斜杠标记<br>  -w, --width=页面宽度<br>为多栏页面输出将设置为指定的字符数(默认72)，<br>仅当-s[char] 选项不启用时有效(即保持默认值 72)。<br>  -W, --page-width=页宽<br>总是将页宽设置为指定的(默认72)字符数，<br>除非-J 选项启用总是截断行，此参数与-S 或-s 冲突<br>      --<span class="hljs-built_in">help</span>显示此帮助信息并退出<br>      --version显示版本信息并退出<br></code></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cat /tmp/a.txt<br>TUBITAK Kamu SM SSL Kok Sertifikasi - Surum 1<br>=============================================<br>-----BEGIN CERTIFICATE-----<br>MIIEYzCCA0ugAwIBAgIBATANBgkqhkiG9w0BAQsFADCB0jELMAkGA1UEBhMCVFIxGDAWBgNVBAcT<br>D0dlYnplIC0gS29jYWVsaTFCMEAGA1UEChM5VHVya2l5ZSBCaWxpbXNlbCB2ZSBUZWtub2xvamlr<br>IEFyYXN0aXJtYSBLdXJ1bXUgLSBUVUJJVEFLMS0wKwYDVQQLEyRLYW11IFNlcnRpZmlrYXN5b24g<br>TWVya2V6aSAtIEthbXUgU00xNjA0BgNVBAMTLVRVQklUQUsgS2FtdSBTTSBTU0wgS29rIFNlcnRp<br>ZmlrYXNpIC0gU3VydW0gMTAeFw0xMzExMjUwODI1NTVaFw00MzEwMjUwODI1NTVaMIHSMQswCQYD<br>VQQGEwJUUjEYMBYGA1UEBxMPR2ViemUgLSBLb2NhZWxpMUIwQAYDVQQKEzlUdXJraXllIEJpbGlt<br>c2VsIHZlIFRla25vbG9qaWsgQXJhc3Rpcm1hIEt1cnVtdSAtIFRVQklUQUsxLTArBgNVBAsTJEth<br>bXUgU2VydGlmaWthc3lvbiBNZXJrZXppIC0gS2FtdSBTTTE2MDQGA1UEAxMtVFVCSVRBSyBLYW11<br>IFNNIFNTTCBLb2sgU2VydGlmaWthc2kgLSBTdXJ1bSAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A<br>MIIBCgKCAQEAr3UwM6q7a9OZLBI3hNmNe5eA027n/5tQlT6QlVZC1xl8JoSNkvoBHToP4mQ4t4y8<br>6Ij5iySrLqP1N+RAjhgleYN1Hzv/bKjFxlb4tO2KRKOrbEz8HdDc72i9z+SqzvBV96I01INrN3wc<br>wv61A+xXzry0tcXtAA9TNypN9E8Mg/uGz8v+jE69h/mniyFXnHrfA2eJLJ2XYacQuFWQfw4tJzh0<br>3+f92k4S400VIgLI4OD8D62K18lUUMw7D8oWgITQUVbDjlZ/iSIzL+aFCr2lqBs23tPcLG07xxO9<br>WSMs5uWk99gL7eqQQESolbuT1dCANLZGeA4fAJNG4e7p+exPFwIDAQABo0IwQDAdBgNVHQ4EFgQU<br>ZT/HiobGPN08VFw1+DrtUgxHV8gwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wDQYJ<br>KoZIhvcNAQELBQADggEBACo/4fEyjq7hmFxLXs9rHmoJ0iKpEsdeV31zVmSAhHqT5Am5EM2fKifh<br>AHe+SMg1qIGf5LgsyX8OsNJLN13qudULXjS99HMpw+0mFZx+CFOKWI3QSyjfwbPfIPP54+M638yc<br>lNhOT8NrF7f3cuitZjO1JVOr4PhMqZ398g26rrnZqsZr+ZO7rqu4lzwDGrpDxpa5RXI4s6ehlj2R<br>e37AIVNMh+3yC1SVUZPVIqUNivGTDj5UDrDYyU7c8jEyVupk+eq1nRZmQnLzf9OxMUP8pI4X8W0j<br>q5Rm+K37DwhuJi1/FwcJsoz7UMCflo3Ptv0AnVoUmr8CRPXBwp8iXqIPoeM=<br>-----END CERTIFICATE-----<br><br>$ pr -h <span class="hljs-string">&quot;pr打印输出文件&quot;</span>  /tmp/a.txt <br><br><br>2019-04-24 15:04                 pr打印输出文件                  第 1 页<br><br><br>TUBITAK Kamu SM SSL Kok Sertifikasi - Surum 1<br>=============================================<br>-----BEGIN CERTIFICATE-----<br>MIIEYzCCA0ugAwIBAgIBATANBgkqhkiG9w0BAQsFADCB0jELMAkGA1UEBhMCVFIxGDAWBgNVBAcT<br>D0dlYnplIC0gS29jYWVsaTFCMEAGA1UEChM5VHVya2l5ZSBCaWxpbXNlbCB2ZSBUZWtub2xvamlr<br>IEFyYXN0aXJtYSBLdXJ1bXUgLSBUVUJJVEFLMS0wKwYDVQQLEyRLYW11IFNlcnRpZmlrYXN5b24g<br>TWVya2V6aSAtIEthbXUgU00xNjA0BgNVBAMTLVRVQklUQUsgS2FtdSBTTSBTU0wgS29rIFNlcnRp<br>ZmlrYXNpIC0gU3VydW0gMTAeFw0xMzExMjUwODI1NTVaFw00MzEwMjUwODI1NTVaMIHSMQswCQYD<br>VQQGEwJUUjEYMBYGA1UEBxMPR2ViemUgLSBLb2NhZWxpMUIwQAYDVQQKEzlUdXJraXllIEJpbGlt<br>c2VsIHZlIFRla25vbG9qaWsgQXJhc3Rpcm1hIEt1cnVtdSAtIFRVQklUQUsxLTArBgNVBAsTJEth<br>bXUgU2VydGlmaWthc3lvbiBNZXJrZXppIC0gS2FtdSBTTTE2MDQGA1UEAxMtVFVCSVRBSyBLYW11<br>IFNNIFNTTCBLb2sgU2VydGlmaWthc2kgLSBTdXJ1bSAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A<br>MIIBCgKCAQEAr3UwM6q7a9OZLBI3hNmNe5eA027n/5tQlT6QlVZC1xl8JoSNkvoBHToP4mQ4t4y8<br>6Ij5iySrLqP1N+RAjhgleYN1Hzv/bKjFxlb4tO2KRKOrbEz8HdDc72i9z+SqzvBV96I01INrN3wc<br>wv61A+xXzry0tcXtAA9TNypN9E8Mg/uGz8v+jE69h/mniyFXnHrfA2eJLJ2XYacQuFWQfw4tJzh0<br>3+f92k4S400VIgLI4OD8D62K18lUUMw7D8oWgITQUVbDjlZ/iSIzL+aFCr2lqBs23tPcLG07xxO9<br>WSMs5uWk99gL7eqQQESolbuT1dCANLZGeA4fAJNG4e7p+exPFwIDAQABo0IwQDAdBgNVHQ4EFgQU<br>ZT/HiobGPN08VFw1+DrtUgxHV8gwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wDQYJ<br>KoZIhvcNAQELBQADggEBACo/4fEyjq7hmFxLXs9rHmoJ0iKpEsdeV31zVmSAhHqT5Am5EM2fKifh<br>AHe+SMg1qIGf5LgsyX8OsNJLN13qudULXjS99HMpw+0mFZx+CFOKWI3QSyjfwbPfIPP54+M638yc<br>lNhOT8NrF7f3cuitZjO1JVOr4PhMqZ398g26rrnZqsZr+ZO7rqu4lzwDGrpDxpa5RXI4s6ehlj2R<br>e37AIVNMh+3yC1SVUZPVIqUNivGTDj5UDrDYyU7c8jEyVupk+eq1nRZmQnLzf9OxMUP8pI4X8W0j<br>q5Rm+K37DwhuJi1/FwcJsoz7UMCflo3Ptv0AnVoUmr8CRPXBwp8iXqIPoeM=<br>-----END CERTIFICATE-----<br></code></pre></td></tr></table></figure><p>使用 <code>pr</code> 格式化后的文件输出，多了日期、标题和页数，以及多个空行部分。</p><p><code>-h</code> 标注了打印文件的标题，如果没有使用 <code>-h</code> ，则默认标题就是这个文件的文件名。如果不想显示标题，可以使用 <code>-t</code> 参数。</p><h2 id="使用-fmt-命令格式化文本"><a href="#使用-fmt-命令格式化文本" class="headerlink" title="使用 fmt 命令格式化文本"></a>使用 <code>fmt</code> 命令格式化文本</h2><p>除了 <code>pr</code> 命令，UNIX/Linux 下还有一条 <code>fmt</code> 命令可以格式化文本段落，使文本不超出可见的屏幕范围。</p><p><code>fmt</code> 命令读取文件的内容，根据选项的设置对文件格式进行简单的优化处理，并将结果送到标准输出设备。</p><h3 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h3><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ fmt --<span class="hljs-built_in">help</span><br>用法：fmt [-宽度] [选项]... [文件]...<br>Reformat each paragraph <span class="hljs-keyword">in</span> the FILE(s), writing to standard output.<br>The option -WIDTH is an abbreviated form of --width=DIGITS.<br><br>如果没有指定文件，或者文件为<span class="hljs-string">&quot;-&quot;</span>，则从标准输入读取。<br><br>必选参数对长短选项同时适用。<br>  -c --crown-margin保持前两行的缩进<br>  -p, --prefix=字符串只对以指定字符串开头的行重新格式化，<br>将前缀重新附着到被重新格式化的行上<br>  -s, --split-only分割过长的行，但不自动补足<br>  -t, --tagged-paragraph    第一行的缩进与第二行不同<br>  -u, --uniform-spacing     单词之间有一个空格，句子后面有两个空格<br>  -w, --width=WIDTH         最大行宽 (默认 75 列)<br>  -g, --goal=WIDTH          goal width (default of 93% of width)<br>      --<span class="hljs-built_in">help</span>显示此帮助信息并退出<br>      --version显示版本信息并退出<br></code></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cat /tmp/a.txt | fmt -w 10<br>TUBITAK<br>Kamu SM<br>SSL Kok<br>Sertifikasi<br>- Surum 1<br>=============================================<br>-----BEGIN<br>CERTIFICATE-----<br>MIIEYzCCA0ugAwIBAgIBATANBgkqhkiG9w0BAQsFADCB0jELMAkGA1UEBhMCVFIxGDAWBgNVBAcT<br>D0dlYnplIC0gS29jYWVsaTFCMEAGA1UEChM5VHVya2l5ZSBCaWxpbXNlbCB2ZSBUZWtub2xvamlr<br>IEFyYXN0aXJtYSBLdXJ1bXUgLSBUVUJJVEFLMS0wKwYDVQQLEyRLYW11IFNlcnRpZmlrYXN5b24g<br>TWVya2V6aSAtIEthbXUgU00xNjA0BgNVBAMTLVRVQklUQUsgS2FtdSBTTSBTU0wgS29rIFNlcnRp<br>ZmlrYXNpIC0gU3VydW0gMTAeFw0xMzExMjUwODI1NTVaFw00MzEwMjUwODI1NTVaMIHSMQswCQYD<br>VQQGEwJUUjEYMBYGA1UEBxMPR2ViemUgLSBLb2NhZWxpMUIwQAYDVQQKEzlUdXJraXllIEJpbGlt<br>c2VsIHZlIFRla25vbG9qaWsgQXJhc3Rpcm1hIEt1cnVtdSAtIFRVQklUQUsxLTArBgNVBAsTJEth<br>bXUgU2VydGlmaWthc3lvbiBNZXJrZXppIC0gS2FtdSBTTTE2MDQGA1UEAxMtVFVCSVRBSyBLYW11<br>IFNNIFNTTCBLb2sgU2VydGlmaWthc2kgLSBTdXJ1bSAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A<br>MIIBCgKCAQEAr3UwM6q7a9OZLBI3hNmNe5eA027n/5tQlT6QlVZC1xl8JoSNkvoBHToP4mQ4t4y8<br>6Ij5iySrLqP1N+RAjhgleYN1Hzv/bKjFxlb4tO2KRKOrbEz8HdDc72i9z+SqzvBV96I01INrN3wc<br>wv61A+xXzry0tcXtAA9TNypN9E8Mg/uGz8v+jE69h/mniyFXnHrfA2eJLJ2XYacQuFWQfw4tJzh0<br>3+f92k4S400VIgLI4OD8D62K18lUUMw7D8oWgITQUVbDjlZ/iSIzL+aFCr2lqBs23tPcLG07xxO9<br>WSMs5uWk99gL7eqQQESolbuT1dCANLZGeA4fAJNG4e7p+exPFwIDAQABo0IwQDAdBgNVHQ4EFgQU<br>ZT/HiobGPN08VFw1+DrtUgxHV8gwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wDQYJ<br>KoZIhvcNAQELBQADggEBACo/4fEyjq7hmFxLXs9rHmoJ0iKpEsdeV31zVmSAhHqT5Am5EM2fKifh<br>AHe+SMg1qIGf5LgsyX8OsNJLN13qudULXjS99HMpw+0mFZx+CFOKWI3QSyjfwbPfIPP54+M638yc<br>lNhOT8NrF7f3cuitZjO1JVOr4PhMqZ398g26rrnZqsZr+ZO7rqu4lzwDGrpDxpa5RXI4s6ehlj2R<br>e37AIVNMh+3yC1SVUZPVIqUNivGTDj5UDrDYyU7c8jEyVupk+eq1nRZmQnLzf9OxMUP8pI4X8W0j<br>q5Rm+K37DwhuJi1/FwcJsoz7UMCflo3Ptv0AnVoUmr8CRPXBwp8iXqIPoeM=<br>-----END<br>CERTIFICATE-----<br></code></pre></td></tr></table></figure><p><code>-w 10</code> 告诉 <code>fmt</code> 命令每行最大字符数。当 <code>fmt</code> 命令在打印时发现某行已经达到最大字符数，但是某个单词为呢过完全显示，则 <code>fmt</code> 将该单词置于下一行来显示。</p><p><strong>Notice：</strong> <em>无论是 <code>pr</code> 还是 <code>fmt</code>，在不同版本的系统中的行为都不尽相同。因此需要在不同版本的系统上查阅 manpage，来确定格式化输出工具的功能。</em></p><h2 id="使用-fold-限制文本宽度"><a href="#使用-fold-限制文本宽度" class="headerlink" title="使用 fold 限制文本宽度"></a>使用 <code>fold</code> 限制文本宽度</h2><p>控制文件内容输出时所占用的屏幕宽度。</p><p><code>fold</code> 用于控制文件内容输出时所占用的屏幕宽度。<code>fold</code> 命令会从指定的文件里读取内容，将超过限定列宽的列加入增列字符后，输出到标准输出设备。若不指定任何文件名称，或是所给予的文件名为“-”，则 <code>fold</code> 指令会从标准输入设备读取数据。</p><h3 id="fold"><a href="#fold" class="headerlink" title="fold"></a>fold</h3><h4 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">用法：fold [选项]... [文件]...<br>Wrap input lines <span class="hljs-keyword">in</span> each FILE, writing to standard output.<br><br>如果没有指定文件，或者文件为<span class="hljs-string">&quot;-&quot;</span>，则从标准输入读取。<br><br>必选参数对长短选项同时适用。<br>  -b, --bytes计算字节数而不是列数<br>  -s,  --spaces在空格处断行<br>  -w, --width=宽度使用指定的列宽度代替默认的80<br>      --<span class="hljs-built_in">help</span>显示此帮助信息并退出<br>      --version显示版本信息并退出<br></code></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ fold -w 50 /tmp/a.txt  -s<br>TUBITAK Kamu SM SSL Kok Sertifikasi - Surum 1<br>=============================================<br>-----BEGIN CERTIFICATE-----<br>MIIEYzCCA0ugAwIBAgIBATANBgkqhkiG9w0BAQsFADCB0jELMA<br>kGA1UEBhMCVFIxGDAWBgNVBAcT<br>D0dlYnplIC0gS29jYWVsaTFCMEAGA1UEChM5VHVya2l5ZSBCaW<br>xpbXNlbCB2ZSBUZWtub2xvamlr<br>IEFyYXN0aXJtYSBLdXJ1bXUgLSBUVUJJVEFLMS0wKwYDVQQLEy<br>RLYW11IFNlcnRpZmlrYXN5b24g<br>TWVya2V6aSAtIEthbXUgU00xNjA0BgNVBAMTLVRVQklUQUsgS2<br>FtdSBTTSBTU0wgS29rIFNlcnRp<br>ZmlrYXNpIC0gU3VydW0gMTAeFw0xMzExMjUwODI1NTVaFw00Mz<br>EwMjUwODI1NTVaMIHSMQswCQYD<br>VQQGEwJUUjEYMBYGA1UEBxMPR2ViemUgLSBLb2NhZWxpMUIwQA<br>YDVQQKEzlUdXJraXllIEJpbGlt<br>c2VsIHZlIFRla25vbG9qaWsgQXJhc3Rpcm1hIEt1cnVtdSAtIF<br>RVQklUQUsxLTArBgNVBAsTJEth<br>bXUgU2VydGlmaWthc3lvbiBNZXJrZXppIC0gS2FtdSBTTTE2MD<br>QGA1UEAxMtVFVCSVRBSyBLYW11<br>IFNNIFNTTCBLb2sgU2VydGlmaWthc2kgLSBTdXJ1bSAxMIIBIj<br>ANBgkqhkiG9w0BAQEFAAOCAQ8A<br>MIIBCgKCAQEAr3UwM6q7a9OZLBI3hNmNe5eA027n/5tQlT6QlV<br>ZC1xl8JoSNkvoBHToP4mQ4t4y8<br>6Ij5iySrLqP1N+RAjhgleYN1Hzv/bKjFxlb4tO2KRKOrbEz8Hd<br>Dc72i9z+SqzvBV96I01INrN3wc<br>wv61A+xXzry0tcXtAA9TNypN9E8Mg/uGz8v+jE69h/mniyFXnH<br>rfA2eJLJ2XYacQuFWQfw4tJzh0<br>3+f92k4S400VIgLI4OD8D62K18lUUMw7D8oWgITQUVbDjlZ/iS<br>IzL+aFCr2lqBs23tPcLG07xxO9<br>WSMs5uWk99gL7eqQQESolbuT1dCANLZGeA4fAJNG4e7p+exPFw<br>IDAQABo0IwQDAdBgNVHQ4EFgQU<br>ZT/HiobGPN08VFw1+DrtUgxHV8gwDgYDVR0PAQH/BAQDAgEGMA<br>8GA1UdEwEB/wQFMAMBAf8wDQYJ<br>KoZIhvcNAQELBQADggEBACo/4fEyjq7hmFxLXs9rHmoJ0iKpEs<br>deV31zVmSAhHqT5Am5EM2fKifh<br>AHe+SMg1qIGf5LgsyX8OsNJLN13qudULXjS99HMpw+0mFZx+CF<br>OKWI3QSyjfwbPfIPP54+M638yc<br>lNhOT8NrF7f3cuitZjO1JVOr4PhMqZ398g26rrnZqsZr+ZO7rq<br>u4lzwDGrpDxpa5RXI4s6ehlj2R<br>e37AIVNMh+3yC1SVUZPVIqUNivGTDj5UDrDYyU7c8jEyVupk+e<br>q1nRZmQnLzf9OxMUP8pI4X8W0j<br>q5Rm+K37DwhuJi1/FwcJsoz7UMCflo3Ptv0AnVoUmr8CRPXBwp<br>8iXqIPoeM=<br>-----END CERTIFICATE-----<br></code></pre></td></tr></table></figure><p><code>fold</code> 命令的参数 <code>-w</code> 限定每行宽度为 50，超出这个宽度就会被截断到下一行输出。</p><h1 id="提取文本开头和结尾"><a href="#提取文本开头和结尾" class="headerlink" title="提取文本开头和结尾"></a>提取文本开头和结尾</h1><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><h4 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">用法：head [选项]... [文件]...<br>默认显示文件的头 10 行内容到标准输出。<br>对于多个文件，在每个文件前面都加上一个给出文件名的头<br><br>如果没有指定文件，或者文件为<span class="hljs-string">&quot;-&quot;</span>，则从标准输入读取。<br><br>必选参数对长短选项同时适用。<br>  -c, --bytes=[-]NUM       <span class="hljs-built_in">print</span> the first NUM bytes of each file;<br>                             with the leading <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-built_in">print</span> all but the last NUM bytes of each file<br>  -n, --lines=[-]NUM       <span class="hljs-built_in">print</span> the first NUM lines instead of the first 10;<br>                             with the leading <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-built_in">print</span> all but the last NUM lines of each file<br>  -q, --quiet, --silent不显示包含给定文件名的文件头<br>  -v, --verbose总是显示包含给定文件名的文件头<br>  -z, --zero-terminated    line delimiter is NUL, not newline<br>      --<span class="hljs-built_in">help</span>显示此帮助信息并退出<br>      --version显示版本信息并退出<br></code></pre></td></tr></table></figure><p><code>head</code> 命令用来显示文件（或多个文件）的开头若干行。</p><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><h4 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">用法：tail [选项]... [文件]...<br>Print the last 10 lines of each FILE to standard output.<br>With more than one FILE, precede each with a header giving the file name.<br><br>如果没有指定文件，或者文件为<span class="hljs-string">&quot;-&quot;</span>，则从标准输入读取。<br><br>必选参数对长短选项同时适用。<br>  -c, --bytes=[+]NUM       output the last NUM bytes; or use -c +NUM to output starting with byte NUM of each file<br>  -f, --follow[=&#123;name|descriptor&#125;]<br>          output appended data as the file grows;<br>          an absent option argument means <span class="hljs-string">&#x27;descriptor&#x27;</span><br>  -F      same as --follow=name --retry<br>  -n, --lines=[+]NUM       output the last NUM lines, instead of the last 10; or use -n +NUM to output starting with line NUM<br>      --max-unchanged-stats=N<br>                           with --follow=name, reopen a FILE <span class="hljs-built_in">which</span> has not changed size after N (default 5) iterations to see <span class="hljs-keyword">if</span> it has been unlinked or renamed (this is the usual <span class="hljs-keyword">case</span> of rotated <span class="hljs-built_in">log</span> files); with inotify, this option is rarely useful<br>      --pid=PID            with -f, terminate after process ID, PID dies<br>  -q, --quiet, --silent    never output headers giving file names<br>      --retry              keep trying to open a file <span class="hljs-keyword">if</span> it is inaccessible<br>  -s, --sleep-interval=N   with -f, sleep <span class="hljs-keyword">for</span> approximately N seconds<br>                             (default 1.0) between iterations;<br>                             with inotify and --pid=P, check process P at<br>                             least once every N seconds<br>  -v, --verbose            always output headers giving file names<br>  -z, --zero-terminated    line delimiter is NUL, not newline<br>      --<span class="hljs-built_in">help</span>显示此帮助信息并退出<br>      --version显示版本信息并退出<br></code></pre></td></tr></table></figure><p><code>tail</code> 命令和 <code>head</code> 命令的功能正好相反，用于显示文件的结尾若干行。参数也差不多。</p><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ head /usr/include/stdio.h<br>/* Define ISO C stdio on top of C++ iostreams.<br>   Copyright (C) 1991-2018 Free Software Foundation, Inc.<br>   This file is part of the GNU C Library.<br><br>   The GNU C Library is free software; you can redistribute it and/or<br>   modify it under the terms of the GNU Lesser General Public<br>   License as published by the Free Software Foundation; either<br>   version 2.1 of the License, or (at your option) any later version.<br><br>   The GNU C Library is distributed <span class="hljs-keyword">in</span> the hope that it will be useful,<br>$ head -5 /usr/include/stdio.h<br>/* Define ISO C stdio on top of C++ iostreams.<br>   Copyright (C) 1991-2018 Free Software Foundation, Inc.<br>   This file is part of the GNU C Library.<br><br>   The GNU C Library is free software; you can redistribute it and/or<br>$ tail /usr/include/stdio.h<br><span class="hljs-comment">#if __USE_FORTIFY_LEVEL &gt; 0 &amp;&amp; defined __fortify_function</span><br><span class="hljs-comment"># include &lt;bits/stdio2.h&gt;</span><br><span class="hljs-comment">#endif</span><br><span class="hljs-comment">#ifdef __LDBL_COMPAT</span><br><span class="hljs-comment"># include &lt;bits/stdio-ldbl.h&gt;</span><br><span class="hljs-comment">#endif</span><br><br>__END_DECLS<br><br><span class="hljs-comment">#endif /* &lt;stdio.h&gt; included.  */</span><br>$ tail -5  /usr/include/stdio.h<br><span class="hljs-comment">#endif</span><br><br>__END_DECLS<br><br><span class="hljs-comment">#endif /* &lt;stdio.h&gt; included.  */</span><br></code></pre></td></tr></table></figure><h1 id="字段处理"><a href="#字段处理" class="headerlink" title="字段处理"></a>字段处理</h1><h2 id="使用-cut-取出字段"><a href="#使用-cut-取出字段" class="headerlink" title="使用 cut 取出字段"></a>使用 <code>cut</code> 取出字段</h2><p>有时经常会遇到这样的问题：有一页电话号码簿，上面按顺序规则地写着姓名、地址、电话、备注等。此时我们只需要所有人的姓名和电话号码，如何解决呢？</p><p><code>cut</code> 命令被设计出来已解决这类问题。<code>cut</code> 命令可以从一个文本文件或文本流中提取文本列。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cut -d <span class="hljs-string">&#x27;:&#x27;</span> -f 1,7 /etc/passwd | grep bash<br>root:/bin/bash<br>aurora:/bin/bash<br>$ cut -d <span class="hljs-string">&#x27;:&#x27;</span> -f 1,6,7 /etc/passwd | grep bash | cut -d <span class="hljs-string">&#x27;:&#x27;</span> -f 1,2<br>root:/root<br>aurora:/home/aurora<br></code></pre></td></tr></table></figure><p>这个例子中使用了 <code>cut</code> 的两个参数：</p><p><strong>-d ‘:’</strong> <code>-d</code> 参数规定了 <code>cut</code> 命令接受的字段分隔符。示例中的分隔符就是冒号（:）。</p><p><strong>-f 1,7</strong> <code>-f</code> 参数规定了 <code>cut</code> 命令获取的字段列。此处的 <code>-f 1,7</code> 使 <code>cut</code> 截取每行的第一列和第七列字段。</p><h3 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h3><h4 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">用法：cut [选项]... [文件]...<br>将每个文件中选定的行部分打印到标准输出。<br><br>如果没有指定文件，或者文件为<span class="hljs-string">&quot;-&quot;</span>，则从标准输入读取。<br><br>必选参数对长短选项同时适用。<br>  -b, --bytes=列表只选中指定的这些字节<br>  -c, --characters=列表只选中指定的这些字符<br>  -d, --delimiter=分界符使用指定分界符代替制表符作为区域分界<br>  -f, --fields=列表只选中指定的这些域；并打印所有不包含分界符的<br>行，除非-s 选项被指定<br>  -n(忽略)<br>      --complement补全选中的字节、字符或域<br>  -s, --only-delimited不打印没有包含分界符的行<br>      --output-delimiter=字符串使用指定的字符串作为输出分界符，默认采用输入<br>的分界符<br>  -z, --zero-terminated    line delimiter is NUL, not newline<br>      --<span class="hljs-built_in">help</span>显示此帮助信息并退出<br>      --version显示版本信息并退出<br><br>仅使用f -b, -c 或-f 中的一个。每一个列表都是专门为一个类别作出的，或者您可以用逗号隔<br>开要同时显示的不同类别。您的输入顺序将作为读取顺序，每个仅能输入一次。<br>Each range is one of:<br><br>  N     N<span class="hljs-string">&#x27;th byte, character or field, counted from 1</span><br><span class="hljs-string">  N-    from N&#x27;</span>th byte, character or field, to end of line<br>  N-M   from N<span class="hljs-string">&#x27;th to M&#x27;</span>th (included) byte, character or field<br>  -M    from first to M<span class="hljs-string">&#x27;th (included) byte, character or field</span><br></code></pre></td></tr></table></figure><h2 id="使用-join-连接字段"><a href="#使用-join-连接字段" class="headerlink" title="使用 join 连接字段"></a>使用 join 连接字段</h2><p>Linux 下的 <code>join</code> 可以连接不同的文件，使得具有相同 key 值的记录信息连接到一起。它会根据指定栏位，找到两个文件中指定栏位内容相同的行，将他们合并，并根据要求的格式输出内容。</p><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cat product.txt<br>100 Jason Smith<br>200 John Doe<br>300 SanJay Gupta<br>400 Ashok Sharma<br>500 Aurora Lzdf<br><br>$ cat price.txt <br>100 <span class="hljs-variable">$5</span>,000<br>200 <span class="hljs-variable">$500</span><br>300 <span class="hljs-variable">$3</span>,000<br>400 <span class="hljs-variable">$1</span>,250<br>500 <span class="hljs-variable">$1</span>,000,000<br><br>$ join product.txt price.txt<br>100 Jason Smith <span class="hljs-variable">$5</span>,000<br>200 John Doe <span class="hljs-variable">$500</span><br>300 SanJay Gupta <span class="hljs-variable">$3</span>,000<br>400 Ashok Sharma <span class="hljs-variable">$1</span>,250<br>500 Aurora Lzdf <span class="hljs-variable">$1</span>,000,000<br><br></code></pre></td></tr></table></figure><p>在这个例子中，key 值相同的两行被连接成了一行。</p><p><strong>示例2</strong> <em>join 显示不匹配的行</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cat product.txt<br>100 Jason Smith<br>150 Ollir zhang<span class="hljs-comment"># ---------- 新增</span><br>200 John Doe<br>300 SanJay Gupta<br>350 uncle wang<span class="hljs-comment"># ---------- 新增</span><br>400 Ashok Sharma<br>500 Aurora Lzdf<br><br>$ cat price.txt <br>100 <span class="hljs-variable">$5</span>,000<br>200 <span class="hljs-variable">$500</span><br>300 <span class="hljs-variable">$3</span>,000<br>400 <span class="hljs-variable">$1</span>,250<br>500 <span class="hljs-variable">$1</span>,000,000<br>600 <span class="hljs-variable">$3</span>,128<span class="hljs-comment"># ---------- 新增</span><br><br>$ join product.txt price.txt -a1<span class="hljs-comment"># ①</span><br>100 Jason Smith <span class="hljs-variable">$5</span>,000<br>150 Ollir zhang<span class="hljs-comment"># ---------- 显示</span><br>200 John Doe <span class="hljs-variable">$500</span><br>300 SanJay Gupta <span class="hljs-variable">$3</span>,000<br>350 uncle wang<span class="hljs-comment"># ---------- 显示</span><br>400 Ashok Sharma <span class="hljs-variable">$1</span>,250<br>500 Aurora Lzdf <span class="hljs-variable">$1</span>,000,000<br><br>$ join product.txt price.txt -a2<span class="hljs-comment"># ②</span><br>100 Jason Smith <span class="hljs-variable">$5</span>,000<br>200 John Doe <span class="hljs-variable">$500</span><br>300 SanJay Gupta <span class="hljs-variable">$3</span>,000<br>400 Ashok Sharma <span class="hljs-variable">$1</span>,250<br>500 Aurora Lzdf <span class="hljs-variable">$1</span>,000,000<br>600 <span class="hljs-variable">$3</span>,128<span class="hljs-comment"># ---------- 显示</span><br><br></code></pre></td></tr></table></figure><p>在这个例子中使用了 join 的一个参数：</p><p><code>-a FileNumber</code></p><p>该参数限定了 <code>join</code> 输出的记录行，由 <code>-a</code> 紧跟的 <code>FileNumber</code> 决定。<code>FileNumber</code> 必须是 1 或 2，分别对应于 <code>join</code> 命令的第一个文件参数和第二个文件参数。</p><p><strong>注释①：</strong> <code>-a1</code> 参数限定 <code>join</code> 的输出结果和 <code>product.txt</code> 中的记录一一对应。当 <code>price.txt</code> 匹配不上 key 时，则仅仅显示 <code>product.txt</code> 中的记录。</p><p><strong>注释②：</strong> <code>-a2</code> 参数限定 <code>join</code> 的输出结果和 price.txt` 中的记录一一对应。</p><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><h4 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">用法：join [选项]... 文件1 文件2<br>对于具有相同连接字段的每对输入行，写一行到标准输出。默认连接字段是第一个，由空格分隔。<br><br>如果第一个文件参数或者第二个文件参数为 ‘-’，则从标准输入读取内容<br><br>  -a FILENUM        also <span class="hljs-built_in">print</span> unpairable lines from file FILENUM, <span class="hljs-built_in">where</span><br>                      FILENUM is 1 or 2, corresponding to FILE1 or FILE2<br>  -e EMPTY          replace missing input fields with EMPTY<br>  -i, --ignore-case  ignore differences <span class="hljs-keyword">in</span> <span class="hljs-keyword">case</span> when comparing fields<br>  -j FIELD          equivalent to <span class="hljs-string">&#x27;-1 FIELD -2 FIELD&#x27;</span><br>  -o FORMAT         obey FORMAT <span class="hljs-keyword">while</span> constructing output line<br>  -t CHAR           use CHAR as input and output field separator<br>  -v 文件编号        类似 -a 文件编号，但禁止组合输出行<br>  -1 域          在文件1 的此域组合<br>  -2 域          在文件2 的此域组合<br>  --check-order     检查输入行是否正确排序，即使所有输入行均是成对的<br>  --nocheck-order   不检查输入是否正确排序<br>  --header          将首行视作域的头部，直接输出而不对其进行匹配<br>  -z, --zero-terminated     line delimiter is NUL, not newline<br>      --<span class="hljs-built_in">help</span>显示此帮助信息并退出<br>      --version显示版本信息并退出<br></code></pre></td></tr></table></figure><h2 id="其他字段处理方法"><a href="#其他字段处理方法" class="headerlink" title="其他字段处理方法"></a>其他字段处理方法</h2><p>UNIX/Linux 下的字段处理远远不知 <code>cut</code> 和 <code>join</code> 两种命令，还有一个强大到甚至可以称之为语言的工具存在，他就是 <code>awk</code>。<code>awk</code> 的设计精髓在于字段与记录的处理上，使用它能够实现强大的字段处理功能。</p><h1 id="文本替换"><a href="#文本替换" class="headerlink" title="文本替换"></a>文本替换</h1><h2 id="使用-tr-替换字符"><a href="#使用-tr-替换字符" class="headerlink" title="使用 tr 替换字符"></a>使用 tr 替换字符</h2><p><code>tr</code> 命令从标准输入删除或替换字符，并将结果写入标准输出。在需要小范围文本替换时，<code>tr</code> 非常有用。</p><p><code>tr</code> 一般有两种格式：</p><ul><li><code>tr String1 String2</code> 将 String1 所包含的每个字符都替换成 String2 中相同位置上的字符。</li><li><code>tr &#123;-d | -s&#125; String1</code> <code>-d</code> 表示删除 String1中包含的每个字符；<code>-s</code> 标识删除包含在 String1 中的任何字符串系列中的中第一个字符以外的所有字符。</li></ul><p><strong>示例1</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cat linux.wiki <br>Linux (/ˈlɪnəks/ (About this soundlisten) LIN-əks)[9][10] is a family of free and open-source software operating systems based on the Linux kernel,[11] an operating system kernel first released on September 17, 1991 by Linus Torvalds.[12][13][14] Linux is typically packaged <span class="hljs-keyword">in</span> a Linux distribution (or distro <span class="hljs-keyword">for</span> short).<br>Linux is one of the most prominent examples of free and open-source software collaboration. The <span class="hljs-built_in">source</span> code may be used, modified and distributed—commercially or non-commercially—by anyone under the terms of its respective licenses, such as the GNU General Public License.<br>$ tr <span class="hljs-string">&#x27;a-z&#x27;</span> <span class="hljs-string">&#x27;A-Z&#x27;</span> &lt;linux.wiki &gt;linux.wiki.upper<br>$ cat linux.wiki.upper<br>LINUX (/ˈLɪNəKS/ (ABOUT THIS SOUNDLISTEN) LIN-əKS)[9][10] IS A FAMILY OF FREE AND OPEN-SOURCE SOFTWARE OPERATING SYSTEMS BASED ON THE LINUX KERNEL,[11] AN OPERATING SYSTEM KERNEL FIRST RELEASED ON SEPTEMBER 17, 1991 BY LINUS TORVALDS.[12][13][14] LINUX IS TYPICALLY PACKAGED IN A LINUX DISTRIBUTION (OR DISTRO FOR SHORT).<br>LINUX IS ONE OF THE MOST PROMINENT EXAMPLES OF FREE AND OPEN-SOURCE SOFTWARE COLLABORATION. THE SOURCE CODE MAY BE USED, MODIFIED AND DISTRIBUTED—COMMERCIALLY OR NON-COMMERCIALLY—BY ANYONE UNDER THE TERMS OF ITS RESPECTIVE LICENSES, SUCH AS THE GNU GENERAL PUBLIC LICENSE.<br></code></pre></td></tr></table></figure><p>这个例子将所有的小写字母替换成大写字母。</p><p><strong>示例2</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ tr <span class="hljs-string">&#x27;&#123;&#125;&#x27;</span> <span class="hljs-string">&#x27;()&#x27;</span> &lt; oldfile &gt; newfile<span class="hljs-comment"># 将大括号替换为小括号</span><br>$ tr <span class="hljs-string">&#x27;&#123;&#125;&#x27;</span> <span class="hljs-string">&#x27;\[]&#x27;</span> &lt; oldfile &gt; newfile<span class="hljs-comment"># 将大括号替换为中括号（反斜杠是否有必要？）</span><br>$ tr -cs <span class="hljs-string">&#x27;[:lower:][:upper:]&#x27;</span> <span class="hljs-string">&#x27;[\n*]&#x27;</span> &lt; oldfile &gt; newfile<span class="hljs-comment"># 创建一个文件中的单词列表</span><br>$ tr -d <span class="hljs-string">&#x27;\0&#x27;</span> &lt; oldfile &gt; newfile<span class="hljs-comment"># 从旧文件中删除所有空字符</span><br>$ tr -s <span class="hljs-string">&#x27;\n&#x27;</span> &lt; oldfile &gt; newfile<span class="hljs-comment"># 用单独的换行符替换每个序列中的一个或多个换行</span><br>$ tr -s <span class="hljs-string">&#x27;\012&#x27;</span> &lt; oldfile &gt; newfile<span class="hljs-comment"># 同上</span><br>$ tr -c <span class="hljs-string">&#x27;[:print:][:cntrl:]&#x27;</span> <span class="hljs-string">&#x27;[?*]&#x27;</span> &lt; oldfile &gt; newfile<span class="hljs-comment"># 以”？“替换每个费打印字符（有效控制字符除外）</span><br>$ tr -s <span class="hljs-string">&#x27;[:space:]&#x27;</span> <span class="hljs-string">&#x27;[#*]&#x27;</span><span class="hljs-comment"># 以单个”#“ 字符替换 &lt;space&gt; 字符类中的每个字符序列</span><br></code></pre></td></tr></table></figure><h3 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h3><h4 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash">用法：tr [选项]... SET1 [SET2]<br>Translate, squeeze, and/or delete characters from standard input,<br>writing to standard output.<br><br>  -c, -C, --complement    use the complement of SET1<br>  -d, --delete            delete characters <span class="hljs-keyword">in</span> SET1, <span class="hljs-keyword">do</span> not translate<br>  -s, --squeeze-repeats   replace each sequence of a repeated character that is listed <span class="hljs-keyword">in</span> the last specified SET, with a single occurrence of that character<br>  -t, --truncate-set1     first truncate SET1 to length of SET2<br>      --<span class="hljs-built_in">help</span>显示此帮助信息并退出<br>      --version显示版本信息并退出<br><br>SET 是一组字符串，一般都可按照字面含义理解。解析序列如下：<br>  \NNN八进制值为NNN 的字符(1 至3 个数位)<br>  \\反斜杠<br>  \a终端鸣响<br>  \b退格<br>  \f换页<br>  \n换行<br>  \r回车<br>  \t水平制表符<br>  \v垂直制表符<br>  字符1-字符2从字符1 到字符2 的升序递增过程中经历的所有字符<br>  [字符*]在SET2 中适用，指定字符会被连续复制直到吻合设置1 的长度<br>  [字符*次数]对字符执行指定次数的复制，若次数以 0 开头则被视为八进制数<br>  [:alnum:]所有的字母和数字<br>  [:alpha:]所有的字母<br>  [:blank:]所有呈水平排列的空白字符<br>  [:cntrl:]所有的控制字符<br>  [:digit:]所有的数字<br>  [:graph:]所有的可打印字符，不包括空格<br>  [:lower:]所有的小写字母<br>  [:<span class="hljs-built_in">print</span>:]所有的可打印字符，包括空格<br>  [:punct:]所有的标点字符<br>  [:space:]所有呈水平或垂直排列的空白字符<br>  [:upper:]所有的大写字母<br>  [:xdigit:]所有的十六进制数<br>  [=字符=]所有和指定字符相等的字符<br></code></pre></td></tr></table></figure><h2 id="其他选择"><a href="#其他选择" class="headerlink" title="其他选择"></a>其他选择</h2><p><strong>perl</strong> 强大的这个表达式支持在 UNIX/Linux 世界无出其右。</p><p>**sed ** <code>sed</code> 工具处理文本流，亦可轻松地实现文本替换。</p><p><strong>awk</strong> <code>awk</code> 语言据有逻辑判断与循环等特性支持。并且，在文本处理时根据需求，强大的可定制性也是其长盛不衰的原因。</p>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP-to-xml</title>
    <link href="/2019/04/15/php/PHP-to-xml/"/>
    <url>/2019/04/15/php/PHP-to-xml/</url>
    
    <content type="html"><![CDATA[<p><strong>方法</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toXml</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$xml</span> = <span class="hljs-string">&#x27;&lt;xml&gt;&#x27;</span>;<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$data</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$val</span>) &#123;<br>        <span class="hljs-variable">$xml</span> .= is_numeric(<span class="hljs-variable">$val</span>) ? <br>            <span class="hljs-string">&#x27;&lt;&#x27;</span> . <span class="hljs-variable">$key</span> . <span class="hljs-string">&#x27;&gt;&#x27;</span> . <span class="hljs-variable">$val</span> . <span class="hljs-string">&#x27;&lt;/&#x27;</span> . <span class="hljs-variable">$key</span> . <span class="hljs-string">&#x27;$&gt;&#x27;</span> :<br>        <span class="hljs-string">&#x27;&lt;&#x27;</span> . <span class="hljs-variable">$key</span> . <span class="hljs-string">&#x27;&gt;&lt;![CDATA[&#x27;</span> . <span class="hljs-variable">$val</span> . <span class="hljs-string">&#x27;]]&gt;&lt;/&#x27;</span> . <span class="hljs-variable">$key</span> . <span class="hljs-string">&#x27;&gt;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-variable">$xml</span> .= <span class="hljs-string">&#x27;&lt;/xml&gt;&#x27;</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$xml</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$data</span> = [<br><span class="hljs-string">&#x27;num&#x27;</span> =&gt; <span class="hljs-number">44</span>,<br><span class="hljs-string">&#x27;inter&#x27;</span> =&gt; <span class="hljs-number">100</span>,<br><span class="hljs-string">&#x27;json&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#123;&quot;php&quot;: &quot;xml&quot;&#125;&#x27;</span><br>];<br><span class="hljs-variable">$res</span> = toXml(<span class="hljs-variable">$data</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span>;<br>var_dump(<span class="hljs-variable">$res</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">xml</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">num</span>&gt;</span>44<span class="hljs-tag">&lt;/<span class="hljs-name">num</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">inter</span>&gt;</span>100<span class="hljs-tag">&lt;/<span class="hljs-name">inter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">json</span>&gt;</span>&lt;![CDATA[&#123;&quot;php&quot;: &quot;xml&quot;&#125;]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">json</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">xml</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP-子类重写父类属性问题</title>
    <link href="/2019/04/15/php/PHP-%E5%AD%90%E7%B1%BB%E9%87%8D%E5%86%99%E7%88%B6%E7%B1%BB%E5%B1%9E%E6%80%A7%E9%97%AE%E9%A2%98/"/>
    <url>/2019/04/15/php/PHP-%E5%AD%90%E7%B1%BB%E9%87%8D%E5%86%99%E7%88%B6%E7%B1%BB%E5%B1%9E%E6%80%A7%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="问题还原"><a href="#问题还原" class="headerlink" title="问题还原"></a>问题还原</h3><p><strong>新建父类文件</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$hasLeg</span> = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__consruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>新建子类文件</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-title">extend</span> <span class="hljs-title">Animal</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$hasLeg</span> = <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>执行脚本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ php Dog.php<br>PHP Fatal error:  Access level to Dog::<span class="hljs-variable">$hasLeg</span> must be public (as <span class="hljs-keyword">in</span> class Animal) <span class="hljs-keyword">in</span> /www/code/html/<span class="hljs-built_in">test</span>/Dog.php on line 4<br><br>Fatal error: Access level to Dog::<span class="hljs-variable">$hasLeg</span> must be public (as <span class="hljs-keyword">in</span> class Animal) <span class="hljs-keyword">in</span> /www/code/html/<span class="hljs-built_in">test</span>/Dog.php on line 4<br></code></pre></td></tr></table></figure><p>经过比较父类、子类发现，子类在重在父类的 <code>$hasLeg</code> 属性时，将这个属性的访问权限由 <code>public</code>→<code>protected</code> 。尝试修改子类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">// protected $hasLeg = true;</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$hasLeg</span> = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__consruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>再次执行脚本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ php Dog.php<br><br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>PHP 子类在重在父类属性时，重载的属性的访问权限要大于等于父类属性的访问权限（<code>private</code> &lt; <code>protected</code> &lt; <code>public</code>），否则会报错！</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell-正则表达式</title>
    <link href="/2019/04/15/shell/shell-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2019/04/15/shell/shell-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="正则基础"><a href="#正则基础" class="headerlink" title="正则基础"></a>正则基础</h1><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>​                                   <strong>POSIX BRE 和 ERE 都支持的 meta 字符</strong></p><table><thead><tr><th align="center">字符</th><th>BRE/ERE</th><th>模式含义</th></tr></thead><tbody><tr><td align="center">^</td><td>BRE,ERE</td><td>锚定行或字符串的开始，如：‘^grep’  匹配所有以 grep 开头的行。BRE：仅仅在正则表达式结尾处具有特殊含义；ERE：在正则表达式任何地方都有特殊含义</td></tr><tr><td align="center">$</td><td>BRE,ERE</td><td>锚定行或字符串的结束，如：‘grep$’ 匹配所有以 grep 结尾的行。BRE：仅仅在正则表达式结尾处具有特殊含义；ERE：在正则表达式任何地方都有特殊含义</td></tr><tr><td align="center">.</td><td>BRE,ERE</td><td>匹配一个非换行符的字符，如：‘gr.p’ 匹配 gr 后接一个任意字符，然后是 p</td></tr><tr><td align="center">*</td><td>BRE,ERE</td><td>匹配零个或多个先前字符。如：‘*grep’ 匹配所有一个或多个空格后紧跟 grep 的行。.*一起使用代表任意字符</td></tr><tr><td align="center">[…]</td><td>BRE,ERE</td><td>匹配中括号内任意一个字符。如果 <code>^</code> 符号位于方括号的开始，则不匹配括号内的任意字符。如：[^a-zA-Z] 不匹配 a-z和A-Z中任意字符</td></tr><tr><td align="center">\</td><td>BRE,ERE</td><td>用于打开或关闭后续字符的特殊含义。如：\(\)</td></tr></tbody></table><p><em>BRE：基本正则表达式；ERE扩展正则表达式</em></p><p>​                                        <strong>POSIX BRE 和 ERE 支持不同的 meta 字符</strong></p><table><thead><tr><th align="center">字符</th><th align="center">BRE/ERE</th><th>模式含义</th></tr></thead><tbody><tr><td align="center">\(\)</td><td align="center">BRE</td><td>标记匹配字符，这个元字符将\（和\）之间的模式存储在保留空间中，在后续的正则表达式中可以通过转义序列引用这些匹配的模式。如‘\(grep\).*\1’ 就匹配两个 grep 中间带有任意数目的字符，第二个 grep 使用 \1来引用。最多可以保存 9 个独立的模式，即从 \1 到 \9</td></tr><tr><td align="center">\n</td><td align="center">BRE</td><td>重复在 \（与\）内的第 n 个模式。n 为 1 到 9，n是数字</td></tr><tr><td align="center">x\{m,n\}</td><td align="center">BRE</td><td>区间表达式，匹配 x 字符出现的次数区间。<code>x\&#123;n\&#125;</code>是指 x 出现了 n 次；<code>x\&#123;m,\&#125;</code> 是指最少出现 m 次；<code>x\&#123;m,n\&#125;</code> 是指至少出现 m 次，至多出现 n 次</td></tr><tr><td align="center">x{m,n}</td><td align="center">ERE</td><td>和上一条一样，不过没有反斜杠</td></tr><tr><td align="center">+</td><td align="center">ERE</td><td>匹配前面正则表达式的一个或多个实例</td></tr><tr><td align="center">?</td><td align="center">ERE</td><td>匹配前面正则表达式的零个或一个实例</td></tr><tr><td align="center">&amp;#x7C</td><td align="center">ERE</td><td>匹配前面或后面的正则表达式</td></tr><tr><td align="center">()</td><td align="center">ERE</td><td>匹配用括号括起来的正则表达式群</td></tr></tbody></table><p>​                                             <strong>grep 程序支持的 meta 字符 plus</strong></p><table><thead><tr><th align="center">字符</th><th>模式含义</th></tr></thead><tbody><tr><td align="center">\&lt;</td><td>锚定单词的开始，如：‘\&lt;grep’ 匹配包含以 grep 开头的单词的行</td></tr><tr><td align="center">\&gt;</td><td>锚定单词的结束，如：‘grep\&gt;’ 匹配包含以 grep 结尾的单词的行</td></tr><tr><td align="center">\w</td><td>匹配文字和数字字符，也就是[A-Za-z0-9]，如：‘G\w*p’ 匹配以 G 后跟零个或多个文字或数字字符，然后是p</td></tr><tr><td align="center">\W</td><td>\w 的反置形式，匹配一个或多个非单词字符，如点号、句号等</td></tr><tr><td align="center">\b</td><td>单词锁定符，如 ‘\bgrep\b’ 值匹配 grep</td></tr></tbody></table><p><strong>正则表达式实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">ls -l | grep <span class="hljs-string">&#x27;^d&#x27;</span> <span class="hljs-comment"># 通过管道过滤 ls -l 输出的内容，只显示以 d（文件为目录） 开头的行</span><br>grep <span class="hljs-string">&#x27;test&#x27;</span> d* <span class="hljs-comment"># 显示所有以 d 开头的文件中包含 test 的行</span><br>grep <span class="hljs-string">&#x27;test&#x27;</span> aa bb cc <span class="hljs-comment"># 显示在 aa，bb，cc，文件中匹配 test 的行</span><br>grep <span class="hljs-string">&#x27;[a-z]\&#123;5\&#125;&#x27;</span> aa <span class="hljs-comment"># 显示在 aa 文件中，所有包含至少有 5 个连续小写字符的字符串的行</span><br>grep <span class="hljs-string">&#x27;w\(es\)t.*\1&#x27;</span> aa <span class="hljs-comment"># 如果 west 被匹配，es 就被存储到内存中，并标记为1，然后搜索任意个字符(.*)，这个字符后面紧跟着另外一个es(\1)，找到就显示该行。如果egrep或grep -E，就不用“\”号进行转义，直接写成 &#x27;w(es)t.*\1&#x27; 就可以</span><br></code></pre></td></tr></table></figure><p>为了在不同国家的字符编码中保持一致，POSIX增加了特殊的字符类。</p><ul><li><p>POSIX 字符集</p><p>POSIX 字符集是以 <code>[:</code> 和 <code>:]</code> 括起来的字符。</p></li></ul><p>​                                                     <strong>POSIX 字符集</strong></p><table><thead><tr><th align="center">字符集</th><th align="left">匹配字符</th></tr></thead><tbody><tr><td align="center">[:alnum:]</td><td align="left">文字数字字符，等效于 A-Za-z0-9</td></tr><tr><td align="center">[:alpha:]</td><td align="left">文字字符</td></tr><tr><td align="center">[:blank:]</td><td align="left">空格（space）和定位（tab）字符</td></tr><tr><td align="center">[:digit:]</td><td align="left">数字字符</td></tr><tr><td align="center">[:graph:]</td><td align="left">非空字符（非空格、控制字符）</td></tr><tr><td align="center">[:lower:]</td><td align="left">小写字符</td></tr><tr><td align="center">[:cntrl:]</td><td align="left">控制字符</td></tr><tr><td align="center">[:print:]</td><td align="left">非空字符（包括空格）</td></tr><tr><td align="center">[:punct:]</td><td align="left">标点符号</td></tr><tr><td align="center">[:space:]</td><td align="left">所有空白符（新行、空格、制表符）</td></tr><tr><td align="center">[:upper]</td><td align="left">大写字符</td></tr><tr><td align="center">[:xdigit:]</td><td align="left">十六进制数字（0-9，a-f,A-F）</td></tr></tbody></table><ul><li><p>排序符号</p><p>排序符号将多个字符序列视为一个元素。使用 <code>[.</code> 和 <code>.]</code> 将字符组合括起来。例如，<code>[.cn.]</code> 表示 cn 字符序列，而单独的 c 或 n 都不行。</p></li><li><p>等价字符集</p><p>等价字符集表示应视为等值的一族字符，使用 <code>[=</code> 和 <code>=]</code> 将字符括起来。例如 e 和 é，在法语的 <code>local</code> 里，<code>[[=e=]]</code> 可能匹配 <code>e/ē/é/ě/è</code>。</p></li></ul><p>正则表达式允许将 POSIX 字符集与其他字符集混用，如 <code>[[:alpha:]]!</code>匹配任意一个英文字母或者感叹号（!）。</p><p><strong>一个 POSIX 方括号实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cat test.txt<br><span class="hljs-built_in">test</span> grep | <span class="hljs-built_in">test</span> <br>grep <span class="hljs-string">&#x27;w(es)t.*\1&#x27;</span><br><span class="hljs-built_in">test</span> <span class="hljs-built_in">test</span> <span class="hljs-built_in">test</span> <span class="hljs-built_in">test</span><br>test_12321<br>123_test<br>$ grep -E <span class="hljs-string">&quot;[[:digit:]]_+&quot;</span> test.txt<br>test_12321<br></code></pre></td></tr></table></figure><h2 id="单个字符"><a href="#单个字符" class="headerlink" title="单个字符"></a>单个字符</h2><ul><li><p>一般字符</p><p>包含文字和数字字符、空白字符和标点符号字符。</p></li><li><p>转义的 meta 字符</p><p>使用反斜杠 <code>\</code>转义 meta 字符，<code>\\</code>转义反斜杠本身。</p></li><li><p>.（点好）字符</p><p>标识“任一字符”，一般不会单独使用</p></li><li><p>方括号表达式</p><p><code>[^...]</code> 取反，即不在方括号里面出现的任意字符；方括号表达式中，所有其他的 <code>meta</code> 字符都会数去其含义。例如 <code>[\.]</code> 匹配反斜杠和点号，而不是匹配句点。</p></li></ul><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p>​                                              <strong>BRE 的运算优先级</strong></p><table><thead><tr><th align="center">运算符</th><th>含义</th></tr></thead><tbody><tr><td align="center">[…][==][::]</td><td>方括号符号</td></tr><tr><td align="center">\meta</td><td>转义的 meta 字符</td></tr><tr><td align="center">[]</td><td>方括号表达式</td></tr><tr><td align="center">\(\)\n</td><td>后向引用表达式</td></tr><tr><td align="center">*\{\}</td><td>区间表达式和型号表达式</td></tr><tr><td align="center">无符号</td><td>连续</td></tr><tr><td align="center">^$</td><td>锚点</td></tr></tbody></table><p>​                                             <strong>ERE 的运算优先级</strong></p><table><thead><tr><th align="center">运算符</th><th>含义</th></tr></thead><tbody><tr><td align="center">[…][==][::]</td><td>方括号符号</td></tr><tr><td align="center">\meta</td><td>转义的 meta 字符</td></tr><tr><td align="center">[]</td><td>方括号表达式</td></tr><tr><td align="center">()</td><td>分组</td></tr><tr><td align="center">* + ? {}</td><td>重复前置的正则表达式</td></tr><tr><td align="center">无符号</td><td>连续</td></tr><tr><td align="center">^$</td><td>锚点</td></tr><tr><td align="center">&amp;#x7C</td><td>交替</td></tr></tbody></table><p><em>ERE运算优先级中多出两个运算符，分别是分组和交替</em></p><h1 id="正则表达式的应用"><a href="#正则表达式的应用" class="headerlink" title="正则表达式的应用"></a>正则表达式的应用</h1><p><strong>单词的开头结尾匹配</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;this is a word.&#x27;</span> | grep <span class="hljs-string">&quot;\&lt;word\&gt;&quot;</span> <span class="hljs-comment"># 匹配单词开头+word+单词结尾</span><br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;these are words.&#x27;</span> | grep <span class="hljs-string">&quot;\&lt;word&quot;</span> <span class="hljs-comment"># 匹配单词开头+word</span><br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;these are words.&#x27;</span> | grep <span class="hljs-string">&quot;\&lt;word\&gt;&quot;</span> <span class="hljs-comment"># 匹配单词开头+word+单词结尾，匹配失败</span><br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;these are words.&#x27;</span> | grep <span class="hljs-string">&quot;\&lt;are\&gt;&quot;</span> <span class="hljs-comment"># 匹配单词开头+are+单词结尾</span><br></code></pre></td></tr></table></figure><p>​                                      <strong>GNU 支持的额外正则表达式运算符</strong></p><table><thead><tr><th align="center">运算符</th><th>含义</th></tr></thead><tbody><tr><td align="center">\w</td><td>匹配任何单词组成字符，等同于 <code>[[:alnum:]_]</code></td></tr><tr><td align="center">\W</td><td>匹配任何非单词组成字符，等同于 <code>[^[:alnum:]_]</code></td></tr><tr><td align="center">\&lt;\&gt;</td><td>匹配单词的起始与结尾</td></tr><tr><td align="center">\b</td><td>匹配单词的起始或结尾处所找到的空字符串，这是\&lt;与\&gt;的结合</td></tr><tr><td align="center">\B</td><td>匹配两个单词组成字符之间的空字符串</td></tr><tr><td align="center">\‘\`</td><td>分别匹配 emacs 缓冲区的开始与结尾。GNU程序通常将它们视为与^及$同义</td></tr></tbody></table><p>…</p>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell-编程的基本元素</title>
    <link href="/2019/04/01/shell/shell-%E7%BC%96%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%85%83%E7%B4%A0/"/>
    <url>/2019/04/01/shell/shell-%E7%BC%96%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<p><em>文中所有需要赋予执行权限的脚本文件，请自行使用 <code>chmod +x</code>添加。</em></p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># variable.sh</span><br><span class="hljs-comment">#整形还是字符串？</span><br><br>a=2334              <span class="hljs-comment"># 整形</span><br><span class="hljs-built_in">let</span> <span class="hljs-string">&quot;a += 1&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a = <span class="hljs-variable">$a</span>&quot;</span><span class="hljs-comment"># 还是整形</span><br><span class="hljs-built_in">echo</span><br><br>b=<span class="hljs-variable">$&#123;a/23/BB&#125;</span>        <span class="hljs-comment"># 将“23”替换成“BB”</span><br><span class="hljs-comment"># 这里使得变量 $b 总整形变为字符串</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;b = <span class="hljs-variable">$b</span>&quot;</span><span class="hljs-comment"># b = BB35</span><br><span class="hljs-built_in">declare</span> -i b        <span class="hljs-comment"># 即使使用 declare 命令也不会对变量有任何影响</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;b = <span class="hljs-variable">$b</span>&quot;</span><span class="hljs-comment"># b = BB35</span><br><br><span class="hljs-built_in">let</span> <span class="hljs-string">&quot;b += 1&quot;</span><span class="hljs-comment"># BB35 +1 = </span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;b = <span class="hljs-variable">$b</span>&quot;</span><span class="hljs-comment"># b = 1</span><br><span class="hljs-built_in">echo</span><br><br>c=BB34<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;c = <span class="hljs-variable">$c</span>&quot;</span><span class="hljs-comment"># c = BB34</span><br>d=<span class="hljs-variable">$&#123;c/BB/23&#125;</span>        <span class="hljs-comment"># 将“BB”替换成“23”</span><br><span class="hljs-comment"># 这里使得变量 $d 变为一个整形</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;d = <span class="hljs-variable">$d</span>&quot;</span><span class="hljs-comment"># d = 2334</span><br><span class="hljs-built_in">let</span> <span class="hljs-string">&quot;d += 1&quot;</span><span class="hljs-comment"># 2334 +1 = </span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;d = <span class="hljs-variable">$d</span>&quot;</span><span class="hljs-comment"># d = 2335</span><br><span class="hljs-built_in">echo</span><br><br><span class="hljs-comment"># null 变量如何呢？</span><br>e=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;e = <span class="hljs-variable">$e</span>&quot;</span><span class="hljs-comment"># e = </span><br><span class="hljs-built_in">let</span> <span class="hljs-string">&quot;e += 1&quot;</span><span class="hljs-comment"># 算数操作允许一个 null 变量？</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;e = <span class="hljs-variable">$e</span>&quot;</span><span class="hljs-comment">#  e = 1</span><br><span class="hljs-built_in">echo</span> <br><br><span class="hljs-comment"># 如果没有声明变量会怎样？</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;f = <span class="hljs-variable">$f</span>&quot;</span><span class="hljs-comment"># f = </span><br><span class="hljs-built_in">let</span> <span class="hljs-string">&quot;f += 1&quot;</span><span class="hljs-comment"># 算数操作能通过么？</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;f = <span class="hljs-variable">$f</span>&quot;</span><span class="hljs-comment"># f = 1</span><br><span class="hljs-built_in">echo</span><span class="hljs-comment"># 为声明的变阿玲将转换成一个整形变量</span><br><br><span class="hljs-comment"># 所以 Bash shell 中的变量都是不区分类型的</span><br><span class="hljs-built_in">exit</span> 0<br></code></pre></td></tr></table></figure><p>由这个例子可以看出，<strong>shell 语言中的一切变量都是字符串类型的</strong>。</p><p>shell 中有 3 种变量：用户变量、位置变量和环境变量。其中用户变量在编程过成功使用最多，位置变量在对参数判断和命令返回判断时会使用，环境变量主要是在程序运行时需要设置。</p><h2 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h2><p>就是用户在 shell 编程过程中定义的变量，分为全局变量和局部变量。默认情况下，用户定义的 shell 变量为全局变量，如果要指定局部变量，则需使用 <code>local</code> 限定词。</p><h3 id="shell-中的特殊字符号"><a href="#shell-中的特殊字符号" class="headerlink" title="shell 中的特殊字符号"></a>shell 中的特殊字符号</h3><p>​                                        <strong>Linux Shell 中的特殊字符</strong></p><table><thead><tr><th align="center">特殊字符</th><th align="left">含义</th></tr></thead><tbody><tr><td align="center">～</td><td align="left">主目录，相当于<code>$HOME</code></td></tr><tr><td align="center">`</td><td align="left">命令替换符，例如 <code>pwd</code> 返回 pwd 命令执行的结果字符串</td></tr><tr><td align="center">#</td><td align="left">shell 脚本中的注释</td></tr><tr><td align="center">$</td><td align="left">变量表达式符号</td></tr><tr><td align="center">&amp;</td><td align="left">后台作业，将此符号置于命令末端，则让命令于后台运行</td></tr><tr><td align="center">*</td><td align="left">字符串通配符</td></tr><tr><td align="center">(</td><td align="left">启用子 shell</td></tr><tr><td align="center">)</td><td align="left">停止子 shell</td></tr><tr><td align="center">\</td><td align="left">转义下一个字符</td></tr><tr><td align="center">&amp;#x7C</td><td align="left">管道</td></tr><tr><td align="center">[</td><td align="left">开始字符集通配符</td></tr><tr><td align="center">]</td><td align="left">结束字符集通配符</td></tr><tr><td align="center">{</td><td align="left">开始命令块</td></tr><tr><td align="center">}</td><td align="left">结束命令块</td></tr><tr><td align="center">;</td><td align="left">shell 命令分隔符</td></tr><tr><td align="center">‘</td><td align="left">强引用</td></tr><tr><td align="center">“</td><td align="left">弱引用</td></tr><tr><td align="center">&lt;</td><td align="left">输入重定向</td></tr><tr><td align="center">&gt;</td><td align="left">输出重定向</td></tr><tr><td align="center">/</td><td align="left">路径名目录分隔符</td></tr><tr><td align="center">?</td><td align="left">单个人一些字符</td></tr><tr><td align="center">!</td><td align="left">管道逻辑 NOT</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;The # here does not begin a comment.&quot;</span><span class="hljs-comment"># 注释1，双引号内，特殊字符将被执行</span><br>The <span class="hljs-comment"># here does not begin a comment.</span><br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;The # here does not begin a comment.&#x27;</span><span class="hljs-comment"># 注释2，单引号，特殊字符背会被执行，愿意昂输出</span><br>The <span class="hljs-comment"># here does not begin a comment.</span><br>$ <span class="hljs-built_in">echo</span> The \<span class="hljs-comment"># here does not begin a comment.# 注释3，转义字符当应用于特殊字符时，将去除特殊字符的含义，回到本身</span><br>The <span class="hljs-comment"># here does not begin a comment.</span><br>$ <span class="hljs-built_in">echo</span> The <span class="hljs-comment"># 这里开始注释# 注释4，命令中#符号标志这注释的开始，在这一行#之后的所有内容都被认为是注释，不会被执行</span><br>The<br>$ <span class="hljs-built_in">cd</span> ~<span class="hljs-comment"># 注释5，～代表进入家目录</span><br></code></pre></td></tr></table></figure><h3 id="强引用和弱引用"><a href="#强引用和弱引用" class="headerlink" title="强引用和弱引用"></a>强引用和弱引用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ varname=Jony<br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;My name is <span class="hljs-variable">$varname</span>&quot;</span><span class="hljs-comment"># 弱引用</span><br>My name is Jony<span class="hljs-comment"># 弱引用中的变量被替换了</span><br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;My name is $varname&#x27;</span><span class="hljs-comment"># 强引用</span><br>My name is <span class="hljs-variable">$varname</span><span class="hljs-comment"># 强引用中的变量没有被替换</span><br></code></pre></td></tr></table></figure><p><em>双引号中的变量是弱引用，单引号中的变量是强引用。</em></p><h3 id="变量语法的真实面目"><a href="#变量语法的真实面目" class="headerlink" title="变量语法的真实面目"></a>变量语法的真实面目</h3><p>变量的标识方式 <code>$varname</code> 实际上是常用语法 <code>$&#123;varname&#125;</code> 的简略模式。</p><p>为什么会有这两种不同的语法呢？原因有二：</p><ul><li><p>如果代码中的位置参数超过 <code>9</code> 个，第十个参数必须要用语法 <code>$&#123;10&#125;</code> 而不是 <code>$10</code>。</p></li><li><p>如果要在用 ID 后面放置一个下划线，例如 <code>echo $UID_</code>，则 shell 会试图使用 <code>UID_</code> 作为变量名。因此，在这里 shell 分不清到底 <code>UID</code> 是变量还是 <code>UID_</code> 是变量。正确的写法是 <code>echo $&#123;UID&#125;_</code>，如果变量名后面跟的是一个<strong>非</strong>小写字符、数字或下划线，则使用第一种写法就没问题。</p></li></ul><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><p>大括号操作符允许我们使用 shell 字符串操作的更多高级功能，即字符串处理运算符。字符串处理运算符允许你完成如下操作：</p><ul><li><p>确保变量存在且有值</p></li><li><p>设置变量的默认值</p></li><li><p>捕获未设置变量而导致的错误</p></li><li><p>删除匹配模式的变量的值部分内容</p></li></ul><p>  ​                                      <strong>替换运算符</strong></p><table><thead><tr><th align="center">变量运算符</th><th>替换</th></tr></thead><tbody><tr><td align="center">${varname:-word}</td><td>如果 <code>varname</code> 存在且非 null，则返回 <code>varname</code> 的值；否则，返回 <code>word</code> （*如果变量未定义，则返回默认值 <code>word</code>*）</td></tr><tr><td align="center">${varname:=word}</td><td>如果 <code>varname</code> 存在且非 null，则返回 <code>varname</code> 的值；否则将其置为 <code>word</code> ，然后返回其值（*如果变量未定义，则设置变量为默认值 <code>word*</code>）</td></tr><tr><td align="center">${varname:?message}</td><td>如果 <code>varname</code> 存在且非 null，则返回 <code>varname</code> 的值；否则打印 <code>message</code>，并退出当前脚本。如果省略 <code>message</code>的话，shell 返回 <code>param null or not set</code>（<em>用于捕获由于变量未定义而导致的错误</em>）</td></tr><tr><td align="center">${varname:+word}</td><td>如果 <code>varname</code> 存在且非 null，则返回 <code>word</code>；否则返回 null（用于测试变量存在）</td></tr></tbody></table><p>*表中每个冒号都是可选的。如果省略冒号，则将每个定义中的 <strong>存在且非 null</strong> 改为 <strong>存在</strong>，即变量运算符值判断变量是否存在。*</p><p>除了上面的变量替换运算符之外，还有如下的模式匹配运算符，通常用于切割路径名称，例如文件名后缀名和路径前缀。</p><p>​                                          <strong>模式匹配运算符</strong></p><table><thead><tr><th align="center">变量运算符</th><th>替换</th></tr></thead><tbody><tr><td align="center">${varname#pattern}</td><td>如果模式匹配变量取值的<strong>开头</strong>处，则删除匹配的最<strong>短</strong>部分，并返回剩下部分</td></tr><tr><td align="center">${varname##pattern}</td><td>如果模式匹配变量取值的<strong>开头</strong>处，则删除匹配的最<strong>长</strong>部分，并返回剩下部分</td></tr><tr><td align="center">${varname%pattern}</td><td>如果模式匹配变量取值的<strong>结尾</strong>处，则删除匹配的最<strong>短</strong>部分，并返回剩下部分</td></tr><tr><td align="center">${varname%%pattern}</td><td>如果模式匹配变量取值的<strong>结尾</strong>处，则删除匹配的最<strong>长</strong>部分，并返回剩下部分</td></tr><tr><td align="center">${varname/pattern/string}、${varname//pattern/string}</td><td>将 <code>varname</code> 中匹配模式的最长部分替换为 <code>string</code>。第一种格式中，只有匹配的第一部分被替换。第二种格式中，所有匹配的部分都被替换。如果模式以 <code>#</code> 开头，则必须匹配 <code>varname</code> 的开头，如果模式以 <code>%</code> 开头，则必须匹配 <code>varname</code> 的结尾。如果``string<code>为空，匹配部分被删除。如果</code>varname<code>为</code>@<code>或</code>*`，操作被一次应用与每个未知参数，并且扩展为结尾列表</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;PATH&#125;</span><br>/usr/<span class="hljs-built_in">local</span>/bin:/usr/bin:/bin:/sbin:/usr/sbin<br>$ <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;PATH//:/&#x27;\n&#x27;&#125;</span> -e<br>/usr/<span class="hljs-built_in">local</span>/bin<br>/usr/bin<br>/bin<br>/sbin<br>/usr/sbin -e<br></code></pre></td></tr></table></figure><p><em><code>echo $&#123;PATH//:/&#39;\n&#39;&#125; -e</code>可以 使用<code>echo $PATH | sed &#39;s/:/\n/g&#39;</code>替换。</em></p><h3 id="命令替换"><a href="#命令替换" class="headerlink" title="命令替换"></a>命令替换</h3><p>命令替换的语法是：<code>command</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">echo</span> `<span class="hljs-built_in">pwd</span>`<br>/home/aurora<br></code></pre></td></tr></table></figure><p>这里将 <code>pwd</code>命令的输出字符串作为参数产地给 echo 命令，然后输出。</p><h2 id="位置变量"><a href="#位置变量" class="headerlink" title="位置变量"></a>位置变量</h2><p>位置变量也被称为系统变量、未知参数，是 shell 脚本运行时传递给脚本的参数，同时也表示在 shell 函数内部的函数参数。（$0~$9，${10}）</p><p><strong>示例1：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/sh</span><br><span class="hljs-comment"># process.sh</span><br><span class="hljs-comment"># 解释位置变量参数的含义</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;the number of parameter is: <span class="hljs-variable">$#</span>&quot;</span><span class="hljs-comment"># 输出给脚本参数个数</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;the return code of last command is: $?&quot;</span><span class="hljs-comment"># 输出上条命令的结束值</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;the script name is: <span class="hljs-variable">$0</span>&quot;</span><span class="hljs-comment"># 输出命令的名字</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;the parameter are: $*&quot;</span><span class="hljs-comment"># 输出命令的所有参数</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;\$1 = <span class="hljs-variable">$1</span>; \$2 = <span class="hljs-variable">$2</span>&quot;</span><span class="hljs-comment"># 输出第一第二个参数</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ./process.sh one tow three four five six<br>the number of parameter is: 6<br>the <span class="hljs-built_in">return</span> code of last <span class="hljs-built_in">command</span> is: 0<br>the script name is: ./process.sh<br>the parameter are: one tow three four five six<br><span class="hljs-variable">$1</span> = one; <span class="hljs-variable">$2</span> = tow<br></code></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/sh</span><br><span class="hljs-comment"># process2.sh</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$#</span> -ne 2] ;<span class="hljs-comment"># 判断传给脚本参数个数，如果不等于 2 ，给出提示</span><br><span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Usage: <span class="hljs-variable">$0</span> string file&quot;</span>;<br><span class="hljs-built_in">exit</span> 1;<br><span class="hljs-keyword">fi</span><br>grep <span class="hljs-variable">$1</span> <span class="hljs-variable">$2</span> ;<span class="hljs-comment"># 用 grep 在 $2 文件中查找 $1 字符串</span><br><br><span class="hljs-keyword">if</span> [ $? -ne 0] ;<span class="hljs-comment"># 判断前一个命令运行后的返回值（一般成功返回 0，失败返回非 0）</span><br><span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Not Found \&quot;<span class="hljs-variable">$1</span>\&quot; in <span class="hljs-variable">$2</span>&quot;</span>;<span class="hljs-comment"># 给出未找到提示</span><br><span class="hljs-built_in">exit</span> 1;<br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Found \&quot;<span class="hljs-variable">$1</span>\&quot; in <span class="hljs-variable">$2</span>&quot;</span>;<span class="hljs-comment"># 给出找到提示，\ 转义</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ./process2.sh usage process2.sh<br>Not Found <span class="hljs-string">&quot;usage&quot;</span> <span class="hljs-keyword">in</span> process2.sh<br>$ ./process2.sh Usage process2.sh<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Usage: <span class="hljs-variable">$0</span> string file&quot;</span>;<br>Found <span class="hljs-string">&quot;Usage&quot;</span> <span class="hljs-keyword">in</span> process2.sh<br></code></pre></td></tr></table></figure><p>shell 内置一个 <code>shift</code> 命令，用于“截去”参数列表最左端的一个参数。执行了 <code>shift</code> 之后 <code>$1</code> 的值将永远失效，<code>$2</code> 的值会被赋给 <code>$1</code>,以此类推。</p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>​                                              <strong>常用的 shell 环境变量</strong></p><table><thead><tr><th align="center">名称</th><th>描述</th></tr></thead><tbody><tr><td align="center">PATH</td><td>命令搜索路径，以冒号作为分隔符。注意与 DOS 下不同的是，当前目录不在系统路径里</td></tr><tr><td align="center">HOME</td><td>用户 home 目录的路径名，是 <code>cd</code> 命令的默认参数</td></tr><tr><td align="center">COLUMNS</td><td>默认的行编辑器</td></tr><tr><td align="center">VISUAL</td><td>默认的可视编辑器</td></tr><tr><td align="center">FCEDIT</td><td>命令 <code>fc</code> 使用的编辑器</td></tr><tr><td align="center">HISTFILE</td><td>命令历史文件</td></tr><tr><td align="center">HISTSIZE</td><td>命令历史文件中最多可包含的命令条数</td></tr><tr><td align="center">HISTFILESIZE</td><td>命令历史文件中包含的最大行数</td></tr><tr><td align="center">IFS</td><td>定义 shell 使用的分隔符</td></tr><tr><td align="center">LOGNAME</td><td>用户登录名</td></tr><tr><td align="center">MAIL</td><td>指向一个需要 shell 监视其修改时间的文件。当该文件修改后，Shell 将发消息 “You have mail” 给用户</td></tr><tr><td align="center">MAILCHECK</td><td>shell 检查 MAIL 文件的周期，单位是秒</td></tr><tr><td align="center">MAILPATH</td><td>功能与 MAIL 类似。但可以用一组文件，以冒号分隔，每个文件后可跟一个问号和一条发向用户的消息</td></tr><tr><td align="center">SHELL</td><td>shell 的路径名</td></tr><tr><td align="center">TERM</td><td>终端类型</td></tr><tr><td align="center">TMOUT</td><td>shell 自动退出的时间，单位为秒，若设为 0 ，则禁止 shell自动退出</td></tr><tr><td align="center">PROMPT_COMMAND</td><td>指定在主命令提示符前应执行的命令</td></tr><tr><td align="center">PS1</td><td>主命令提示符</td></tr><tr><td align="center">PS2</td><td>二级命令提示符，命令执行过程中要求输入数据时用</td></tr><tr><td align="center">PS3</td><td>select 的命令提示符</td></tr><tr><td align="center">PS4</td><td>调试命令提示符</td></tr><tr><td align="center">MANPATH</td><td>寻找手册页的路径，以冒号分隔</td></tr><tr><td align="center">LD_LIBRARY_PATH</td><td>寻找库的路径，以冒号分隔</td></tr></tbody></table><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p><strong>函数的使用规则</strong></p><ul><li>先定义，后使用。</li><li>共享当前脚本的变量。并且，允许你以给未知参数赋值的方式向函数传递参数。函数内部使用 <code>local</code> 限定词创建局部变量。</li><li>函数使用 <code>exit</code> 命令，会退出脚本。使用 <code>return</code> 可以返回调用函数的地方。</li><li><code>return</code> 语句返回函数执行最后一条命令的退出状态。</li><li>使用内置命令 <code>export -f</code> 可以将函数导出到子 shell 中。</li><li>可以使用 <code>source</code> 或 <code>dot</code> 命令将保存在其他文件中的函数，装入当前脚本。</li><li>函数可以递归调用，没有调用限制</li><li>可以使用 <code>declare -f</code> 查看登录会话中定义的函数。函数以字母顺序打印所有函数定义。如果只想看函数名，则使用 <code>declare -F</code>。</li></ul><p><strong>函数的自动加载</strong></p><p>如果想在每次启动系统时，自动加载函数，则只需要将函数写入启动文件中即可。例如将函数写入 <code>$HOME/.profile</code> 文件，每次启动时， <code>source $HOME/.profile</code> 都会自动加载函数。</p><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> funcName ()<span class="hljs-comment"># 这种情况，圆括号并不是必须的</span><br>&#123;<br>    shell commands<br>&#125;<br>或者<br><span class="hljs-function"><span class="hljs-title">funcName</span></span> ()<br>&#123;<br>    shell commands<br>&#125;<br></code></pre></td></tr></table></figure><p><em>两者没有功能上的区别</em></p><p><strong>示例</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><span class="hljs-comment"># user_login.sh</span><br><span class="hljs-comment"># 查看用户是否登录</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">user_login</span></span> ()<br>&#123;<br>    <span class="hljs-keyword">if</span> who | grep <span class="hljs-variable">$1</span> &gt; /dev/null<br>    <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;User <span class="hljs-variable">$1</span> is on.&quot;</span><br>    <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;User <span class="hljs-variable">$1</span> is off.&quot;</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ souce user_login.sh<br>$ user_login <span class="hljs-built_in">test</span><br>User <span class="hljs-built_in">test</span> is off.<br>$ user_login aurora<br>User aurora is on.<br></code></pre></td></tr></table></figure><h2 id="函数的参数和返回值"><a href="#函数的参数和返回值" class="headerlink" title="函数的参数和返回值"></a>函数的参数和返回值</h2><p>由于函数是在当前 shell 中执行，所以<strong>变量对函数和 shell 都可见</strong>。在函数内部对变量做任何改动也会影响 shell 的环境。</p><ul><li><p><strong>参数</strong> 可以像使用命令一样，向函数传递位置参数。位置参数是函数私有的，对位置参数的任何操作并不会影响函数外部使用的任何参数。</p></li><li><p><strong>局部变量限定词 <code>local</code></strong> 使用 <code>local</code> 时，定义的变量为函数的内部变量。内部变量在函数退出时小时，不会影响到外部同名的变量。</p></li><li><p><strong>返回方式 <code>return</code></strong> <code>return</code> 命令可以在函数体内返回函数被调用的位置。如果没有指定 <code>return</code> 的参数，则函数返回最后一条命令的退出状态。<code>return</code> 命令同样也可以返回传给他的参数。按照规定，<code>return</code> 命令只能返回 <code>0</code> 到 <code>255</code> 之间的整数。如果函数体内使用 <code>exit</code> 命令，则退出整个脚本。</p><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><span class="hljs-comment"># sum.sh</span><br><span class="hljs-comment"># 数字相加</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">sum</span></span> ()<br>&#123;<br>    <span class="hljs-built_in">let</span> <span class="hljs-string">&quot;sum=<span class="hljs-variable">$1</span>+<span class="hljs-variable">$2</span>&quot;</span><br>    <span class="hljs-built_in">return</span> <span class="hljs-variable">$sum</span><br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ souce sum.sh<br>$ sum 2 5<br>$ <span class="hljs-built_in">echo</span> $?<br>7<br></code></pre></td></tr></table></figure></li></ul><h1 id="条件控制与流程控制"><a href="#条件控制与流程控制" class="headerlink" title="条件控制与流程控制"></a>条件控制与流程控制</h1><h2 id="if-else-语句"><a href="#if-else-语句" class="headerlink" title="if/else 语句"></a>if/else 语句</h2><p><strong>语法结构</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> condition<br><span class="hljs-keyword">then</span><br>statements<br>[elseif condition<br><span class="hljs-keyword">then</span> statements...]<br>[<span class="hljs-keyword">else</span><br>statements ]<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h2 id="退出状态"><a href="#退出状态" class="headerlink" title="退出状态"></a>退出状态</h2><p>每一条命令或函数，在退出时都会返回一个小的整数给调用它的程序。这就是命令或函数的退出状态。</p><p>按照惯例，函数以及命令的退出状态用 <code>0</code> 来表示成功，而非零表示失败。</p><p>​                                           <strong>POSIX</strong> 定义了与退出状态的值相对应的含义</p><table><thead><tr><th align="center">值</th><th>含义</th></tr></thead><tbody><tr><td align="center">0</td><td>命令退出成功</td></tr><tr><td align="center">&gt;0</td><td>在重定向或单词展开期间（～、变量、命令、算数展开、单词切割）失败</td></tr><tr><td align="center">1~125</td><td>命令退出失败。特定退出值的定义，参见不同命令的定义</td></tr><tr><td align="center">126</td><td>命令找到，但无法执行命令文件</td></tr><tr><td align="center">127</td><td>命令无法找到</td></tr><tr><td align="center">&gt;128</td><td>命令因收到信号而死亡</td></tr></tbody></table><h2 id="退出状态与逻辑操作"><a href="#退出状态与逻辑操作" class="headerlink" title="退出状态与逻辑操作"></a>退出状态与逻辑操作</h2><p>shell 语法的一个神奇之处在于它允许在逻辑上操作退出状态。这种支持给我们在编码中带来诸多方便。常见的逻辑操作有<code>NOT</code>、<code>AND</code> 与 <code>OR</code>。</p><ul><li><p><strong>NOT</strong> 当需要在条件判定失败时进行某种操作，用 <code>NOT</code> 更方便，使用方法是将 <code>!</code> 置于条件判定前。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> ! condition<br><span class="hljs-keyword">then</span> statements<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure></li><li><p><strong>AND</strong> <code>AND</code> 操作可以一次执行多个判断条件，操作符是 <code>&amp;&amp;</code>。shell 会有限执行第一个条件判断，如果成功，则执行第一个。所有条件判断成功，则整个判断语句视为成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> condition1 &amp;&amp; condition2<br><span class="hljs-keyword">then</span><br>statement<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure></li><li><p><strong>OR</strong> 与 <code>AND</code> 相反，<code>OR</code> 操作是只要两个或多个条件中有一个成功，则整个判断视为成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> condition1 || condition2<br><span class="hljs-keyword">then</span><br>statement<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="条件测试"><a href="#条件测试" class="headerlink" title="条件测试"></a>条件测试</h2><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><p><code>if</code> 语句唯一可以测试的内容是退出状态。不能用于检测表达式的值。但是通过 <code>test</code> 命令，可以将表达式值的测试与 <code>if</code> 语句连用。</p><h4 id="shell-中-test-命令方法详解"><a href="#shell-中-test-命令方法详解" class="headerlink" title="shell 中 test 命令方法详解"></a>shell 中 <code>test</code> 命令方法详解</h4><p>Shell中的 test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。</p><ul><li>判断表达式</li></ul><table><thead><tr><th align="center">表达式</th><th>含义（返回真）</th></tr></thead><tbody><tr><td align="center">if test condition</td><td>表达式为真</td></tr><tr><td align="center">if test ! condition</td><td>表达式为假</td></tr><tr><td align="center">test condition1 -a condition2</td><td>两个表达式都为真</td></tr><tr><td align="center">test condition1 -o condition2</td><td>两个表达式有一个为真</td></tr></tbody></table><ul><li>判断字符串</li></ul><table><thead><tr><th align="center">参数</th><th>含义（返回真）</th></tr></thead><tbody><tr><td align="center">-n</td><td>字符串的长度非零</td></tr><tr><td align="center">-z</td><td>字符串的长度为零</td></tr><tr><td align="center">=</td><td>字符串相等</td></tr><tr><td align="center">!=</td><td>字符串不等</td></tr></tbody></table><ul><li>判断数字</li></ul><table><thead><tr><th align="center">参数</th><th>含义（返回真）</th></tr></thead><tbody><tr><td align="center">-eq</td><td>整数相等</td></tr><tr><td align="center">-ne</td><td>整数1不等于整数2</td></tr><tr><td align="center">-ge</td><td>整数1大于等于整数2</td></tr><tr><td align="center">-gt</td><td>整数1大于整数2</td></tr><tr><td align="center">-le</td><td>整数1小于等于整数2</td></tr><tr><td align="center">-lt</td><td>整数1小于整数2</td></tr></tbody></table><ul><li>判断文件（<a name="file">#</a>）</li></ul><table><thead><tr><th align="center">表达式</th><th>含义</th></tr></thead><tbody><tr><td align="center">test file1 -ef file2</td><td>两个文件具有同样的设备号和结点号</td></tr><tr><td align="center">test file1 -nt file2</td><td>文件1比文件2 新</td></tr><tr><td align="center">test file1 -ot file2</td><td>文件1比文件2 旧</td></tr><tr><td align="center">test -b file</td><td>文件存在并且是块设备文件</td></tr><tr><td align="center">test -c file</td><td>文件存在并且是字符设备文件</td></tr><tr><td align="center">test -d file</td><td>文件存在并且是目录</td></tr><tr><td align="center">test -e file</td><td>文件存在</td></tr><tr><td align="center">test -f file</td><td>文件存在并且是普通文件</td></tr><tr><td align="center">test -g file</td><td>文件存在并且是设置了组ID</td></tr><tr><td align="center">test -G file</td><td>文件存在并且属于有效组ID</td></tr><tr><td align="center">test -h file</td><td>文件存在并且是一个符号链接（同-L）</td></tr><tr><td align="center">test -k file</td><td>文件存在并且是设置了sticky位</td></tr><tr><td align="center">test -L file</td><td>文件存在并且是一个符号链接（同-h）</td></tr><tr><td align="center">test -o file</td><td>文件存在并且属于有效用户ID</td></tr><tr><td align="center">test -p file</td><td>文件存在并且是一个命名管道文件</td></tr><tr><td align="center">test -r file</td><td>文件存在并且可读</td></tr><tr><td align="center">test -s file</td><td>文件存在并且为非空白文件</td></tr><tr><td align="center">test -S file</td><td>文件存在并且是一个套接字</td></tr><tr><td align="center">test -t file</td><td>文件描述符是在一个终端打开的</td></tr><tr><td align="center">test -u file</td><td>文件存在并且设置了它的set-user-id位</td></tr><tr><td align="center">test -w file</td><td>文件存在并且可写</td></tr><tr><td align="center">test -x file</td><td>文件存在并且可执行</td></tr></tbody></table><p><code>test</code> 命令有另一种形式，以 <code>[...]</code> 的语法，和使用 <code>test</code> 命令一样。因此，下面两个测试语句是等效的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span> 2 -eq 3<br><span class="hljs-keyword">then</span><br>...<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ 2 -eq 3 ]<br><span class="hljs-keyword">then</span><br>...<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p><strong>NOTE:</strong> <em>用中括号做判断时，“[”和“]”前面的空格是必须的，这是初学者常范的错误。</em></p><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><p>shell 支持字符串比较。结合 <code>test</code> 命令（或 <code>[...]</code>），就能判断字符串比较的结果，再进行相关操作。下面表格列出了两个字符串操作的含义：</p><table><thead><tr><th align="center">操作符</th><th>如果…则为真</th></tr></thead><tbody><tr><td align="center">str1 = str2</td><td>str1 匹配 str2</td></tr><tr><td align="center">str1 != str2</td><td>str1 不匹配 str2</td></tr><tr><td align="center">-n str1</td><td>str1 为非 null（长度大于 0）</td></tr><tr><td align="center">-z str1</td><td>str1 为 null（长度为 0）</td></tr></tbody></table><p><strong>示例1</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><span class="hljs-comment"># file_exist.sh</span><br><span class="hljs-comment"># 测试一个文件是否存在且非空</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span> ! -s <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span><br><span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$1</span> does not exist or is empty.<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ./file_exist.sh file_exist.sh <br>$ ./file_exist.sh test.txt<br>test.txt does not exist or is empty.<br>$ touch test.txt<br>$ ./file_exist.sh test.txt<br>test.txt does not exist or is empty.<br></code></pre></td></tr></table></figure><p>由执行结果可知，文件不存在，或者文件内容为空，脚本都会给出错误提示信息。</p><p><strong>NOTE</strong> <em>在 <code>-s</code> 函数与文件名之间必须有一个空格。</em></p><p><strong>示例2</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><span class="hljs-comment"># 一个复杂的比较</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$#</span> -lt 2 -o ! -e <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> ]<br><span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p><em>如果这个 shell 脚本接收的位置参数少于两个或者被 <code>$1</code> 指定的文件不存在，则 shell 过程直接退出。</em></p><p><strong>示例3</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><span class="hljs-comment"># user_exist.sh</span><br><span class="hljs-comment"># 判断用户是否存在</span><br>line= | grep <span class="hljs-variable">$1</span> /etc/passwd |<br><span class="hljs-keyword">if</span> [ -z <span class="hljs-variable">$line</span> ]<br><span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;user <span class="hljs-variable">$1</span> exists.&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;user <span class="hljs-variable">$1</span> not exists!&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ./user_exist.sh aurora<br>user aurora exists.<br></code></pre></td></tr></table></figure><h3 id="文件属性检查"><a href="#文件属性检查" class="headerlink" title="文件属性检查"></a>文件属性检查</h3><p>同<a href="#file">判断文件</a></p><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><span class="hljs-comment"># file_check.sh</span><br><span class="hljs-comment"># 测试文件判断操作</span><br>file=<span class="hljs-variable">$1</span><br><br><span class="hljs-keyword">if</span> [ -d <span class="hljs-variable">$file</span> ]<br><span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$file</span> is a directory.&quot;</span><br><span class="hljs-keyword">elif</span> [ -f <span class="hljs-variable">$file</span> ]<br><span class="hljs-keyword">then</span><br><span class="hljs-keyword">if</span> [ -r <span class="hljs-variable">$file</span> ] &amp;&amp; [ -w <span class="hljs-variable">$file</span> ] &amp;&amp; [ -x <span class="hljs-variable">$file</span> ]<br><span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;You have read, write and execute permission on <span class="hljs-variable">$file</span>.&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$file</span> is neither a file nor a directory.&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="case-语句"><a href="#case-语句" class="headerlink" title="case 语句"></a>case 语句</h3><p>当脚本出现需要多次条件判断时，使用<code>if-elif</code> 这种方式会显得语句太长。这时 <code>case</code> 语句可以用更精细的方式表达 <code>if-elif</code> 类型的语句。语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">case</span> expression <span class="hljs-keyword">in</span><br>pattern1)<br>statements;;<br>pattern2)<br>statements;;<br>pattern3 | pattern4)<br>statements;;<br>...<br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><p>任何 <code>pattern</code> 之间都可以由管道字符（|）分割的几个模式组成。这种情况下，<code>expression</code> 匹配其中一种情况，相应的语句即被执行。<code>case</code> 语句以 <code>esac</code> 结束。</p><p><strong>示例</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><span class="hljs-comment"># file_type.sh</span><br><span class="hljs-comment"># 判断文件类型</span><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$1</span> <span class="hljs-keyword">in</span><br>*.txt)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;The file type is txt&quot;</span>;;<br>*.jpg | *.png | *.gif | *.jpeg)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;The file type is image&quot;</span>;;<br>*.pdf)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;The file type is pdf&quot;</span>;;<br>*)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Don&#x27;t know <span class="hljs-variable">$1</span>&#x27;s file type&quot;</span><br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><h1 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h1><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><p><strong>语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> name [<span class="hljs-keyword">in</span> list]<span class="hljs-comment"># 遍历 list 中的所有对象</span><br><span class="hljs-keyword">do</span><br>...<span class="hljs-comment"># able to use $name，执行与 $name 相关的操作</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p><code>list</code> 为名称列表，我们在 <code>for</code> 循环中对名称列表中的每个对象进行相应操作。可以通过命令模式匹配等操作来获取名称列表，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> `find . -name <span class="hljs-string">&quot;*.mp3&quot;</span>`<span class="hljs-comment"># 遍历当前目录中所有 mp3 文件</span><br><span class="hljs-keyword">do</span><br>mpg123 <span class="hljs-variable">$file</span><span class="hljs-comment"># mpg123 是命令行程序，播放 mp3 文件</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> *.mp3<br><span class="hljs-keyword">do</span><br>mpg123 <span class="hljs-variable">$file</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>上面两个示例都可以遍历 mp3 文件，并且依次播放。但是，使用 <code>find</code> 命令会依次遍历当前目录下面的子目录，层层查找。而直接列出只会包含当前目录的文件夹。</p><p>在 <code>for</code> 循环中，如果 <code>in list</code> 被省略，则默认认为 <code>in &quot;$@&quot;</code>，即命令行参数的引用列表。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> name<span class="hljs-comment"># 循环命令行参数</span><br><span class="hljs-keyword">do</span><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$name</span> <span class="hljs-keyword">in</span><br>-f)<br>...<span class="hljs-comment"># 进行 -f 参数相关参数</span><br>-d)<br>...<span class="hljs-comment"># 进行 -d 参数相关参数</span><br><span class="hljs-keyword">esac</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h2 id="while-until-循环"><a href="#while-until-循环" class="headerlink" title="while/until 循环"></a>while/until 循环</h2><p><strong>语法</strong></p><ul><li>while</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">while</span> condition<br><span class="hljs-keyword">do</span><br>statements...<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><ul><li>until</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">until condition<br><span class="hljs-keyword">do</span><br>statements...<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p><code>while</code> 和 <code>until</code> 的区别在于：当 <code>condition</code> 的退出状态为真时，<code>while</code> 循环继续执行，否则退出循环；当 <code>condition</code> 的退出状态为假时，<code>until</code> 循环继续执行，否则退出循环。</p><p><strong>示例</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><span class="hljs-comment"># 使用 while 遍历path</span><br>path = <span class="hljs-variable">$PATH</span>:<span class="hljs-comment"># 将 $PATH 复制给 path，并在末尾加上冒号</span><br><br><span class="hljs-keyword">while</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$path</span>&quot;</span> ];<span class="hljs-comment"># 当 path 不为空时(这里必须要加上双引号，不然程序无法退出)</span><br><span class="hljs-keyword">do</span><br>ls -ld <span class="hljs-variable">$&#123;path%%:*&#125;</span><span class="hljs-comment"># 使用 ls -ld 列出 path 中的第一个目录</span><br>path=<span class="hljs-variable">$&#123;path#*:&#125;</span><span class="hljs-comment"># 截取 path 中的第一个目录和冒号</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><span class="hljs-comment"># 使用 while 遍历path</span><br>path = <span class="hljs-variable">$PATH</span>:<span class="hljs-comment"># 将 $PATH 复制给 path，并在末尾加上冒号</span><br><br>until [ -z <span class="hljs-variable">$path</span> ];<span class="hljs-comment"># 当 path 不为空时（这里又不需要加上引号？）</span><br><span class="hljs-keyword">do</span><br>ls -ld <span class="hljs-variable">$&#123;path%%:*&#125;</span><span class="hljs-comment"># 使用 ls -ld 列出 path 中的第一个目录</span><br>path=<span class="hljs-variable">$&#123;path#*:&#125;</span><span class="hljs-comment"># 截取 path 中的第一个目录和冒号</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p><em>和其他语言一样，shell 中通过 <code>continue</code> 跳出当前循环，提早进入下一轮循环。<code>break</code> 退出循环体，继续执行外层任务。</em></p><h2 id="循环实例"><a href="#循环实例" class="headerlink" title="循环实例"></a>循环实例</h2><p>下面使用 <code>shift</code>、<code>while</code> 和 <code>break</code> 构建一个简单的命令参数处理程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><span class="hljs-comment"># 依次读取命令行参数，并对相应参数进行处理。</span><br>author=<span class="hljs-literal">false</span><br>list=<span class="hljs-literal">false</span><br>file=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">while</span> [ <span class="hljs-variable">$#</span> -gt 0 ]<br><span class="hljs-keyword">do</span><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$1</span> <span class="hljs-keyword">in</span><br>-f) <br>file=<span class="hljs-variable">$2</span> <span class="hljs-comment"># 将 -f 参数的下一个参数（file）传入 file 变量</span><br><span class="hljs-built_in">shift</span><span class="hljs-comment"># 截去下一个参数</span><br>;;<br>-l)<br>list=<span class="hljs-literal">true</span> ;;<br>-a)<br>author=<span class="hljs-literal">true</span> ;;<br>--)<br><span class="hljs-built_in">shift</span><span class="hljs-comment"># 传统上，以 -- 结束选项</span><br><span class="hljs-built_in">break</span><br>;;<br>-*)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$0</span>: <span class="hljs-variable">$1</span>: unrecognized option&quot;</span> ;;<br>*)<br><span class="hljs-built_in">break</span> ;;<span class="hljs-comment"># 无选项参数时，从循环中跳出</span><br><span class="hljs-keyword">esac</span><br><span class="hljs-built_in">shift</span><span class="hljs-comment"># 参数偏移</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>在 shell 中 <code>getopts</code> 命令可以简化选项处理。使用  <code>getopts</code> 重写上面的例子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><span class="hljs-comment"># 依次读取命令行参数，并对相应参数进行处理。</span><br>author=<span class="hljs-literal">false</span><br>list=<span class="hljs-literal">false</span><br>file=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">getopts</span> :alf arg<br><span class="hljs-keyword">do</span><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$arg</span> <span class="hljs-keyword">in</span><br>f)<br>file=<span class="hljs-variable">$OPTARG</span> <span class="hljs-comment"># 将 -f 参数的下一个参数（file）付给 file 变量</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Found the -f option&quot;</span><br>;;<br>l)<br>list=<span class="hljs-literal">true</span> <br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Found the -l option&quot;</span><br>;;<br>a)<br>author=<span class="hljs-literal">true</span> <br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Found the -a option&quot;</span><br>;;<br>*)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Unknown option:<span class="hljs-variable">$opt</span>&quot;</span> ;;<br><span class="hljs-keyword">esac</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="bash-shell-解析命令行参数工具：getopts-getopt"><a href="#bash-shell-解析命令行参数工具：getopts-getopt" class="headerlink" title="bash/shell 解析命令行参数工具：getopts/getopt"></a>bash/shell 解析命令行参数工具：getopts/getopt</h3><h4 id="bash-内置的-getopts"><a href="#bash-内置的-getopts" class="headerlink" title="bash 内置的 getopts"></a>bash 内置的 <code>getopts</code></h4><p><strong>实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">getopts</span> <span class="hljs-string">&#x27;d:Dm:f:t:&#x27;</span> opt;<br><span class="hljs-keyword">do</span><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$opt</span> <span class="hljs-keyword">in</span><br>d)<br>DEL_DAYS=<span class="hljs-string">&quot;<span class="hljs-variable">$OPTARG</span>&quot;</span>;;<br>        D)<br>            DEL_ORIGINAL=<span class="hljs-string">&#x27;yes&#x27;</span>;;<br>        f)<br>            DIR_FROM=<span class="hljs-string">&quot;<span class="hljs-variable">$OPTARG</span>&quot;</span>;;<br>        m)<br>            MAILDIR_NAME=<span class="hljs-string">&quot;<span class="hljs-variable">$OPTARG</span>&quot;</span>;;<br>        t)<br>            DIR_TO=<span class="hljs-string">&quot;<span class="hljs-variable">$OPTARG</span>&quot;</span>;;<br>        ?)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Usage: `basename <span class="hljs-variable">$0</span>` [options] filename&quot;</span><br>    <span class="hljs-keyword">esac</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">shift</span> $((<span class="hljs-variable">$OPTIND</span> - <span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><p><code>getopts</code> 后面的字符串就是可以使用的选项列表，每个字母代表一个选项。后面带 <code>:</code> 的意味着选项除了定义本身之外，还会带上一个参数作为选项的值。比如 <code>d:</code> 在实际的使用中就会对应 <code>-d 30</code>，选项的值就是 30；<code>getopts</code>字符串中没有跟随 <code>:</code> 的是开关型选项，不需要再指定值，相当于 <code>true/false</code>，只要带了这个参数就是 true。如果命令行中包含了没有在 <code>getopts</code> 列表中的选项，会有警告信息，如果在整个 <code>getopts</code> 字符串前面也加上个 <code>:</code>，就能消除警告信息了。</p><p>使用 <code>getopts</code> 识别出各个选项之后，就可以配合 <code>case</code> 来进行相应的操作了。操作中有两个相对固定的 <strong>“常量”</strong>，一个是 <code>OPTARG</code>，用来取当前选项的值，另外一个是 <code>OPTIND</code>，代表当前选项在参数列表中的位移。注意 <code>case</code> 中的最后一个选择── <code>?</code>，代表这如果出现了不认识的选项，所进行的操作。  </p><p>选项参数识别完成之后，如果要取剩余的其它命令行参数，可以使用 <code>shift</code> 把选项参数抹去。就像例子里面的那样，对整个参数列表进行左移操作，最左边的参数就丢失了（已经用 <code>case</code> 判断并进行了处理，不再需要了）。位移的长度正好是刚才case循环完毕之后的OPTIND - 1，因为参数从1开始编号，选项处理完毕之后，正好指向剩余其它参数的第一个。在这里还要知道，<code>getopts</code> 在处理参数的时候，处理一个开关型选项，<code>OPTIND</code> 加1，处理一个带值的选项参数，<code>OPTIND</code> 则会加2。 </p><p>最后，真正需要处理的参数就是 <code>$1~$#</code> 了，可以用 <code>for</code> 循环依次处理。</p><p><strong>使用 <code>getopts</code> 处理参数虽然是方便，但仍然有两个小小的局限</strong>：</p><ul><li>选项参数的格式必须是 <code>-d val</code>，而不能是中间没有空格的 <code>-dval</code>。</li><li>所有选项参数必须写在其它参数的前面，因为 <code>getopts</code> 是从命令行前面开始处理，遇到非 <code>-</code> 开头的参数，或者选项参数结束标记 <code>--</code> 就中止了，如果中间遇到非选项的命令行参数，后面的选项参数就都取不到了。</li><li>不支持长选项， 也就是 <code>--debug</code> 之类的选项</li></ul><p><strong>另一个实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> 初始 OPTIND: <span class="hljs-variable">$OPTIND</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">getopts</span> <span class="hljs-string">&quot;a:b:c&quot;</span> arg <span class="hljs-comment">#选项后面的冒号表示该选项需要参数</span><br><span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-variable">$arg</span> <span class="hljs-keyword">in</span><br>        a)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a&#x27;s arg:<span class="hljs-variable">$OPTARG</span>&quot;</span> <span class="hljs-comment">#参数存在$OPTARG中</span><br>;;<br>        b)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;b&#x27;s arg:<span class="hljs-variable">$OPTARG</span>&quot;</span><br>;;<br>        c)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;c&#x27;s arg:<span class="hljs-variable">$OPTARG</span>&quot;</span><br>;;<br>        ?)  <span class="hljs-comment">#当有不认识的选项的时候arg为?</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;unkonw argument&quot;</span><br><span class="hljs-built_in">exit</span> 1<br>;;<br>    <span class="hljs-keyword">esac</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">echo</span> 处理完参数后的 OPTIND：<span class="hljs-variable">$OPTIND</span><br><span class="hljs-built_in">echo</span> 移除已处理参数个数：$((OPTIND-<span class="hljs-number">1</span>))<br><span class="hljs-built_in">shift</span> $((OPTIND-<span class="hljs-number">1</span>))<br><span class="hljs-built_in">echo</span> 参数索引位置：<span class="hljs-variable">$OPTIND</span><br><span class="hljs-built_in">echo</span> 准备处理余下的参数：<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Other Params: <span class="hljs-variable">$@</span>&quot;</span><br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ./getopts2.sh -a 11 -b 22 -c 33<br>初始 OPTIND: 1<br>a<span class="hljs-string">&#x27;s arg:11</span><br><span class="hljs-string">b&#x27;</span>s arg:22<br>c<span class="hljs-string">&#x27;s arg:</span><br><span class="hljs-string">处理完参数后的 OPTIND：6</span><br><span class="hljs-string">移除已处理参数个数：5</span><br><span class="hljs-string">参数索引位置：6</span><br><span class="hljs-string">准备处理余下的参数：</span><br><span class="hljs-string">Other Params: 33</span><br></code></pre></td></tr></table></figure><h4 id="外部强大的参数解析工具：getopt"><a href="#外部强大的参数解析工具：getopt" class="headerlink" title="外部强大的参数解析工具：getopt"></a>外部强大的参数解析工具：<code>getopt</code></h4><p><strong>先来看下getopt/getopts的区别</strong></p><ul><li><code>getopts</code> 是 bash内建命令的， 而 <code>getopt</code> 是外部命令</li><li><code>getopts</code> 不支持长选项， 比如： –date</li><li>在使用 <code>getopt</code> 的时候， 每处理完一个位置参数后都需要自己 <code>shift</code> 来跳到下一个位置， <code>getopts</code> 只需要在最后使用 <code>shift $(($OPTIND - 1))</code> 来跳到 parameter 的位置。</li><li>使用 <code>getopt</code> 时， 在命令行输入的位置参数是什么， 在 <code>getopt</code> 中需要保持原样， 比如 <code>-t</code> ， 在 <code>getopt</code> 的 <code>case</code> 语句中也要使用 <code>-t</code>，  而 <code>getopts</code> 中不要前面的-。</li><li><code>getopt</code> 往往需要跟 <code>set</code> 配合使用</li><li><code>getopt -o</code> 的选项注意一下</li><li><code>getopts</code> 使用语法简单，<code>getopt</code> 使用语法较复杂</li><li><code>getopts</code> 不会重排所有参数的顺序，<code>getopt</code> 会重排参数顺序</li><li><code>getopts</code> 出现的目的是为了代替 <code>getopt</code> 较快捷的执行参数分析工作</li></ul><p>下面是 <code>getopt</code> 自带的一个例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs bash">Code highlighting produced by Actipro CodeHighlighter (freeware)http://www.CodeHighlighter.com/--&gt;<br><span class="hljs-comment">#!/bin/bash</span><br><br><span class="hljs-comment"># A small example program for using the new getopt(1) program.</span><br><span class="hljs-comment"># This program will only work with bash(1)</span><br><span class="hljs-comment"># An similar program using the tcsh(1) script language can be found</span><br><span class="hljs-comment"># as parse.tcsh</span><br><br><span class="hljs-comment"># Example input and output (from the bash prompt):</span><br><span class="hljs-comment"># ./parse.bash -a par1 &#x27;another arg&#x27; --c-long &#x27;wow!*\?&#x27; -cmore -b &quot; very long &quot;</span><br><span class="hljs-comment"># Option a</span><br><span class="hljs-comment"># Option c, no argument</span><br><span class="hljs-comment"># Option c, argument `more&#x27;</span><br><span class="hljs-comment"># Option b, argument ` very long &#x27;</span><br><span class="hljs-comment"># Remaining arguments:</span><br><span class="hljs-comment"># --&gt; `par1&#x27;</span><br><span class="hljs-comment"># --&gt; `another arg&#x27;</span><br><span class="hljs-comment"># --&gt; `wow!*\?&#x27;</span><br><br><span class="hljs-comment"># Note that we use `&quot;$@&quot;&#x27; to let each command-line parameter expand to a</span><br><span class="hljs-comment"># separate word. The quotes around `$@&#x27; are essential!</span><br><span class="hljs-comment"># We need TEMP as the `eval set --&#x27; would nuke the return value of getopt.</span><br><br><span class="hljs-comment">#-o表示短选项，两个冒号表示该选项有一个可选参数，可选参数必须紧贴选项</span><br><span class="hljs-comment">#如-carg 而不能是-c arg</span><br><span class="hljs-comment">#--long表示长选项</span><br><span class="hljs-comment">#&quot;$@&quot; ：参数本身的列表，也不包括命令本身</span><br><span class="hljs-comment"># -n:出错时的信息</span><br><span class="hljs-comment"># -- ：举一个例子比较好理解：</span><br><span class="hljs-comment">#我们要创建一个名字为 &quot;-f&quot;的目录你会怎么办？</span><br><span class="hljs-comment"># mkdir -f #不成功，因为-f会被mkdir当作选项来解析，这时就可以使用</span><br><span class="hljs-comment"># mkdir -- -f 这样-f就不会被作为选项。</span><br><br>TEMP=`getopt -o ab:c:: --long a-long,b-long:,c-long:: \<br>     -n <span class="hljs-string">&#x27;example.bash&#x27;</span> -- <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>`<br><br><span class="hljs-keyword">if</span> [ $? != 0 ] ; <span class="hljs-keyword">then</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Terminating...&quot;</span> &gt;&amp;2 ; <span class="hljs-built_in">exit</span> 1 ; <span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># Note the quotes around `$TEMP&#x27;: they are essential!</span><br><span class="hljs-comment">#set 会重新排列参数的顺序，也就是改变$1,$2...$n的值，这些值在getopt中重新排列过了</span><br><span class="hljs-built_in">eval</span> <span class="hljs-built_in">set</span> -- <span class="hljs-string">&quot;<span class="hljs-variable">$TEMP</span>&quot;</span><br><br><span class="hljs-comment">#经过getopt的处理，下面处理具体选项。</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span> ; <span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> <span class="hljs-keyword">in</span><br>        -a|--a-long) <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Option a&quot;</span> ; <span class="hljs-built_in">shift</span> ;;<br>        -b|--b-long) <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Option b, argument \`<span class="hljs-variable">$2</span>&#x27;&quot;</span> ; <span class="hljs-built_in">shift</span> 2 ;;<br>        -c|--c-long)<br>            <span class="hljs-comment"># c has an optional argument. As we are in quoted mode,</span><br>            <span class="hljs-comment"># an empty parameter will be generated if its optional</span><br>            <span class="hljs-comment"># argument is not found.</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$2</span>&quot;</span> <span class="hljs-keyword">in</span><br>                <span class="hljs-string">&quot;&quot;</span>) <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Option c, no argument&quot;</span>; <span class="hljs-built_in">shift</span> 2 ;;<br>                *)  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Option c, argument \`<span class="hljs-variable">$2</span>&#x27;&quot;</span> ; <span class="hljs-built_in">shift</span> 2 ;;<br>            <span class="hljs-keyword">esac</span> ;;<br>        --) <span class="hljs-built_in">shift</span> ; <span class="hljs-built_in">break</span> ;;<br>        *) <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Internal error!&quot;</span> ; <span class="hljs-built_in">exit</span> 1 ;;<br>    <span class="hljs-keyword">esac</span><br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Remaining arguments:&quot;</span><br><span class="hljs-keyword">for</span> arg <span class="hljs-keyword">do</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;--&gt; &#x27;</span><span class="hljs-string">&quot;\`<span class="hljs-variable">$arg</span>&#x27;&quot;</span> ;<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell-shell编程基础</title>
    <link href="/2019/04/01/shell/shell-shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <url>/2019/04/01/shell/shell-shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="向脚本中传递参数"><a href="#向脚本中传递参数" class="headerlink" title="向脚本中传递参数"></a>向脚本中传递参数</h1><p>shell 脚本传参方式是，直接在执行脚本时，在后面以空格连接变量即可。</p><p><code>$#</code> 用来代表传入脚本参数个数；$@` 代表所有参数的内容。</p><p>​                                          <strong>shell 编程中的参数引用</strong></p><table><thead><tr><th align="center">引用参数</th><th>描述</th></tr></thead><tbody><tr><td align="center">0,1,2…</td><td>位置参数。从参数 0 开始，参数 0 代表启动脚本的程序名称。1代表第一个参数，2代表第二个参数。。。</td></tr><tr><td align="center">*</td><td>以一个单字符串显示所有向脚本传递的参数。</td></tr><tr><td align="center">@</td><td>从参数 1 开始，显示所有向脚本传递的参数。</td></tr><tr><td align="center">#</td><td>参数数量（不包含参数 0）</td></tr><tr><td align="center">$</td><td>脚本运行的当前进程 ID 号</td></tr><tr><td align="center">！</td><td>后台运行的最后一个进程 ID 号</td></tr><tr><td align="center">？</td><td>显示最后命令的退出状态</td></tr><tr><td align="center">-</td><td>显示 shell 使用的当前选项，与 set 命令功能相同</td></tr></tbody></table><p><strong>注：</strong> <em>如果传入脚本的参数多于 9 个，则不能通过使用 <code>$10</code> 来引用第 10 个参数。必须处理或保存第一个参数（$1），然后使用 <code>shift</code> 命令删除参数 1，并将所有剩余的参数下移一位，因此 <code>$10</code> 就变成了 <code>$9</code>，以此类推。</em></p><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p><strong>描述</strong></p><p>移动或重命名文件或目录。</p><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p><strong>描述</strong></p><p>创建一个或多个新的目录。</p><h1 id="I-O-重定向"><a href="#I-O-重定向" class="headerlink" title="I/O 重定向"></a>I/O 重定向</h1><p>是程序，总难免输入输出。程序与外界的交互是程序功能强大与灵活的必要条件。</p><h2 id="标准输入（0）、标准输出（1）与标准错误（2）"><a href="#标准输入（0）、标准输出（1）与标准错误（2）" class="headerlink" title="标准输入（0）、标准输出（1）与标准错误（2）"></a>标准输入（0）、标准输出（1）与标准错误（2）</h2><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p><strong>描述</strong></p><p>连接或显示文件。</p><p><strong>注：</strong> <em>不要使用重定向符号 <code>&gt;</code> 将输出重定向到输入文件之一。如果这么做，会丢失输入文件中的原始数据。</em></p><h2 id="管道与重定向"><a href="#管道与重定向" class="headerlink" title="管道与重定向"></a>管道与重定向</h2><p>shell 提供一下基本方法和标记，来改变默认输入端和输出端。</p><ul><li><p>以 <code>&gt;</code> 改变标准输出</p><p><code>Command &gt; file</code> 将 command 的标准输出重定向到指定文件中，而不是打印到控制台上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;redirect to file.&quot;</span> &gt; /tmp/a.txt<br>$ cat /tmp.a.txt<br>redirect to file.<br></code></pre></td></tr></table></figure></li><li><p>以 <code>&lt;</code> 改变标准输入</p><p><code>Command &lt; file</code> 将 command 的标准输入想改为 file。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cat &lt; /tmp/a.txt &gt; /tmp/b.txt<br>$ cat /tmp/b.txt<br>redirect to file.<br></code></pre></td></tr></table></figure></li><li><p>以 <code>&gt;&gt;</code> 追加文件</p><p><code>Command &gt;&gt; file</code> 可将 command 的输出<strong>追加</strong>到文件 file 末尾。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;update a.txt&quot;</span> &gt;&gt; /tmp/a.txt<br>$ cat /tmp/a.txt<br>redirect to file.<br>update a.txt<br></code></pre></td></tr></table></figure></li><li><p>以 <code>|</code> 建立管道</p><p><code>Command1 | Command2</code> 将 command1 的标准输出与 command2 的标准输入相连。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ head -n10 /etc/passwd | grep <span class="hljs-string">&quot;root&quot;</span><br>root:x:0:0:root:/root:/bin/bash<br></code></pre></td></tr></table></figure><p><strong>注：</strong> <em>管道的数据共享在 Linux 内核是通过内存拷贝实现的。相较于 CPU 的运算，数据的移动往往更加耗时。</em></p><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><p><strong>描述</strong></p><p>显示一个文件或多个文件的前几行或前几个字节。</p></li></ul><h2 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h2><p>内核（kernel）利用文件描述符来访问文件。文件描述符是非负整数。</p><h2 id="特殊文件的妙用"><a href="#特殊文件的妙用" class="headerlink" title="特殊文件的妙用"></a>特殊文件的妙用</h2><p>LInux 系统中有一些神奇的文件，例如 <code>/dev/null</code>、<code>/deb/zero</code>、 <code>/dev/tty</code>。</p><ul><li><p><strong>/dev/null</strong></p><p><code>/dev/null</code> 像一个<strong>黑洞</strong>，所有写入他的内容都会永久消失。</p></li><li><p><strong>/dev/zero</strong></p><p><code>/dev/zero</code> 的主要用途是用来创建一个指定长度，并且初始化为空的文件，这种文件一般被用作临时交换文件懊恼。</p></li><li><p><strong>/dev/tty</strong></p><p><code>/dev/tty</code> 是一个很实用的文件。当程序打开这个文件时，UNIX/Linux 会自动将它重定向到当前所出的终端。</p><h1 id="基本文本检索（grep）"><a href="#基本文本检索（grep）" class="headerlink" title="基本文本检索（grep）"></a>基本文本检索（grep）</h1></li></ul><p>Linux 设计中有这样一个关键思想——“一切皆文件”。</p><h2 id="grep-命令检索文本"><a href="#grep-命令检索文本" class="headerlink" title="grep 命令检索文本"></a>grep 命令检索文本</h2><p><code>grep</code> 命令提供在文本中检索特定字符串的方法，并且支持正则表达式。<code>grep</code> 命令常与管道连用，用于在文本流中过滤出符合条件的文本行。</p><h1 id="UNIX-Linux-系统的设计与-shell-编程"><a href="#UNIX-Linux-系统的设计与-shell-编程" class="headerlink" title="UNIX/Linux 系统的设计与 shell 编程"></a>UNIX/Linux 系统的设计与 shell 编程</h1><h2 id="一切皆文件"><a href="#一切皆文件" class="headerlink" title="一切皆文件"></a>一切皆文件</h2><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p><strong>描述</strong></p><p>显示目录内容。</p><h2 id="UNIX-编程的基本原则"><a href="#UNIX-编程的基本原则" class="headerlink" title="UNIX 编程的基本原则"></a>UNIX 编程的基本原则</h2><p><strong>KISS</strong></p><p><code>Keep It Simple，Stupid！</code></p>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell-初识Shell</title>
    <link href="/2019/03/29/shell/shell-%E5%88%9D%E8%AF%86Shell/"/>
    <url>/2019/03/29/shell/shell-%E5%88%9D%E8%AF%86Shell/</url>
    
    <content type="html"><![CDATA[<h1 id="第一个-Shell-实例"><a href="#第一个-Shell-实例" class="headerlink" title="第一个 Shell 实例"></a>第一个 Shell 实例</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#！/bin/bash</span><br><span class="hljs-comment"># hello.sh</span><br><span class="hljs-built_in">cd</span> /tmp<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello world!&quot;</span><br></code></pre></td></tr></table></figure><p>运行这个程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ chmod +x hello.sh<br>$ ./hello.sh<br>hello world!<br></code></pre></td></tr></table></figure><h2 id="第一行的"><a href="#第一行的" class="headerlink" title="第一行的#!"></a>第一行的<code>#!</code></h2><p>当命令行 shell 执行程序时，先判断该程序是否有可执行权限。没有可执行权限，通过 <code>chmod +x</code> 给程序赋予权限。</p><p><code>#!</code> 的作用是，当执行这个程序时，系统通过读取 <code>#!</code> 之后的的字符串来判断这是一个什么类型的程序。然后调用对应的解释器来执行文件。</p><p>因为 <code>#!</code> 并不局限于创建 shell 脚本，同样可以创建 php、Python等程序。：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#! /usr/bin/php</span><br><span class="hljs-meta">&lt;?php</span><br>var_dump(<span class="hljs-string">&#x27;hello world!&#x27;</span>);<br></code></pre></td></tr></table></figure><p>这个程序被赋予执行性权限后，运行时，就像调用了 php 解释器来袭性一样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ chmod +x php.sh<br>$ ./php.sh<br>string(12) <span class="hljs-string">&quot;hello world!&quot;</span><br></code></pre></td></tr></table></figure><h2 id="父-shell-与-子-shell"><a href="#父-shell-与-子-shell" class="headerlink" title="父 shell 与 子 shell"></a>父 shell 与 子 shell</h2><p>从下图中可以看出，使用 <code>source</code> 命令执行程序，当前目录发生了改变，而直接执行是没有发生这种改变。</p><p>当前 shell 终端收到 <code>/hello.sh</code> 命令时，发现不是内建命令，会创建一个一个一模一样的 shell 子进程，来执行这个外部命令。这个子进程会按照 shell程序严格执行，子进程的 <code>$PWD</code> 变量被 <code>cd</code> 改变，但父进程感觉不到。子进程执行完毕，消亡，回到父进程。</p><p><img src="/images/shell/hello_world.sh.png" alt="直接执行和 source 执行 shell 的差异"></p><p><em><code>父进程的当前目录（环境变量）无法被子进程改变！</code></em></p><h3 id="source-命令"><a href="#source-命令" class="headerlink" title="source 命令"></a><code>source</code> 命令</h3><pre><code>**描述**使用 shell进程本身执行脚本文件。source 命令也被称为“点命令”，通常用于重新执行刚修改的初始化文件，使之立即生效。**行为模式**和其他运行脚本不同的是，source 命令影响 shell 进程本身。在脚本执行过程中，并没有进程的创建和消亡。**警告**当需要在程序中修改当前 shell 本身的环境变量时，使用 source 命令。</code></pre><p>从以上 关于 <code>source</code> 命令的介绍，我们可以很明白的理解上图出现的不同情况了。</p><h1 id="Linux-Shell-的变量"><a href="#Linux-Shell-的变量" class="headerlink" title="Linux Shell 的变量"></a>Linux Shell 的变量</h1><ul><li>变量的本质是 <code>key=value</code> 的键值对。</li><li>变量赋值中 <code>=</code> 两边不能有任何空格，否则运行脚本时，会提示变量不存在。</li><li>调用变量时，在变量前加 <code>$</code>符号即可。</li><li>当赋值的内容包含空格时，加上引号。</li></ul><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p><strong>说明：</strong></p><p>允许在标准输出上显示 STRING(s)。<code>echo</code> 将各个参数打印到标准输出。参数间以空格隔开，在输出结束后换行。他会解释每一个字符串里的转义序列，转义序列可以用来表示特殊字符，以及控制其行为模式。</p><h3 id="export"><a href="#export" class="headerlink" title="export"></a>export</h3><p><strong>说明：</strong></p><p><code>export</code> 命令用于设置或显示环境变量。<code>export</code> 命令修改当前 shell 进程的环境变量。若将 <code>export</code> 命令置于脚本中被执行调用，则 <code>export</code> 命令对父 shell 进程的环境变量没有影响。</p><p><code>export</code> 命令用于设置当前进程的环境变量。但是有效期仅维持到当前进程消亡为止。如果想把对环境变量的设置永久保存。则可以将 <code>export</code> 命令置于 shell 登录时执行的启动文件中。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置环境变量 PATH</span><br><span class="hljs-built_in">export</span> PATH=/bin:/usr/<span class="hljs-built_in">local</span>/bin:/usr/bin:/usr/<span class="hljs-built_in">local</span>/games:/usr/games:/sbin<br></code></pre></td></tr></table></figure><p>​                                             <strong>bash 的启动文件 / 登出文件</strong></p><table><thead><tr><th>启动文件/登出文件</th><th>描述</th></tr></thead><tbody><tr><td>/etc/profile</td><td>系统范围的默认值，大部分用来设置环境（所有由  <code>sh</code> 衍生出来的 shell）</td></tr><tr><td>/etc/bashrc</td><td>特定于 <code>Bash</code> 的，系统范围函数与别名</td></tr><tr><td>$HOME/.bash_profile</td><td>用户定义的，环境默认设置，在每个用户的 <code>home</code> 目录下都可以找到（本地副本保存在 <code>/etc/profile</code>）</td></tr><tr><td>$HOME/.bashrc</td><td>用户定义的 <code>Bash</code> 初始化文件，可以在每个用户的 <code>home</code> 目录下找到（本地副本保存在 `/etc/bashrc）；只有交互式的 shell 和用户脚本才会读取这个文件。</td></tr><tr><td>$HOME/.bash_logout</td><td>登出文件、用户定义的指令文件，可在每个用户的 <code>home</code> 目录下找到；在登出（Bash） shell 的时候，这个文件中的命令就会得到执行。</td></tr></tbody></table><p><strong>注：</strong>通过 <code>./</code>方式直接运行脚本文件，<code>export</code> 变量不会影响自己的父进程的环境。但是当使用 <code>source</code> 命令执行脚本时，因为没有生成子进程，此脚本中的 <code>export</code> 命令将会影响父进程的环境。（<em>用户有时给系统添加一个环境变量，想立即生效，就可以使用 <code>source</code> 变量来执行这个脚本即可</em>）</p><h3 id="env"><a href="#env" class="headerlink" title="env"></a>env</h3><p><strong>说明：</strong></p><p>在重建的环境中运行程序，设置环境中的每个 NAME 为 VALUE，并且运行 COMMAND。（未提供 COMMAND 时，显示环境中所有变量的名称和值。提供 COMMAND 时，根据参数重建环境变量后，在新的环境中运行 COMMAND。）</p><h3 id="unset"><a href="#unset" class="headerlink" title="unset"></a>unset</h3><p><strong>说明：</strong></p><p>从当前 shell 删除变量或函数。如果没有提供任何选项，默认 <code>unset</code> 为删除变量（``-v<code>选项）。如果使用</code>-f` 选项，则被视为删除函数操作，参数为幻术名称。</p>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP-设计模式（一）</title>
    <link href="/2019/02/21/php/PHP-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2019/02/21/php/PHP-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title="什么是设计模式"></a>什么是设计模式</h1><p>设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理的运用设计模式可以完美的解决很多问题，每种模式在现在中都有相应的原理来与之对应，每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是它能被广泛应用的原因。简单说：</p><p><strong>模式</strong>：在某些场景下，针对某类问题的某种通用的解决方案。</p><p>场景：项目所在的环境</p><p>问题：约束条件，项目目标等</p><p>解决方案：通用、可复用的设计，解决约束达到目标。</p><h1 id="设计模式的三个分类"><a href="#设计模式的三个分类" class="headerlink" title="设计模式的三个分类"></a>设计模式的三个分类</h1><ul><li><code>创建型模式</code>：<strong>对象实例化的模式，创建型模式用于解耦对象的实例化过程。</strong></li><li><code>结构型模式</code>：<strong>把类或对象结合在一起形成一个更大的结构。</strong></li><li><code>行为型模式</code>：<strong>类和对象如何交互，及划分责任和算法。</strong></li></ul><p>如下图所示：<br><img src="/images/php/design_mode.png" alt="设计模式"></p><h1 id="各分类中模式的关键点"><a href="#各分类中模式的关键点" class="headerlink" title="各分类中模式的关键点"></a>各分类中模式的关键点</h1><p><code>单例模式</code>：某个类只能有一个实例，提供一个全局的访问点。</p><p><code>简单工厂</code>：一个工厂类根据传入的参量决定创建出那一种产品类的实例。</p><p><code>工厂方法</code>：定义一个创建对象的接口，让子类决定实例化那个类。</p><p><code>抽象工厂</code>：创建相关或依赖对象的家族，而无需明确指定具体类。</p><p><code>建造者模式</code>：封装一个复杂对象的构建过程，并可以按步骤构造。</p><p><code>原型模式</code>：通过复制现有的实例来创建新的实例。</p><p><code>适配器模式</code>：将一个类的方法接口转换成客户希望的另外一个接口。</p><p><code>组合模式</code>：将对象组合成树形结构以表示“”部分-整体“”的层次结构。</p><p><code>装饰模式</code>：动态的给对象添加新的功能。</p><p><code>代理模式</code>：为其他对象提供一个代理以便控制这个对象的访问。</p><p><code>亨元（蝇量）模式</code>：通过共享技术来有效的支持大量细粒度的对象。</p><p><code>外观模式</code>：对外提供一个统一的方法，来访问子系统中的一群接口。</p><p><code>桥接模式</code>：将抽象部分和它的实现部分分离，使它们都可以独立的变化。</p><p><code>模板模式</code>：定义一个算法结构，而将一些步骤延迟到子类实现。</p><p><code>解释器模式</code>：给定一个语言，定义它的文法的一种表示，并定义一个解释器。</p><p><code>策略模式</code>：定义一系列算法，把他们封装起来，并且使它们可以相互替换。</p><p><code>状态模式</code>：允许一个对象在其对象内部状态改变时改变它的行为。</p><p><code>观察者模式</code>：对象间的一对多的依赖关系。</p><p><code>备忘录模式</code>：在不破坏封装的前提下，保持对象的内部状态。</p><p><code>中介者模式</code>：用一个中介对象来封装一系列的对象交互。</p><p><code>命令模式</code>：将命令请求封装为一个对象，使得可以用不同的请求来进行参数化。</p><p><code>访问者模式</code>：在不改变数据结构的前提下，增加作用于一组对象元素的新功能。</p><p><code>责任链模式</code>：将请求的发送者和接收者解耦，使的多个对象都有处理这个请求的机会。</p><p><code>迭代器模式</code>：一种遍历访问聚合对象中各个元素的方法，不暴露该对象的内部结构。</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP-数组根据某键值，把相同键值的合并最终生成一个新的二维数组.md</title>
    <link href="/2019/02/21/php/PHP-%E6%95%B0%E7%BB%84%E6%A0%B9%E6%8D%AE%E6%9F%90%E9%94%AE%E5%80%BC%EF%BC%8C%E6%8A%8A%E7%9B%B8%E5%90%8C%E9%94%AE%E5%80%BC%E7%9A%84%E5%90%88%E5%B9%B6%E6%9C%80%E7%BB%88%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/"/>
    <url>/2019/02/21/php/PHP-%E6%95%B0%E7%BB%84%E6%A0%B9%E6%8D%AE%E6%9F%90%E9%94%AE%E5%80%BC%EF%BC%8C%E6%8A%8A%E7%9B%B8%E5%90%8C%E9%94%AE%E5%80%BC%E7%9A%84%E5%90%88%E5%B9%B6%E6%9C%80%E7%BB%88%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<p><strong>说明</strong>：</p><p>将原数组中的有某个相同键值的二维数组合并到一个数组中重新组成一个二维数组。</p><p>要处理的PHP数组：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$infos</span> = <span class="hljs-keyword">array</span>(    <br>    <span class="hljs-keyword">array</span>(<br>        <span class="hljs-string">&#x27;gid&#x27;</span> =&gt; <span class="hljs-number">36</span>,<br>        <span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;高二佳木斯&#x27;</span>,         <br>        <span class="hljs-string">&#x27;start_time&#x27;</span> =&gt; <span class="hljs-string">&#x27;2015-08-28 00:00:00&#x27;</span>,           <br>        <span class="hljs-string">&#x27;pic&#x27;</span> =&gt; <span class="hljs-string">&#x27;2015/08/438488a00b3219929282e3652061c2e3.png&#x27;</span>                   <br>    ),    <br>    <span class="hljs-keyword">array</span>(          <br>        <span class="hljs-string">&#x27;gid&#x27;</span> =&gt; <span class="hljs-number">36</span>,<br>        <span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;高二佳木斯&#x27;</span>,    <br>        <span class="hljs-string">&#x27;start_time&#x27;</span> =&gt; <span class="hljs-string">&#x27;2015-08-20 00:00:00&#x27;</span>,            <br>        <span class="hljs-string">&#x27;pic&#x27;</span> =&gt; <span class="hljs-string">&#x27;2015/08/438488a00b3219929282e3652061c2e3.png&#x27;</span>    <br>    ),   <br>    <span class="hljs-keyword">array</span>(           <br>        <span class="hljs-string">&#x27;gid&#x27;</span> =&gt; <span class="hljs-number">36</span>,<br>        <span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;高二佳木斯&#x27;</span>,        <br>        <span class="hljs-string">&#x27;start_time&#x27;</span> =&gt; <span class="hljs-string">&#x27;2015-08-28 00:00:00&#x27;</span>,  <br>        <span class="hljs-string">&#x27;pic&#x27;</span> =&gt; <span class="hljs-string">&#x27;2015/08/438488a00b3219929282e3652061c2e3.png&#x27;</span>     <br>    ),    <br>    <span class="hljs-keyword">array</span>(          <br>        <span class="hljs-string">&#x27;gid&#x27;</span> =&gt; <span class="hljs-number">36</span>,<br>        <span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;高二佳木斯&#x27;</span>,        <br>        <span class="hljs-string">&#x27;start_time&#x27;</span> =&gt; <span class="hljs-string">&#x27;2015-08-27 00:00:00&#x27;</span>,  <br>        <span class="hljs-string">&#x27;pic&#x27;</span> =&gt; <span class="hljs-string">&#x27;2015/08/438488a00b3219929282e3652061c2e3.png&#x27;</span>    <br>    ),   <br>    <span class="hljs-keyword">array</span>(           <br>        <span class="hljs-string">&#x27;gid&#x27;</span> =&gt; <span class="hljs-number">18</span>,           <br>        <span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;天书&#x27;</span>,          <br>        <span class="hljs-string">&#x27;start_time&#x27;</span> =&gt; <span class="hljs-string">&#x27;2015-08-24 00:00:00&#x27;</span>,           <br>        <span class="hljs-string">&#x27;pic&#x27;</span> =&gt; <span class="hljs-string">&#x27;dev/2015/08/438488a00b3219929282e3652061c2e3.png&#x27;</span>       <br>    ),   <br>    <span class="hljs-keyword">array</span>(         <br>        <span class="hljs-string">&#x27;gid&#x27;</span> =&gt; <span class="hljs-number">17</span>,           <br>        <span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;晒黑西游&#x27;</span>,          <br>        <span class="hljs-string">&#x27;start_time&#x27;</span> =&gt; <span class="hljs-string">&#x27;2015-08-06 00:00:00&#x27;</span>,       <br>        <span class="hljs-string">&#x27;pic&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span><br>    )    <br>    <span class="hljs-keyword">array</span>(           <br>       <span class="hljs-string">&#x27;gid&#x27;</span> =&gt; <span class="hljs-number">17</span>,           <br>       <span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;晒黑西游&#x27;</span>,           <br>       <span class="hljs-string">&#x27;start_time&#x27;</span> =&gt; <span class="hljs-string">&#x27;2015-08-24 00:00:00&#x27;</span>,         <br>       <span class="hljs-string">&#x27;pic&#x27;</span> =&gt; <br>    )<br>);<br></code></pre></td></tr></table></figure><p><strong>处理要求</strong>：将数组中 <code>gid</code> 相同的二维数组合并到一个数组中，生成一个新的二维数组</p><p>代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$result</span>= <span class="hljs-keyword">array</span>();<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$infos</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$info</span>) &#123;<br>    <span class="hljs-variable">$result</span>[<span class="hljs-variable">$info</span>[<span class="hljs-string">&#x27;gid&#x27;</span>]][] = <span class="hljs-variable">$info</span>;<br>&#125; <br>print_r(<span class="hljs-variable">$result</span>);<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">Array</span>(  <br>  [<span class="hljs-number">36</span>] =&gt; <span class="hljs-keyword">Array</span>(            <br>      [<span class="hljs-number">0</span>] =&gt; <span class="hljs-keyword">Array</span>(                   <br>          [gid] =&gt; <span class="hljs-number">36</span>                   <br>          [name] =&gt; 高二佳木斯            <br>          [start_time] =&gt; <span class="hljs-number">2015</span>-<span class="hljs-number">08</span>-<span class="hljs-number">28</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>        <br>          [pic] =&gt; dev/<span class="hljs-number">2015</span>/<span class="hljs-number">08</span>/<span class="hljs-number">438488</span>a00b3219929282e3652061c2e3.png                <br>      )            <br>     [<span class="hljs-number">1</span>] =&gt; <span class="hljs-keyword">Array</span>(<br>          [gid] =&gt; <span class="hljs-number">36</span> <br>          [name] =&gt; 高二佳木斯                   <br>          [start_time] =&gt; <span class="hljs-number">2015</span>-<span class="hljs-number">08</span>-<span class="hljs-number">20</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>              <br>          [pic] =&gt; dev/<span class="hljs-number">2015</span>/<span class="hljs-number">08</span>/<span class="hljs-number">438488</span>a00b3219929282e3652061c2e3.png                <br>      )           <br>      [<span class="hljs-number">2</span>] =&gt; Arra(                    <br>          [gid] =&gt; <span class="hljs-number">36</span>                   <br>          [name] =&gt; 高二佳木斯               <br>          [start_time] =&gt; <span class="hljs-number">2015</span>-<span class="hljs-number">08</span>-<span class="hljs-number">28</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>           <br>          [pic] =&gt; dev/<span class="hljs-number">2015</span>/<span class="hljs-number">08</span>/<span class="hljs-number">438488</span>a00b3219929282e3652061c2e3.png               <br>      )          <br>      [<span class="hljs-number">3</span>] =&gt; <span class="hljs-keyword">Array</span>(                    <br>          [gid] =&gt; <span class="hljs-number">36</span>                  <br>          [name] =&gt; 高二佳木斯               <br>          [start_time] =&gt; <span class="hljs-number">2015</span>-<span class="hljs-number">08</span>-<span class="hljs-number">27</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>           <br>          [pic] =&gt; dev/<span class="hljs-number">2015</span>/<span class="hljs-number">08</span>/<span class="hljs-number">438488</span>a00b3219929282e3652061c2e3.png               <br>      ) <br>  )   <br>  [<span class="hljs-number">18</span>] =&gt; <span class="hljs-keyword">Array</span>(            <br>      [<span class="hljs-number">0</span>] =&gt; <span class="hljs-keyword">Array</span>(                   <br>          [gid] =&gt; <span class="hljs-number">18</span>               <br>          [name] =&gt; 天书             <br>          [start_time] =&gt; <span class="hljs-number">2015</span>-<span class="hljs-number">08</span>-<span class="hljs-number">24</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <br>          [pic] =&gt; dev/<span class="hljs-number">2015</span>/<span class="hljs-number">08</span>/<span class="hljs-number">438488</span>a00b3219929282e3652061c2e3.png                <br>      )               <br>  )        <br>  [<span class="hljs-number">17</span>] =&gt; <span class="hljs-keyword">Array</span>(            <br>      [<span class="hljs-number">0</span>] =&gt; Arra(                 <br>          [gid] =&gt; <span class="hljs-number">17</span>           <br>          [name] =&gt; 晒黑西游      <br>          [start_time] =&gt; <span class="hljs-number">2015</span>-<span class="hljs-number">08</span>-<span class="hljs-number">06</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>        <br>          [pic] =&gt; <br>      )            <br>     [<span class="hljs-number">1</span>] =&gt; <span class="hljs-keyword">Array</span>(            <br>         [gid] =&gt; <span class="hljs-number">17</span>       <br>         [name] =&gt; 晒黑西游       <br>         [start_time] =&gt; <span class="hljs-number">2015</span>-<span class="hljs-number">08</span>-<span class="hljs-number">24</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>            <br>         [pic] =&gt; <br>     )        <br>  )<br>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP-header()生成文件</title>
    <link href="/2019/02/21/php/PHP-header-%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6/"/>
    <url>/2019/02/21/php/PHP-header-%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">httpHeader</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-variable">$id</span> = <span class="hljs-number">21</span>;<br>    <br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select pass from user where id=&quot;</span> . <span class="hljs-variable">$id</span>;<br><br>    <span class="hljs-variable">$pass</span> = <span class="hljs-variable">$mysql</span>-&gt;getResult(<span class="hljs-variable">$sql</span>);<br>    <br>    <br>    <span class="hljs-comment">//需要经获取到的pass以文件形式，让用户可以点击下载到本地</span><br>    <br>    header(<span class="hljs-string">&quot;Content-type:text/plain&quot;</span>);<br><br>    header(<span class="hljs-string">&quot;Accept-Ranges:bytes&quot;</span>);<br><br>    header(<span class="hljs-string">&quot;Content-Disposition:attachement; filename=&quot;</span> . <span class="hljs-variable">$pas</span> . <span class="hljs-string">&quot;.txt&quot;</span>);<br><br>    header(<span class="hljs-string">&quot;Cache-Control:must-revalidate,post-check=0,pre-check=0&quot;</span>);<br><br>    header(<span class="hljs-string">&quot;Pragma:no-cache&quot;</span>);<br><br>    <br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$pass</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>将生成的文件放到一个a链接中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/index/httpHeader&quot;</span>&gt;</span>点击下载文件<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样就可以简单的通过在线生成文件，不需要再存储到后台服务器。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP-取整函数ceil，floor，round，intval函数的区别</title>
    <link href="/2019/02/21/php/PHP-%E5%8F%96%E6%95%B4%E5%87%BD%E6%95%B0ceil%EF%BC%8Cfloor%EF%BC%8Cround%EF%BC%8Cintval%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2019/02/21/php/PHP-%E5%8F%96%E6%95%B4%E5%87%BD%E6%95%B0ceil%EF%BC%8Cfloor%EF%BC%8Cround%EF%BC%8Cintval%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="ceil-—-进一法取整"><a href="#ceil-—-进一法取整" class="headerlink" title="ceil — 进一法取整"></a><code>ceil</code> — 进一法取整</h1><p><strong>说明</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">float</span> ceil ( <span class="hljs-keyword">float</span> <span class="hljs-variable">$value</span> )<br></code></pre></td></tr></table></figure><p>返回不小于 <code>value</code> 的下一个整数，<code>value</code> 如果有小数部分则进一位。<code>ceil()</code> 返回的类型仍然是 <code>float</code>，因为 <code>float</code> 值的范围通常比 <code>integer</code> 要大。</p><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">echo</span> ceil(<span class="hljs-number">4.3</span>); <span class="hljs-comment">// 5</span><br><br>    <span class="hljs-keyword">echo</span> ceil(<span class="hljs-number">9.999</span>); <span class="hljs-comment">// 10</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="floor-—-舍去法取整"><a href="#floor-—-舍去法取整" class="headerlink" title="floor — 舍去法取整"></a><code>floor</code> — 舍去法取整</h1><p><strong>说明</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">float</span> floor ( <span class="hljs-keyword">float</span> <span class="hljs-variable">$value</span> )<br></code></pre></td></tr></table></figure><p>返回不大于 <code>value</code> 的下一个整数，将 <code>value</code> 的小数部分舍去取整。<code>floor()</code> 返回的类型仍然是 <code>float</code>，因为 <code>float</code> 值的范围通常比 <code>integer</code> 要大。</p><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">echo</span> floor(<span class="hljs-number">4.3</span>); <span class="hljs-comment">// 4</span><br><br>    <span class="hljs-keyword">echo</span> floor(<span class="hljs-number">9.999</span>); <span class="hljs-comment">// 9</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="round-—-对浮点数进行四舍五入"><a href="#round-—-对浮点数进行四舍五入" class="headerlink" title="round — 对浮点数进行四舍五入"></a><code>round</code> — 对浮点数进行四舍五入</h1><p><strong>说明</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">float</span> round ( <span class="hljs-keyword">float</span> <span class="hljs-variable">$val</span> [, <span class="hljs-keyword">int</span> <span class="hljs-variable">$precision</span> ] )<br></code></pre></td></tr></table></figure><p>返回将 <code>val</code> 根据指定精度 <code>precision</code>（十进制小数点后数字的数目）进行四舍五入的结果。<code>precision</code> 也可以是负数或零（默认值）。</p><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">echo</span> round(<span class="hljs-number">3.4</span>); <span class="hljs-comment">// 3</span><br><br>    <span class="hljs-keyword">echo</span> round(<span class="hljs-number">3.5</span>); <span class="hljs-comment">// 4</span><br><br>    <span class="hljs-keyword">echo</span> round(<span class="hljs-number">3.6</span>); <span class="hljs-comment">// 4</span><br><br>    <span class="hljs-keyword">echo</span> round(<span class="hljs-number">3.6</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">// 4</span><br><br>    <span class="hljs-keyword">echo</span> round(<span class="hljs-number">1.95583</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// 1.96</span><br><br>    <span class="hljs-keyword">echo</span> round(<span class="hljs-number">1241757</span>, -<span class="hljs-number">3</span>); <span class="hljs-comment">// 1242000</span><br><br>    <span class="hljs-keyword">echo</span> round(<span class="hljs-number">5.045</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// 5.05</span><br><br>    <span class="hljs-keyword">echo</span> round(<span class="hljs-number">5.055</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// 5.06</span><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong>： PHP 默认不能正确处理类似 “12,300.2″ 的字符串。</p><p><strong>注意</strong>： precision 参数是在 PHP 4 中被引入的。</p><h1 id="intval-—-获取变量的整数值"><a href="#intval-—-获取变量的整数值" class="headerlink" title="intval — 获取变量的整数值"></a><code>intval</code> — 获取变量的整数值</h1><p><strong>说明</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">int</span> intval ( <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$var</span> [, <span class="hljs-keyword">int</span> <span class="hljs-variable">$base</span> ] )<br></code></pre></td></tr></table></figure><p>通过使用特定的进制转换（默认是十进制），返回变量 <code>var</code> 的 <code>integer</code> 数值。<br><code>var</code> 可以是任何标量类型。<code>intval()</code> 不能用于 <code>array</code> 或 <code>object</code>。</p><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">echo</span> intval(<span class="hljs-number">4.3</span>);     <span class="hljs-comment">// 4</span><br><br>    <span class="hljs-keyword">echo</span> intval(<span class="hljs-number">9.999</span>); <span class="hljs-comment">// 9</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong>：<br>除非 <code>var</code> 参数是字符串，否则 <code>intval()</code> 的 <code>base</code> 参数不会有效果。</p><p><code>floor</code> 函数与 <code>intval</code> 函数功能相同，所不同之处是一个返回的浮点数(float)，而另一个是整数(integer)，因为 <code>float</code> 值的范围通常比 <code>integer</code> 要大。不过就数值本身来说两者是相等的。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP-自动加载规范</title>
    <link href="/2019/02/12/php/PHP-%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD%E8%A7%84%E8%8C%83/"/>
    <url>/2019/02/12/php/PHP-%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h1 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">autoload</span>(<span class="hljs-params"><span class="hljs-variable">$className</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$className</span> = ltrim(<span class="hljs-variable">$className</span>, <span class="hljs-string">&#x27;\\&#x27;</span>);<br>    <span class="hljs-variable">$fileName</span>  = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-variable">$namespace</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$lastNsPos</span> = strrpos(<span class="hljs-variable">$className</span>, <span class="hljs-string">&#x27;\\&#x27;</span>)) &#123;<br>        <span class="hljs-variable">$namespace</span> = substr(<span class="hljs-variable">$className</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$lastNsPos</span>);<br>        <span class="hljs-variable">$className</span> = substr(<span class="hljs-variable">$className</span>, <span class="hljs-variable">$lastNsPos</span> + <span class="hljs-number">1</span>);<br>        <span class="hljs-variable">$fileName</span>  = str_replace(<span class="hljs-string">&#x27;\\&#x27;</span>, DIRECTORY_SEPARATOR, <span class="hljs-variable">$namespace</span>) . DIRECTORY_SEPARATOR;<br>    &#125;<br>    <span class="hljs-variable">$fileName</span> .= str_replace(<span class="hljs-string">&#x27;_&#x27;</span>, DIRECTORY_SEPARATOR, <span class="hljs-variable">$className</span>) . <span class="hljs-string">&#x27;.php&#x27;</span>;<br><br>    <span class="hljs-keyword">require</span> <span class="hljs-variable">$fileName</span>;<br>&#125;<br>spl_autoload_register(<span class="hljs-string">&#x27;autoload&#x27;</span>);<br></code></pre></td></tr></table></figure><p>摘录自：<a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md#example-implementation">https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md#example-implementation</a></p><h1 id="SplClassLoader-实现"><a href="#SplClassLoader-实现" class="headerlink" title="SplClassLoader 实现"></a>SplClassLoader 实现</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span><br><span class="hljs-comment"> * &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span><br><span class="hljs-comment"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</span><br><span class="hljs-comment"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span><br><span class="hljs-comment"> * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</span><br><span class="hljs-comment"> * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</span><br><span class="hljs-comment"> * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</span><br><span class="hljs-comment"> * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</span><br><span class="hljs-comment"> * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span><br><span class="hljs-comment"> * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span><br><span class="hljs-comment"> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This software consists of voluntary contributions made by many individuals</span><br><span class="hljs-comment"> * and is licensed under the MIT license. For more information, see</span><br><span class="hljs-comment"> * &lt;http://www.doctrine-project.org&gt;.</span><br><span class="hljs-comment"> */</span><br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * SplClassLoader implementation that implements the technical interoperability</span><br><span class="hljs-comment"> * standards for PHP 5.3 namespaces and class names.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * http://groups.google.com/group/php-standards/web/psr-0-final-proposal?pli=1</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *     // Example which loads classes for the Doctrine Common package in the</span><br><span class="hljs-comment"> *     // Doctrine\Common namespace.</span><br><span class="hljs-comment"> *     $classLoader = new SplClassLoader(&#x27;Doctrine\Common&#x27;, &#x27;/path/to/doctrine&#x27;);</span><br><span class="hljs-comment"> *     $classLoader-&gt;register();</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@license</span> http://www.opensource.org/licenses/mit-license.html  MIT License</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Jonathan H. Wage &lt;jonwage<span class="hljs-doctag">@gmail</span>.com&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Roman S. Borschel &lt;roman<span class="hljs-doctag">@code</span>-factory.org&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Matthew Weier O&#x27;Phinney &lt;matthew<span class="hljs-doctag">@zend</span>.com&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Kris Wallsmith &lt;kris.wallsmith<span class="hljs-doctag">@gmail</span>.com&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Fabien Potencier &lt;fabien.potencier<span class="hljs-doctag">@symfony</span>-project.org&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SplClassLoader</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_fileExtension</span> = <span class="hljs-string">&#x27;.php&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_namespace</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_includePath</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_namespaceSeparator</span> = <span class="hljs-string">&#x27;\\&#x27;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建一个新的SplClassLoader，用于加载指定命名空间。</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $ns The namespace to use.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$ns</span> = <span class="hljs-literal">null</span>, <span class="hljs-variable">$includePath</span> = <span class="hljs-literal">null</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;_namespace = <span class="hljs-variable">$ns</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;_includePath = <span class="hljs-variable">$includePath</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置这个类加载器的命名空间中类使用的命名空间分隔符。</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $sep The separator to use.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setNamespaceSeparator</span>(<span class="hljs-params"><span class="hljs-variable">$sep</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;_namespaceSeparator = <span class="hljs-variable">$sep</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取这个类加载器的命名空间中类使用的命名空间分隔符。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getNamespaceSeparator</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;_namespaceSeparator;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置此类加载器命名空间中所有类文件的基包含路径。</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $includePath</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setIncludePath</span>(<span class="hljs-params"><span class="hljs-variable">$includePath</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;_includePath = <span class="hljs-variable">$includePath</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取此类加载器命名空间中所有类文件的基包含路径。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> string $includePath</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getIncludePath</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;_includePath;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在这个类加载器的命名空间中设置类文件的文件扩展名。</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $fileExtension</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setFileExtension</span>(<span class="hljs-params"><span class="hljs-variable">$fileExtension</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;_fileExtension = <span class="hljs-variable">$fileExtension</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取这个类加载器的命名空间中设置类文件的文件扩展名。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> string $fileExtension</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFileExtension</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;_fileExtension;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将此类加载器安装在SPL自动加载堆栈上。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        spl_autoload_register(<span class="hljs-keyword">array</span>(<span class="hljs-keyword">$this</span>, <span class="hljs-string">&#x27;loadClass&#x27;</span>));<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从SPL自动加载程序堆栈卸载此类加载程序。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unregister</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        spl_autoload_unregister(<span class="hljs-keyword">array</span>(<span class="hljs-keyword">$this</span>, <span class="hljs-string">&#x27;loadClass&#x27;</span>));<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加载给定的类或接口。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $className The name of the class to load.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loadClass</span>(<span class="hljs-params"><span class="hljs-variable">$className</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> === <span class="hljs-keyword">$this</span>-&gt;_namespace || <span class="hljs-keyword">$this</span>-&gt;_namespace.<span class="hljs-keyword">$this</span>-&gt;_namespaceSeparator === substr(<span class="hljs-variable">$className</span>, <span class="hljs-number">0</span>, strlen(<span class="hljs-keyword">$this</span>-&gt;_namespace.<span class="hljs-keyword">$this</span>-&gt;_namespaceSeparator))) &#123;<br>            <span class="hljs-variable">$fileName</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>            <span class="hljs-variable">$namespace</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">false</span> !== (<span class="hljs-variable">$lastNsPos</span> = strripos(<span class="hljs-variable">$className</span>, <span class="hljs-keyword">$this</span>-&gt;_namespaceSeparator))) &#123;<br>                <span class="hljs-variable">$namespace</span> = substr(<span class="hljs-variable">$className</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$lastNsPos</span>);<br>                <span class="hljs-variable">$className</span> = substr(<span class="hljs-variable">$className</span>, <span class="hljs-variable">$lastNsPos</span> + <span class="hljs-number">1</span>);<br>                <span class="hljs-variable">$fileName</span> = str_replace(<span class="hljs-keyword">$this</span>-&gt;_namespaceSeparator, DIRECTORY_SEPARATOR, <span class="hljs-variable">$namespace</span>) . DIRECTORY_SEPARATOR;<br>            &#125;<br>            <span class="hljs-variable">$fileName</span> .= str_replace(<span class="hljs-string">&#x27;_&#x27;</span>, DIRECTORY_SEPARATOR, <span class="hljs-variable">$className</span>) . <span class="hljs-keyword">$this</span>-&gt;_fileExtension;<br>            <span class="hljs-keyword">require</span> (<span class="hljs-keyword">$this</span>-&gt;_includePath !== <span class="hljs-literal">null</span> ? <span class="hljs-keyword">$this</span>-&gt;_includePath . DIRECTORY_SEPARATOR : <span class="hljs-string">&#x27;&#x27;</span>) . <span class="hljs-variable">$fileName</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>摘录自：<a href="https://gist.github.com/jwage/221634">https://gist.github.com/jwage/221634</a></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>PHP标准规范</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang-json、xml、gob数据编码解码</title>
    <link href="/2019/01/18/golang/Golang-json%E3%80%81xml%E3%80%81gob%E6%95%B0%E6%8D%AE%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81%EF%BC%88%E6%A0%BC%E5%BC%8F%E5%8C%96%EF%BC%89/"/>
    <url>/2019/01/18/golang/Golang-json%E3%80%81xml%E3%80%81gob%E6%95%B0%E6%8D%AE%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81%EF%BC%88%E6%A0%BC%E5%BC%8F%E5%8C%96%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>数据结构要在网络中传输或保存到文件，就必须对其编码和解码；目前存在很多编码格式：JSON，XML，gob，Google 缓冲协议等等。Go 语言支持所有这些编码格式；在后面的章节，我们将讨论前三种格式。</p><h1 id="JSON-数据格式"><a href="#JSON-数据格式" class="headerlink" title="JSON 数据格式"></a>JSON 数据格式</h1><p>Go 语言的 <code>json</code> 包可以让你在程序中方便的读取和写入 JSON 数据。<br>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// json.go</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;encoding/json&quot;</span><br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Address <span class="hljs-keyword">struct</span> &#123;<br>    Type    <span class="hljs-keyword">string</span><br>    City    <span class="hljs-keyword">string</span><br>    Country <span class="hljs-keyword">string</span><br>&#125;<br><br><span class="hljs-keyword">type</span> VCard <span class="hljs-keyword">struct</span> &#123;<br>    FirstName <span class="hljs-keyword">string</span><br>    LastName  <span class="hljs-keyword">string</span><br>    Addresses []*Address<br>    Remark    <span class="hljs-keyword">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    pa := &amp;Address&#123;<span class="hljs-string">&quot;private&quot;</span>, <span class="hljs-string">&quot;Aartselaar&quot;</span>, <span class="hljs-string">&quot;Belgium&quot;</span>&#125;<br>    wa := &amp;Address&#123;<span class="hljs-string">&quot;work&quot;</span>, <span class="hljs-string">&quot;Boom&quot;</span>, <span class="hljs-string">&quot;Belgium&quot;</span>&#125;<br>    vc := VCard&#123;<span class="hljs-string">&quot;Jan&quot;</span>, <span class="hljs-string">&quot;Kersschot&quot;</span>, []*Address&#123;pa, wa&#125;, <span class="hljs-string">&quot;none&quot;</span>&#125;<br>    <span class="hljs-comment">// fmt.Printf(&quot;%v: \n&quot;, vc) // &#123;Jan Kersschot [0x126d2b80 0x126d2be0] none&#125;:</span><br>    <span class="hljs-comment">// JSON format:</span><br>    js, _ := json.Marshal(vc)<br>    fmt.Printf(<span class="hljs-string">&quot;JSON format: %s&quot;</span>, js)<br>    <span class="hljs-comment">// using an encoder:</span><br>    file, _ := os.OpenFile(<span class="hljs-string">&quot;vcard.json&quot;</span>, os.O_CREATE|os.O_WRONLY, <span class="hljs-number">0666</span>)<br>    <span class="hljs-keyword">defer</span> file.Close()<br>    enc := json.NewEncoder(file)<br>    err := enc.Encode(vc)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Println(<span class="hljs-string">&quot;Error in encoding json&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>json.Marshal()</code> 的函数签名是 <code>func Marshal(v interface&#123;&#125;) ([]byte, error)</code>，下面是数据编码后的 JSON 文本（实际上是一个 <code>[]byte</code>）：<br>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<br>    <span class="hljs-string">&quot;FirstName&quot;</span>: <span class="hljs-string">&quot;Jan&quot;</span>,<br>    <span class="hljs-string">&quot;LastName&quot;</span>: <span class="hljs-string">&quot;Kersschot&quot;</span>,<br>    <span class="hljs-string">&quot;Addresses&quot;</span>: [&#123;<br>        <span class="hljs-string">&quot;Type&quot;</span>: <span class="hljs-string">&quot;private&quot;</span>,<br>        <span class="hljs-string">&quot;City&quot;</span>: <span class="hljs-string">&quot;Aartselaar&quot;</span>,<br>        <span class="hljs-string">&quot;Country&quot;</span>: <span class="hljs-string">&quot;Belgium&quot;</span><br>    &#125;, &#123;<br>        <span class="hljs-string">&quot;Type&quot;</span>: <span class="hljs-string">&quot;work&quot;</span>,<br>        <span class="hljs-string">&quot;City&quot;</span>: <span class="hljs-string">&quot;Boom&quot;</span>,<br>        <span class="hljs-string">&quot;Country&quot;</span>: <span class="hljs-string">&quot;Belgium&quot;</span><br>    &#125;],<br>    <span class="hljs-string">&quot;Remark&quot;</span>: <span class="hljs-string">&quot;none&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>出于安全考虑，在 web 应用中最好使用 <code>json.HTMLEscape()</code> 函数，其对数据执行HTML转码，所以文本可以被安全地嵌在 HTML <script> 标签中。</p><p><code>json.NewEncoder()</code> 的函数签名是 <code>func NewEncoder(w io.Writer) *Encoder</code>，返回的Encoder类型的指针可调用方法 <code>Encode(v interface&#123;&#125;)</code>，将数据对象 v 的json编码写入 <code>io.Writer</code> w 中。</p><p>JSON 与 Go 类型对应如下：</p><ul><li>bool 对应 JSON 的 booleans</li><li>float64 对应 JSON 的 numbers</li><li>string 对应 JSON 的 strings</li><li>nil 对应 JSON 的 null</li></ul><p>不是所有的数据都可以编码为 JSON 类型：只有验证通过的数据结构才能被编码：</p><ul><li>JSON 对象只支持字符串类型的 key；要编码一个 Go map 类型，map 必须是 map[string]T（T是 json 包中支持的任何类型）</li><li>Channel，复杂类型和函数类型不能被编码</li><li>不支持循环数据结构；它将引起序列化进入一个无限循环</li><li>指针可以被编码，实际上是对指针指向的值进行编码（或者指针是 nil）</li></ul><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p><code>UnMarshal()</code> 的函数签名是 <code>func Unmarshal(data []byte, v interface&#123;&#125;) error</code> 把 JSON 解码为数据结构。</p><p>示例12.16中对 vc 编码后的数据为 js ，对其解码时，我们首先创建结构 VCard 用来保存解码的数据：<code>var v VCard</code> 并调用 <code>json.Unmarshal(js, &amp;v)</code>，解析 []byte 中的 JSON 数据并将结果存入指针 &amp;v 指向的值。</p><p>虽然反射能够让 JSON 字段去尝试匹配目标结构字段；但是只有真正匹配上的字段才会填充数据。字段没有匹配不会报错，而是直接忽略掉。</p><h2 id="解码任意的数据"><a href="#解码任意的数据" class="headerlink" title="解码任意的数据"></a>解码任意的数据</h2><p>json 包使用 <code>map[string]interface&#123;&#125;</code> 和 <code>[]interface&#123;&#125;</code> 储存任意的 JSON 对象和数组；其可以被反序列化为任何的 JSON blob 存储到接口值中。</p><p>来看这个 JSON 数据，被存储在变量 b 中：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">b := []<span class="hljs-keyword">byte</span>(<span class="hljs-string">`&#123;&quot;Name&quot;: &quot;Wednesday&quot;, &quot;Age&quot;: 6, &quot;Parents&quot;: [&quot;Gomez&quot;, &quot;Morticia&quot;]&#125;`</span>)<br></code></pre></td></tr></table></figure><p>不用理解这个数据的结构，我们可以直接使用 Unmarshal 把这个数据编码并保存在接口值中：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> f <span class="hljs-keyword">interface</span>&#123;&#125;<br>err := json.Unmarshal(b, &amp;f)<br></code></pre></td></tr></table></figure><p>f 指向的值是一个 map，key 是一个字符串，value 是自身存储作为空接口类型的值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125; &#123;<br>    <span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;Wednesday&quot;</span>,<br>    <span class="hljs-string">&quot;Age&quot;</span>:  <span class="hljs-number">6</span>,<br>    <span class="hljs-string">&quot;Parents&quot;</span>: []<span class="hljs-keyword">interface</span>&#123;&#125; &#123;<br>        <span class="hljs-string">&quot;Gomez&quot;</span>,<br>        <span class="hljs-string">&quot;Morticia&quot;</span>,<br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>要访问这个数据，我们可以使用类型断言</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">m := f.(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;)<br></code></pre></td></tr></table></figure><p>我们可以通过 for range 语法和 type switch 来访问其实际类型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> m &#123;<br>    <span class="hljs-keyword">switch</span> vv := v.(<span class="hljs-keyword">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-keyword">string</span>:<br>        fmt.Println(k, <span class="hljs-string">&quot;is string&quot;</span>, vv)<br>    <span class="hljs-keyword">case</span> <span class="hljs-keyword">int</span>:<br>        fmt.Println(k, <span class="hljs-string">&quot;is int&quot;</span>, vv)<br><br>    <span class="hljs-keyword">case</span> []<span class="hljs-keyword">interface</span>&#123;&#125;:<br>        fmt.Println(k, <span class="hljs-string">&quot;is an array:&quot;</span>)<br>        <span class="hljs-keyword">for</span> i, u := <span class="hljs-keyword">range</span> vv &#123;<br>            fmt.Println(i, u)<br>        &#125;<br>    <span class="hljs-keyword">default</span>:<br>        fmt.Println(k, <span class="hljs-string">&quot;is of a type I don’t know how to handle&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过这种方式，你可以处理未知的 JSON 数据，同时可以确保类型安全。</p><h2 id="解码数据到结构"><a href="#解码数据到结构" class="headerlink" title="解码数据到结构"></a>解码数据到结构</h2><p>如果我们事先知道 JSON 数据，我们可以定义一个适当的结构并对 JSON 数据反序列化。下面的例子中，我们将定义：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> FamilyMember <span class="hljs-keyword">struct</span> &#123;<br>    Name    <span class="hljs-keyword">string</span><br>    Age     <span class="hljs-keyword">int</span><br>    Parents []<span class="hljs-keyword">string</span><br>&#125;<br></code></pre></td></tr></table></figure><p>并对其反序列化：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> m FamilyMember<br>err := json.Unmarshal(b, &amp;m)<br></code></pre></td></tr></table></figure><p>程序实际上是分配了一个新的切片。这是一个典型的反序列化引用类型（指针、切片和 map）的例子。</p><h2 id="编码和解码流"><a href="#编码和解码流" class="headerlink" title="编码和解码流"></a>编码和解码流</h2><p>json 包提供 Decoder 和 Encoder 类型来支持常用 JSON 数据流读写。NewDecoder 和 NewEncoder 函数分别封装了 io.Reader 和 io.Writer 接口。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewDecoder</span><span class="hljs-params">(r io.Reader)</span> *<span class="hljs-title">Decoder</span></span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewEncoder</span><span class="hljs-params">(w io.Writer)</span> *<span class="hljs-title">Encoder</span></span><br></code></pre></td></tr></table></figure><p>要想把 JSON 直接写入文件，可以使用 json.NewEncoder 初始化文件（或者任何实现 io.Writer 的类型），并调用 Encode()；反过来与其对应的是使用 json.Decoder 和 Decode() 函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewDecoder</span><span class="hljs-params">(r io.Reader)</span> *<span class="hljs-title">Decoder</span></span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(dec *Decoder)</span> <span class="hljs-title">Decode</span><span class="hljs-params">(v <span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-title">error</span></span><br></code></pre></td></tr></table></figure><p>来看下接口是如何对实现进行抽象的：数据结构可以是任何类型，只要其实现了某种接口，目标或源数据要能够被编码就必须实现 io.Writer 或 io.Reader 接口。由于 Go 语言中到处都实现了 Reader 和 Writer，因此 Encoder 和 Decoder 可被应用的场景非常广泛，例如读取或写入 HTTP 连接、websockets 或文件。</p><h1 id="XML-数据格式"><a href="#XML-数据格式" class="headerlink" title="XML 数据格式"></a>XML 数据格式</h1><p>下面是与 JSON 例子等价的 XML 版本：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">&lt;Person&gt;<br>    &lt;FirstName&gt;Laura&lt;/FirstName&gt;<br>    &lt;LastName&gt;Lynn&lt;/LastName&gt;<br>&lt;/Person&gt;<br></code></pre></td></tr></table></figure><p>如同 json 包一样，也有 Marshal() 和 UnMarshal() 从 XML 中编码和解码数据；但这个更通用，可以从文件中读取和写入（或者任何实现了 io.Reader 和 io.Writer 接口的类型）</p><p>和 JSON 的方式一样，XML 数据可以序列化为结构，或者从结构反序列化为 XML 数据。</p><p><code>encoding/xml</code> 包实现了一个简单的 XML 解析器（SAX），用来解析 XML 数据内容。下面的例子说明如何使用解析器：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// xml.go</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;encoding/xml&quot;</span><br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> t, token xml.Token<br><span class="hljs-keyword">var</span> err error<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    input := <span class="hljs-string">&quot;&lt;Person&gt;&lt;FirstName&gt;Laura&lt;/FirstName&gt;&lt;LastName&gt;Lynn&lt;/LastName&gt;&lt;/Person&gt;&quot;</span><br>    inputReader := strings.NewReader(input)<br>    p := xml.NewDecoder(inputReader)<br><br>    <span class="hljs-keyword">for</span> t, err = p.Token(); err == <span class="hljs-literal">nil</span>; t, err = p.Token() &#123;<br>        <span class="hljs-keyword">switch</span> token := t.(<span class="hljs-keyword">type</span>) &#123;<br>        <span class="hljs-keyword">case</span> xml.StartElement:<br>            name := token.Name.Local<br>            fmt.Printf(<span class="hljs-string">&quot;Token name: %s\n&quot;</span>, name)<br>            <span class="hljs-keyword">for</span> _, attr := <span class="hljs-keyword">range</span> token.Attr &#123;<br>                attrName := attr.Name.Local<br>                attrValue := attr.Value<br>                fmt.Printf(<span class="hljs-string">&quot;An attribute is: %s %s\n&quot;</span>, attrName, attrValue)<br>                <span class="hljs-comment">// ...</span><br>            &#125;<br>        <span class="hljs-keyword">case</span> xml.EndElement:<br>            fmt.Println(<span class="hljs-string">&quot;End of token&quot;</span>)<br>        <span class="hljs-keyword">case</span> xml.CharData:<br>            content := <span class="hljs-keyword">string</span>([]<span class="hljs-keyword">byte</span>(token))<br>            fmt.Printf(<span class="hljs-string">&quot;This is the content: %v\n&quot;</span>, content)<br>            <span class="hljs-comment">// ...</span><br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-comment">// ...</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">Token name: Person<br>Token name: FirstName<br>This is the content: Laura<br>End of token<br>Token name: LastName<br>This is the content: Lynn<br>End of token<br>End of token<br></code></pre></td></tr></table></figure><p>包中定义了若干 XML 标签类型：StartElement，Chardata（这是从开始标签到结束标签之间的实际文本），EndElement，Comment，Directive 或 ProcInst。</p><p>包中同样定义了一个结构解析器：<code>NewParser</code> 方法持有一个 io.Reader（这里具体类型是 strings.NewReader）并生成一个解析器类型的对象。还有一个 <code>Token()</code> 方法返回输入流里的下一个 XML token。在输入流的结尾处，会返回（nil，io.EOF）</p><p>XML 文本被循环处理直到 <code>Token()</code> 返回一个错误，因为已经到达文件尾部，再没有内容可供处理了。通过一个 type-switch 可以根据一些 XML 标签进一步处理。Chardata 中的内容只是一个 []byte，通过字符串转换让其变得可读性强一些。</p><h1 id="用-Gob-传输数据"><a href="#用-Gob-传输数据" class="headerlink" title="用 Gob 传输数据"></a>用 Gob 传输数据</h1><p>Gob 是 Go 自己的以二进制形式序列化和反序列化程序数据的格式；可以在 <code>encoding</code> 包中找到。这种格式的数据简称为 Gob （即 Go binary 的缩写）。类似于 Python 的 “pickle” 和 Java 的 “Serialization”。</p><p>Gob 通常用于远程方法调用（RPCs）参数和结果的传输，以及应用程序和机器之间的数据传输。 它和 JSON 或 XML 有什么不同呢？Gob 特定地用于纯 Go 的环境中，例如，两个用 Go 写的服务之间的通信。这样的话服务可以被实现得更加高效和优化。 Gob 不是可外部定义，语言无关的编码方式。因此它的首选格式是二进制，而不是像 JSON 和 XML 那样的文本格式。 Gob 并不是一种不同于 Go 的语言，而是在编码和解码过程中用到了 Go 的反射。</p><p>Gob 文件或流是完全自描述的：里面包含的所有类型都有一个对应的描述，并且总是可以用 Go 解码，而不需要了解文件的内容。</p><p>只有可导出的字段会被编码，零值会被忽略。在解码结构体的时候，只有同时匹配名称和可兼容类型的字段才会被解码。当源数据类型增加新字段后，Gob 解码客户端仍然可以以这种方式正常工作：解码客户端会继续识别以前存在的字段。并且还提供了很大的灵活性，比如在发送者看来，整数被编码成没有固定长度的可变长度，而忽略具体的 Go 类型。</p><p>假如在发送者这边有一个有结构 T：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> T <span class="hljs-keyword">struct</span> &#123; X, Y, Z <span class="hljs-keyword">int</span> &#125;<br><span class="hljs-keyword">var</span> t = T&#123;X: <span class="hljs-number">7</span>, Y: <span class="hljs-number">0</span>, Z: <span class="hljs-number">8</span>&#125;<br></code></pre></td></tr></table></figure><p>而在接收者这边可以用一个结构体 U 类型的变量 u 来接收这个值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> U <span class="hljs-keyword">struct</span> &#123; X, Y *<span class="hljs-keyword">int8</span> &#125;<br><span class="hljs-keyword">var</span> u U<br></code></pre></td></tr></table></figure><p>在接收者中，X 的值是7，Y 的值是0（Y的值并没有从 t 中传递过来，因为它是零值）</p><p>和 JSON 的使用方式一样，Gob 使用通用的 <code>io.Writer</code> 接口，通过 <code>NewEncoder()</code> 函数创建 <code>Encoder</code> 对象并调用 <code>Encode()</code>；相反的过程使用通用的 <code>io.Reader</code> 接口，通过 <code>NewDecoder()</code> 函数创建 <code>Decoder</code> 对象并调用 <code>Decode</code>。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// gob1.go</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;bytes&quot;</span><br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;encoding/gob&quot;</span><br>    <span class="hljs-string">&quot;log&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> P <span class="hljs-keyword">struct</span> &#123;<br>    X, Y, Z <span class="hljs-keyword">int</span><br>    Name    <span class="hljs-keyword">string</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Q <span class="hljs-keyword">struct</span> &#123;<br>    X, Y *<span class="hljs-keyword">int32</span><br>    Name <span class="hljs-keyword">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// Initialize the encoder and decoder.  Normally enc and dec would be      </span><br>    <span class="hljs-comment">// bound to network connections and the encoder and decoder would      </span><br>    <span class="hljs-comment">// run in different processes.      </span><br>    <span class="hljs-keyword">var</span> network bytes.Buffer   <span class="hljs-comment">// Stand-in for a network connection      </span><br>    enc := gob.NewEncoder(&amp;network) <span class="hljs-comment">// Will write to network.      </span><br>    dec := gob.NewDecoder(&amp;network)    <span class="hljs-comment">// Will read from network.      </span><br>    <span class="hljs-comment">// Encode (send) the value.      </span><br>    err := enc.Encode(P&#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&quot;Pythagoras&quot;</span>&#125;)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(<span class="hljs-string">&quot;encode error:&quot;</span>, err)<br>    &#125;<br>    <span class="hljs-comment">// Decode (receive) the value.      </span><br>    <span class="hljs-keyword">var</span> q Q<br>    err = dec.Decode(&amp;q)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(<span class="hljs-string">&quot;decode error:&quot;</span>, err)<br>    &#125;<br>    fmt.Printf(<span class="hljs-string">&quot;%q: &#123;%d,%d&#125;\n&quot;</span>, q.Name, *q.X, *q.Y)<br>&#125;<br><span class="hljs-comment">// Output:   &quot;Pythagoras&quot;: &#123;3,4&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【转】Golang-通过内存缓存来提升性能</title>
    <link href="/2018/11/21/golang/Golang-%E9%80%9A%E8%BF%87%E5%86%85%E5%AD%98%E7%BC%93%E5%AD%98%E6%9D%A5%E6%8F%90%E5%8D%87%E6%80%A7%E8%83%BD/"/>
    <url>/2018/11/21/golang/Golang-%E9%80%9A%E8%BF%87%E5%86%85%E5%AD%98%E7%BC%93%E5%AD%98%E6%9D%A5%E6%8F%90%E5%8D%87%E6%80%A7%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<p>当在进行大量的计算时，提升性能最直接有效的一种方式就是<strong>避免重复计算</strong>。通过在内存中缓存和重复利用相同计算的结果，称之为内存缓存。最明显的例子就是生成斐波那契数列的程序。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>result := <span class="hljs-number">0</span><br>start := time.Now()<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">41</span>; i++ &#123;<br>result = fibonacci(i)<br>fmt.Printf(<span class="hljs-string">&quot;fibonacci(%d) is: %d\n&quot;</span>, i, result)<br>&#125;<br><br>end := time.Now()<br>delta := end.Sub(start)<br>fmt.Printf(<span class="hljs-string">&quot;longCalculation took this amount of time: %s\n&quot;</span>, delta)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fibonacci</span><span class="hljs-params">(n <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(res <span class="hljs-keyword">int</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">1</span> &#123;<br>res = <span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>res = fibonacci(n<span class="hljs-number">-1</span>) + fibonacci(n<span class="hljs-number">-2</span>)<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>程序耗时：</p><pre><code>...longCalculation took this amount of time: 2.750569874s</code></pre><p>要计算数列中第 <code>n</code> 个数字，需要先得到之前两个数的值，但很明显绝大多数情况下前两个数的值都是已经计算过的。即每个更后面的数都是基于之前计算结果的重复计算。</p><p>而我们要做就是将第 <code>n</code> 个数的值存在数组中索引为 <code>n</code> 的位置（详见第 7 章），然后在数组中查找是否已经计算过，如果没有找到，则再进行计算。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;time&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> LIM = <span class="hljs-number">41</span><br><br><span class="hljs-keyword">var</span> fibs [LIM]<span class="hljs-keyword">uint64</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> result <span class="hljs-keyword">uint64</span> = <span class="hljs-number">0</span><br>start := time.Now()<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; LIM; i++ &#123;<br>result = fibonacci(i)<br>fmt.Printf(<span class="hljs-string">&quot;fibonacci(%d) is: %d\n&quot;</span>, i, result)<br>&#125;<br><br>end := time.Now()<br>delta := end.Sub(start)<br>fmt.Printf(<span class="hljs-string">&quot;longCalculation took this amount of time: %s\n&quot;</span>, delta)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fibonacci</span><span class="hljs-params">(n <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(res <span class="hljs-keyword">uint64</span>)</span></span> &#123;<br><span class="hljs-comment">// memoization: check if fibonacci(n) is already known in array:</span><br><span class="hljs-keyword">if</span> fibs[n] != <span class="hljs-number">0</span> &#123;<br>res = fibs[n]<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">1</span> &#123;<br>res = <span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>res = fibonacci(n<span class="hljs-number">-1</span>) + fibonacci(n<span class="hljs-number">-2</span>)<br>&#125;<br>fibs[n] = res<br><br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>程序耗时：</p><pre><code>...longCalculation took this amount of time: 69.255µs</code></pre><p>下面是计算到第 40 位数字的性能对比：</p><ul><li>普通写法：2.750569874 秒</li><li>内存缓存：0.000069255 秒</li></ul><p>内存缓存的优势显而易见，而且您还可以将它应用到其它类型的计算中，例如使用 <code>map</code> 而不是数组或切片。</p><p>内存缓存的技术在使用计算成本相对昂贵的函数时非常有用（不仅限于例子中的递归），譬如<strong>大量进行相同参数的运算</strong>。这种技术还可以应用于纯函数中，即相同输入必定获得相同输出的函数。</p><p>【转】<a href="https://go.fdos.me/06.12.html">通过内存缓存来提升性能</a></p>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang-时间和日期time</title>
    <link href="/2018/11/15/golang/Golang-%E6%97%B6%E9%97%B4%E5%92%8C%E6%97%A5%E6%9C%9Ftime/"/>
    <url>/2018/11/15/golang/Golang-%E6%97%B6%E9%97%B4%E5%92%8C%E6%97%A5%E6%9C%9Ftime/</url>
    
    <content type="html"><![CDATA[<p>time包提供了时间的显示和测量用的函数。日历的计算采用的是公历。</p><h1 id="type-ParseError"><a href="#type-ParseError" class="headerlink" title="type ParseError"></a>type <strong>ParseError</strong></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-string">`ParseError`</span> 描述解析时间字符串时出现的错误。<br><span class="hljs-keyword">type</span> ParseError <span class="hljs-keyword">struct</span> &#123;<br>    Layout     <span class="hljs-keyword">string</span><br>    Value      <span class="hljs-keyword">string</span><br>    LayoutElem <span class="hljs-keyword">string</span><br>    ValueElem  <span class="hljs-keyword">string</span><br>    Message    <span class="hljs-keyword">string</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="func-ParseError-Error"><a href="#func-ParseError-Error" class="headerlink" title="func (*ParseError) Error"></a>func <strong>(*ParseError) Error</strong></h2><p><code>Error</code> 返回 <code>ParseError</code> 的字符串表示。</p><h1 id="type-Weekday"><a href="#type-Weekday" class="headerlink" title="type Weekday"></a>type <strong>Weekday</strong></h1><p><code>Weekday</code> 代表一周的某一天。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Weekday <span class="hljs-keyword">int</span><br><br><span class="hljs-keyword">const</span> (<br>    Sunday Weekday = <span class="hljs-literal">iota</span><br>    Monday<br>    Tuesday<br>    Wednesday<br>    Thursday<br>    Friday<br>    Saturday<br>)<br></code></pre></td></tr></table></figure><h2 id="func-Weekday-String"><a href="#func-Weekday-String" class="headerlink" title="func (Weekday) String"></a>func <strong>(Weekday) String</strong></h2><p><code>String</code> 返回该日（周几）的英文名（”Sunday”、”Monday”，……）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d Weekday)</span> <span class="hljs-title">String</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>fmt.Println(time.Weekday(<span class="hljs-number">2</span>).String())<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>Tuesday</code></pre><h1 id="type-Month"><a href="#type-Month" class="headerlink" title="type Month"></a>type <strong>Month</strong></h1><p><code>Month</code> 代表一年的某个月。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Month <span class="hljs-keyword">int</span><br><br><span class="hljs-keyword">const</span> (<br>    January Month = <span class="hljs-number">1</span> + <span class="hljs-literal">iota</span><br>    February<br>    March<br>    April<br>    May<br>    June<br>    July<br>    August<br>    September<br>    October<br>    November<br>    December<br>)<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">_, month, day := time.Now().Date()<br><span class="hljs-keyword">if</span> month == time.November &amp;&amp; day == <span class="hljs-number">10</span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;Happy Go day!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="func-Month-String"><a href="#func-Month-String" class="headerlink" title="func (Month) String"></a>func <strong>(Month) String</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m Month)</span> <span class="hljs-title">String</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span><br></code></pre></td></tr></table></figure><p><code>String</code> 返回月份的英文名（”January”，”February”，……）</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>fmt.Println(time.Month(<span class="hljs-number">10</span>).String())<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>October</code></pre><h1 id="type-Location"><a href="#type-Location" class="headerlink" title="type Location"></a>type Location</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Location <span class="hljs-keyword">struct</span> &#123;<br>    name <span class="hljs-keyword">string</span><br>zone []zone<br>tx   []zoneTrans<br>cacheStart <span class="hljs-keyword">int64</span><br>cacheEnd   <span class="hljs-keyword">int64</span><br>cacheZone  *zone<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Location</code> 代表一个（关联到某个时间点的）地点，以及该地点所在的时区。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> Local *Location = &amp;localLoc<br></code></pre></td></tr></table></figure><p><code>Local</code> 代表系统本地，对应本地时区。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> UTC *Location = &amp;utcLoc<br></code></pre></td></tr></table></figure><p><code>UTC</code> 代表通用协调时间，对应零时区。</p><h2 id="func-LoadLocation"><a href="#func-LoadLocation" class="headerlink" title="func LoadLocation"></a>func <strong>LoadLocation</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">LoadLocation</span><span class="hljs-params">(name <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(*Location, error)</span></span><br></code></pre></td></tr></table></figure><p><code>LoadLocation</code> 返回使用给定的名字创建的 <code>Location</code>。</p><p>如果 <code>name</code> 是””或”UTC”，返回 <code>UTC</code>；如果 <code>name</code> 是”Local”，返回 <code>Local</code>；否则 <code>name</code> 应该是IANA时区数据库里有记录的地点名（该数据库记录了地点和对应的时区），如”America/New_York”。</p><p><code>LoadLocation</code> 函数需要的时区数据库可能不是所有系统都提供，特别是非Unix系统。此时 <code>LoadLocation</code> 会查找环境变量 <code>ZONEINFO</code> 指定目录或解压该变量指定的zip文件（如果有该环境变量）；然后查找Unix系统的惯例时区数据安装位置，最后查找<code>$GOROOT/lib/time/zoneinfo.zip</code>。</p><h2 id="func-FixedZone"><a href="#func-FixedZone" class="headerlink" title="func FixedZone"></a>func <strong>FixedZone</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">FixedZone</span><span class="hljs-params">(name <span class="hljs-keyword">string</span>, offset <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">Location</span></span><br></code></pre></td></tr></table></figure><p><code>FixedZone</code> 使用给定的地点名 <code>name</code> 和时间偏移量 <code>offset</code>（单位秒）创建并返回一个<code>Location</code></p><h2 id="func-Location-String"><a href="#func-Location-String" class="headerlink" title="func (*Location) String"></a>func <strong>(*Location) String</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *Location)</span> <span class="hljs-title">String</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span><br></code></pre></td></tr></table></figure><p><code>String</code> 返回对时区信息的描述，返回值绑定为 <code>LoadLocation</code> 或 <code>FixedZone</code> 函数创建 <code>l</code> 时的 <code>name</code> 参数。</p><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>location, err := time.LoadLocation(<span class="hljs-string">&quot;Local&quot;</span>)<br>fmt.Println(location.String(), err)<br><br>fixed := time.FixedZone(<span class="hljs-string">&quot;ZH&quot;</span>, <span class="hljs-number">3600</span> * <span class="hljs-number">8</span>)<br>fmt.Println(fixed.String())<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>Local &lt;nil&gt;ZH</code></pre><h1 id="type-Time"><a href="#type-Time" class="headerlink" title="type Time"></a>type Time</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Time <span class="hljs-keyword">struct</span> &#123;<br>    wall <span class="hljs-keyword">uint64</span><br>    ext  <span class="hljs-keyword">int64</span><br>loc *Location<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Time</code> 代表一个纳秒精度的时间点。</p><p>程序中应使用 <code>Time</code> 类型值来保存和传递时间，而不能用指针。就是说，表示时间的变量和字段，应为 <code>time.Time</code> 类型，而不是 <code>*time.Time.</code>类型。一个Time类型值可以被多个 go 程同时使用。时间点可以使用Before、After和Equal方法进行比较。<code>Sub</code> 方法让两个时间点相减，生成一个 <code>Duration</code> 类型值（代表时间段）。<code>Add</code> 方法给一个时间点加上一个时间段，生成一个新的 <code>Time</code> 类型时间点。</p><p><code>Time</code> 零值代表时间点January 1, year 1, 00:00:00.000000000 UTC。因为本时间点一般不会出现在使用中，<code>IsZero</code> 方法提供了检验时间是否显式初始化的一个简单途径。</p><p>每一个时间都具有一个地点信息（及对应地点的时区信息），当计算时间的表示格式时，如 <code>Format</code>、<code>Hour</code> 和 <code>Year</code> 等方法，都会考虑该信息。<code>Local</code>、<code>UTC</code> 和 <code>In</code> 方法返回一个指定时区（但指向同一时间点）的 <code>Time</code>。修改地点/时区信息只是会改变其表示；不会修改被表示的时间点，因此也不会影响其计算。</p><h2 id="func-Date"><a href="#func-Date" class="headerlink" title="func Date"></a>func <strong>Date</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Date</span><span class="hljs-params">(year <span class="hljs-keyword">int</span>, month Month, day, hour, min, sec, nsec <span class="hljs-keyword">int</span>, loc *Location)</span> <span class="hljs-title">Time</span></span><br></code></pre></td></tr></table></figure><p><code>Date</code> 返回一个时区为loc、当地时间为：</p><pre><code>year-month-day hour:min:sec + nsec nanoseconds</code></pre><p>的时间点。</p><p>month、day、hour、min、sec和nsec的值可能会超出它们的正常范围，在转换前函数会自动将之规范化。如October 32被修正为November 1。</p><p>夏时制的时区切换会跳过或重复时间。如，在美国，March 13, 2011 2:15am从来不会出现，而November 6, 2011 1:15am 会出现两次。此时，时区的选择和时间是没有良好定义的。Date会返回在时区切换的两个时区其中一个时区正确的时间，但本函数不会保证在哪一个时区正确。</p><p>如果loc为nil会panic。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>t := time.Date(<span class="hljs-number">2018</span>, time.November, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, time.Local)<br>fmt.Printf(<span class="hljs-string">&quot;Go launched at %s\n&quot;</span>, t.Local())<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>Go launched at 2018-11-15 15:00:00 +0800 CST</code></pre><h2 id="func-Now"><a href="#func-Now" class="headerlink" title="func Now"></a>func <strong>Now</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Now</span><span class="hljs-params">()</span> <span class="hljs-title">Time</span></span><br></code></pre></td></tr></table></figure><p><code>Now</code> 返回当前本地时间。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    fmt.Println(time.Now())<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2018-11-15 15:11:48.29489808 +0800 CST m=+0.000180466</code></pre><h2 id="func-Parse"><a href="#func-Parse" class="headerlink" title="func Parse"></a>func <strong>Parse</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Parse</span><span class="hljs-params">(layout, value <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(Time, error)</span></span><br></code></pre></td></tr></table></figure><p><code>Parse</code> 解析一个格式化的时间字符串并返回它代表的时间。layout定义了参考时间：</p><pre><code>Mon Jan 2 15:04:05 -0700 MST 2006</code></pre><p>在输入格式下的字符串表示，作为输入的格式的示例。同样的格式规则会被用于输入字符串。</p><p>预定义的ANSIC、UnixDate、RFC3339和其他版式描述了参考时间的标准或便捷表示。要获得更多参考时间的定义和格式，参见本包的ANSIC和其他版式常量。</p><p><code>value</code> 中漏掉的元素会被视为0；如果不能是0，会被视为1。因此，解析”3:04pm”会返回对应时间点：Jan 1, year 0, 15:04:00 UTC的Time（注意因为year为0，该时间在Time零值之前）。年份必须在0000..9999范围内。周几会被检查其语法，但是会被忽略。</p><p>如果缺少表示时区的信息，<code>Parse</code> 会将时区设置为 <code>UTC</code>。</p><p>当解析具有时区偏移量的时间字符串时，如果该时区偏移量和本地时区相同，<code>Parse</code>会在返回值中将 <code>Location</code> 设置为本地和本地时区。否则，它会将 <code>Location</code> 设置为一个虚构的具有该时区偏移量的值。</p><p>当解析具有时区缩写的时间字符串时，如果该时区缩写具有已定义的时间偏移量，会使用该偏移量。如果时区缩写是”UTC”，会将该时间视为 <code>UTC</code> 时间，不考虑 <code>Location</code>。如果时区缩写是未知的，<code>Parse</code> 会将 <code>Location</code> 设置为一个虚构的地点为时区缩写，时间偏移量为0的值。这种做法是为了让一个时间可以在同一版式下不丢失信息的被解析和重新格式化；但字符串表示和具体表示的时间点会因为实际时区偏移量而不同。为了避免这些问题，请使用数字表示的时区偏移量，或者使用 <code>ParseInLocation</code> 函数。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br><span class="hljs-comment">// longForm 通过示例展示了引用时间如何在期望的布局中表示。</span><br><span class="hljs-keyword">const</span> longForm = <span class="hljs-string">&quot;Jan 2, 2006 at 3:04pm (MST)&quot;</span><br>t, _ := time.Parse(longForm, <span class="hljs-string">&quot;Feb 3, 2013 at 7:54pm (PST)&quot;</span>)<br>    fmt.Println(t)<br>    <br><span class="hljs-comment">// 短格式是另一种将参考时间表示在所需布局中的方式;它没有时区。</span><br>    <span class="hljs-comment">// 注意:没有显式区域，返回UTC时间。</span><br><span class="hljs-keyword">const</span> shortForm = <span class="hljs-string">&quot;2006-Jan-02&quot;</span><br>t, _ = time.Parse(shortForm, <span class="hljs-string">&quot;2013-Feb-03&quot;</span>)<br>fmt.Println(t)<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2013-02-03 19:54:00 +0000 PST2013-02-03 00:00:00 +0000 UTC</code></pre><h2 id="func-ParseInLocation"><a href="#func-ParseInLocation" class="headerlink" title="func ParseInLocation"></a>func <strong>ParseInLocation</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ParseInLocation</span><span class="hljs-params">(layout, value <span class="hljs-keyword">string</span>, loc *Location)</span> <span class="hljs-params">(Time, error)</span></span><br></code></pre></td></tr></table></figure><p><code>ParseInLocation</code> 类似 <code>Parse</code> 但有两个重要的不同之处。第一，当缺少时区信息时，<code>Parse</code> 将时间解释为 <code>UTC</code> 时间，而 <code>ParseInLocation</code> 将返回值的 <code>Location</code> 设置为 <code>loc</code> ；第二，当时间字符串提供了时区偏移量信息时，<code>Parse</code> 会尝试去匹配本地时区，而 <code>ParseInLocation</code> 会去匹配 <code>loc</code>。<br>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>loc, _ := time.LoadLocation(<span class="hljs-string">&quot;Europe/Berlin&quot;</span>)<br><span class="hljs-keyword">const</span> longForm = <span class="hljs-string">&quot;Jan 2, 2006 at 3:04pm (MST)&quot;</span><br>t, _ := time.ParseInLocation(longForm, <span class="hljs-string">&quot;Jul 9, 2012 at 5:02am (CEST)&quot;</span>, loc)<br>fmt.Println(t)<br><span class="hljs-comment">// 注意:没有显式区域，返回给定位置的时间。</span><br><span class="hljs-keyword">const</span> shortForm = <span class="hljs-string">&quot;2006-Jan-02&quot;</span><br>t, _ = time.ParseInLocation(shortForm, <span class="hljs-string">&quot;2012-Jul-09&quot;</span>, loc)<br>fmt.Println(t)<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2012-07-09 05:02:00 +0200 CEST2012-07-09 00:00:00 +0200 CEST</code></pre><h2 id="func-Unix"><a href="#func-Unix" class="headerlink" title="func Unix"></a>func <strong>Unix</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Unix</span><span class="hljs-params">(sec <span class="hljs-keyword">int64</span>, nsec <span class="hljs-keyword">int64</span>)</span> <span class="hljs-title">Time</span></span><br></code></pre></td></tr></table></figure><p><code>Unix</code> 创建一个本地时间，对应 <code>sec</code> 和 <code>nsec</code> 表示的Unix时间（从January 1, 1970 UTC至该时间的 <em>秒数</em> 和 <em>纳秒数</em>）。</p><p>nsec的值在[0, 999999999]范围外是合法的。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    now := time.Now()<br><br>fmt.Println(now)<br>fmt.Println(now.Unix())<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2018-11-15 15:43:14.481928482 +0800 CST m=+0.0001655171542267794</code></pre><h2 id="func-Time-Zone"><a href="#func-Time-Zone" class="headerlink" title="func (Time) Zone"></a>func <strong>(Time) Zone</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">Zone</span><span class="hljs-params">()</span> <span class="hljs-params">(name <span class="hljs-keyword">string</span>, offset <span class="hljs-keyword">int</span>)</span></span><br></code></pre></td></tr></table></figure><p><code>Zone</code> 计算 <code>t</code> 所在的时区，返回该时区的规范名（如”CET”）和该时区相对于 <code>UTC</code> 的时间偏移量（单位秒）。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    now := time.Now()<br><br>    fmt.Println(now)<br>fmt.Println(now.Zone())<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2018-11-15 15:45:55.254153367 +0800 CST m=+0.000163920CST 28800</code></pre><h2 id="func-Time-IsZero"><a href="#func-Time-IsZero" class="headerlink" title="func (Time) IsZero"></a>func <strong>(Time) IsZero</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">IsZero</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span><br></code></pre></td></tr></table></figure><p><code>IsZero</code> 报告 <code>t</code> 是否代表 <code>Time</code> 零值的时间点，January 1, year 1, 00:00:00 UTC。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    now := time.Now()<br><br>    fmt.Println(now)<br>fmt.Println(now.IsZero())<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2018-11-15 15:55:24.159958577 +0800 CST m=+0.000204054false</code></pre><h2 id="func-Time-Local"><a href="#func-Time-Local" class="headerlink" title="func (Time) Local"></a>func <strong>(Time) Local</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">Local</span><span class="hljs-params">()</span> <span class="hljs-title">Time</span></span><br></code></pre></td></tr></table></figure><p><code>Local</code> 返回采用本地和本地时区，但指向同一时间点的 <code>Time</code>。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    now := time.Now()<br><br>fmt.Println(now)<br>fmt.Println(now.Local())<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2018-11-15 15:57:15.790800933 +0800 CST m=+0.0002542122018-11-15 15:57:15.790928159 +0800 CST</code></pre><h2 id="func-Location"><a href="#func-Location" class="headerlink" title="func Location"></a>func <strong>Location</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">Location</span><span class="hljs-params">()</span> *<span class="hljs-title">Location</span></span><br></code></pre></td></tr></table></figure><p><code>Location</code> 返回 <code>t</code> 的地点和时区信息。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    now := time.Now()<br><br>    fmt.Println(now)<br>fmt.Println(now.Location())<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2018-11-15 15:45:55.254153367 +0800 CST m=+0.000163920Local</code></pre><h2 id="func-Time-UTC"><a href="#func-Time-UTC" class="headerlink" title="func (Time) UTC"></a>func <strong>(Time) UTC</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">UTC</span><span class="hljs-params">()</span> <span class="hljs-title">Time</span></span><br></code></pre></td></tr></table></figure><p><code>UTC</code> 返回采用UTC和零时区，但指向同一时间点的Time。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    now := time.Now()<br><br>    fmt.Println(now)<br>fmt.Println(now.UTC())<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2018-11-15 16:08:18.626081249 +0800 CST m=+0.0002311822018-11-15 08:08:18.626081249 +0000 UTC</code></pre><h2 id="unc-Time-In"><a href="#unc-Time-In" class="headerlink" title="unc (Time) In"></a>unc <strong>(Time) In</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">In</span><span class="hljs-params">(loc *Location)</span> <span class="hljs-title">Time</span></span><br></code></pre></td></tr></table></figure><p><code>In</code> 返回采用 <code>loc</code> 指定的地点和时区，但指向同一时间点的 <code>Time</code>。如果 <code>loc</code> 为 <code>nil</code> 会 <code>panic</code>。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    now := time.Now()<br><br>    fmt.Println(now)<br>fmt.Println(now.In(now.Location()))<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2018-11-15 16:14:25.710321361 +0800 CST m=+0.0001696742018-11-15 16:14:25.710321361 +0800 CST</code></pre><h2 id="func-Time-Unix"><a href="#func-Time-Unix" class="headerlink" title="func (Time) Unix"></a>func <strong>(Time) Unix</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">Unix</span><span class="hljs-params">()</span> <span class="hljs-title">int64</span></span><br></code></pre></td></tr></table></figure><p><code>Unix</code> 将 <code>t</code> 表示为Unix时间，即从时间点January 1, 1970 UTC到时间点t所经过的时间（单位秒）。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    now := time.Now()<br><br>    fmt.Println(now)<br>fmt.Println(now.Unix())<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2018-11-15 16:28:08.284601879 +0800 CST m=+0.0001495231542270488</code></pre><h2 id="func-Time-UnixNano"><a href="#func-Time-UnixNano" class="headerlink" title="func (Time) UnixNano"></a>func <strong>(Time) UnixNano</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">UnixNano</span><span class="hljs-params">()</span> <span class="hljs-title">int64</span></span><br></code></pre></td></tr></table></figure><p><code>UnixNano</code> 将 <code>t</code> 表示为Unix时间，即从时间点January 1, 1970 UTC到时间点 <code>t</code> 所经过的时间（单位 <em>纳秒</em>）。如果纳秒为单位的 <code>unix</code> 时间超出了 <code>int64</code> 能表示的范围，结果是未定义的。注意这就意味着 <code>Time</code> 零值调用 <code>UnixNano</code> 方法的话，结果是未定义的。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    now := time.Now()<br><br>    fmt.Println(now)<br>fmt.Println(now.UnixNano())<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2018-11-15 16:47:12.069698257 +0800 CST m=+0.0001681691542271632069698257</code></pre><h2 id="func-Time-Equal"><a href="#func-Time-Equal" class="headerlink" title="func (Time) Equal"></a>func <strong>(Time) Equal</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">Equal</span><span class="hljs-params">(u Time)</span> <span class="hljs-title">bool</span></span><br></code></pre></td></tr></table></figure><p>判断两个时间是否相同，会考虑时区的影响，因此不同时区标准的时间也可以正确比较。本方法和用t==u不同，这种方法还会比较地点和时区信息。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    now := time.Now()<br><br>    fmt.Println(now)<br>fmt.Println(now.Equal(time.Now()))<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2018-11-15 16:50:00.212637423 +0800 CST m=+0.000195819false</code></pre><h2 id="func-Time-Before"><a href="#func-Time-Before" class="headerlink" title="func (Time) Before"></a>func <strong>(Time) Before</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">Before</span><span class="hljs-params">(u Time)</span> <span class="hljs-title">bool</span></span><br></code></pre></td></tr></table></figure><p>如果 <code>t</code> 代表的时间点在 <code>u</code> 之前，返回真；否则返回假。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    now := time.Now()<br><br>    fmt.Println(now)<br>fmt.Println(now.Before(time.Now()))<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2018-11-16 13:33:34.139887944 +0800 CST m=+0.000173372true</code></pre><h2 id="func-Time-After"><a href="#func-Time-After" class="headerlink" title="func (Time) After"></a>func <strong>(Time) After</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">After</span><span class="hljs-params">(u Time)</span> <span class="hljs-title">bool</span></span><br></code></pre></td></tr></table></figure><p>如果 <code>t</code> 代表的时间点在 <code>u</code> 之后，返回真；否则返回假。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    now := time.Now()<br><br>    fmt.Println(now)<br>fmt.Println(now.After(time.Now()))<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2018-11-16 13:34:33.919810923 +0800 CST m=+0.000241874false</code></pre><h2 id="func-Time-Date"><a href="#func-Time-Date" class="headerlink" title="func (Time) Date"></a>func <strong>(Time) Date</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">Date</span><span class="hljs-params">()</span> <span class="hljs-params">(year <span class="hljs-keyword">int</span>, month Month, day <span class="hljs-keyword">int</span>)</span></span><br></code></pre></td></tr></table></figure><p>返回时间点 <code>t</code> 对应的年、月、日。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    now := time.Now()<br><br>    fmt.Println(now)<br>fmt.Println(now.Date())<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2018-11-16 13:37:03.060141712 +0800 CST m=+0.0020256142018 November 16</code></pre><h2 id="func-Time-Clock"><a href="#func-Time-Clock" class="headerlink" title="func (Time) Clock"></a>func <strong>(Time) Clock</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">Clock</span><span class="hljs-params">()</span> <span class="hljs-params">(hour, min, sec <span class="hljs-keyword">int</span>)</span></span><br></code></pre></td></tr></table></figure><p>返回 <code>t</code> 对应的那一天的时、分、秒。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    now := time.Now()<br><br>    fmt.Println(now)<br>fmt.Println(now.Date())<br>fmt.Println(now.Clock())<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2018-11-16 13:39:08.904053286 +0800 CST m=+0.0001572832018 November 1613 39 8</code></pre><h2 id="func-Time-Year"><a href="#func-Time-Year" class="headerlink" title="func (Time) Year"></a>func <strong>(Time) Year</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">Year</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span><br></code></pre></td></tr></table></figure><p>返回时间点 <code>t</code> 对应的年份。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    now := time.Now()<br><br>    fmt.Println(now)<br>fmt.Println(now.Year())<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2018-11-16 13:39:08.904053286 +0800 CST m=+0.0001572832018</code></pre><h2 id="func-Time-Month"><a href="#func-Time-Month" class="headerlink" title="func (Time) Month"></a>func <strong>(Time) Month</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">Month</span><span class="hljs-params">()</span> <span class="hljs-title">Month</span></span><br></code></pre></td></tr></table></figure><p>返回时间点 <code>t</code> 对应那一年的第几月。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    now := time.Now()<br><br>    fmt.Println(now)<br>fmt.Println(now.Month())<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><p>2018-11-16 13:43:04.629329432 +0800 CST m=+0.000132658<br>November</p><h2 id="func-Time-ISOWeek"><a href="#func-Time-ISOWeek" class="headerlink" title="func (Time) ISOWeek"></a>func <strong>(Time) ISOWeek</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">ISOWeek</span><span class="hljs-params">()</span> <span class="hljs-params">(year, week <span class="hljs-keyword">int</span>)</span></span><br></code></pre></td></tr></table></figure><p>返回时间点 <code>t</code> 对应的 <code>ISO 9601</code> 标准下的年份和星期编号。星期编号范围[1,53]，1月1号到1月3号可能属于上一年的最后一周，12月29号到12月31号可能属于下一年的第一周。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    now := time.Now()<br><br>    fmt.Println(now)<br>fmt.Println(now.ISOWeek())<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2018-11-16 13:45:21.793130986 +0800 CST m=+0.0001517982018 46     // 2018年第46个星期</code></pre><h2 id="func-Time-YearDay"><a href="#func-Time-YearDay" class="headerlink" title="func (Time) YearDay"></a>func <strong>(Time) YearDay</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">YearDay</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span><br></code></pre></td></tr></table></figure><p>返回时间点 <code>t</code> 对应的那一年的<em>第几天</em>，平年的返回值范围[1,365]，闰年[1,366]。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    now := time.Now()<br><br>    fmt.Println(now)<br>fmt.Println(now.YearDay())<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2018-11-16 13:49:50.793130986 +0800 CST m=+0.000151798320</code></pre><h2 id="func-Time-Day"><a href="#func-Time-Day" class="headerlink" title="func (Time) Day"></a>func <strong>(Time) Day</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">Day</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span><br></code></pre></td></tr></table></figure><p>返回时间点 <code>t</code> 对应那一月的第几日。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    now := time.Now()<br><br>    fmt.Println(now)<br>fmt.Println(now.Day())<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2018-11-16 13:50:11.793130986 +0800 CST m=+0.00015179816</code></pre><h2 id="func-Time-Weekday"><a href="#func-Time-Weekday" class="headerlink" title="func (Time) Weekday"></a>func <strong>(Time) Weekday</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">Weekday</span><span class="hljs-params">()</span> <span class="hljs-title">Weekday</span></span><br></code></pre></td></tr></table></figure><p>返回时间点 <code>t</code> 对应的那一周的周几。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    now := time.Now()<br><br>    fmt.Println(now)<br>fmt.Println(now.Weekday())<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2018-11-16 13:51:23.793130986 +0800 CST m=+0.000151798Friday</code></pre><h2 id="func-Time-Hour"><a href="#func-Time-Hour" class="headerlink" title="func (Time) Hour"></a>func <strong>(Time) Hour</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">Hour</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span><br></code></pre></td></tr></table></figure><p>返回 <code>t</code> 对应的那一天的第几小时，范围[0, 23]。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    now := time.Now()<br><br>    fmt.Println(now)<br>fmt.Println(now.Hour())<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2018-11-16 13:52:00.793130986 +0800 CST m=+0.00015179813</code></pre><h2 id="func-Time-Minute"><a href="#func-Time-Minute" class="headerlink" title="func (Time) Minute"></a>func <strong>(Time) Minute</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">Minute</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span><br></code></pre></td></tr></table></figure><p>返回 <code>t</code> 对应的那一小时的第几分种，范围[0, 59]。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    now := time.Now()<br><br>    fmt.Println(now)<br>fmt.Println(now.Minute())<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2018-11-16 13:53:25.793130986 +0800 CST m=+0.00015179853</code></pre><h2 id="func-Time-Second"><a href="#func-Time-Second" class="headerlink" title="func (Time) Second"></a>func <strong>(Time) Second</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">Second</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span><br></code></pre></td></tr></table></figure><p>返回 <code>t</code> 对应的那一分钟的第几秒，范围[0, 59]。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    now := time.Now()<br><br>    fmt.Println(now)<br>fmt.Println(now.Second())<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2018-11-16 13:54:50.793130986 +0800 CST m=+0.00015179850</code></pre><h2 id="func-Time-Nanosecond"><a href="#func-Time-Nanosecond" class="headerlink" title="func (Time) Nanosecond"></a>func <strong>(Time) Nanosecond</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">Nanosecond</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span><br></code></pre></td></tr></table></figure><p>返回 <code>t</code> 对应的那一秒内的<em>纳秒偏移量</em>，范围[0, 999999999]。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    now := time.Now()<br><br>    fmt.Println(now)<br>fmt.Println(now.Nanosecond())<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2018-11-16 13:57:35.502361392 +0800 CST m=+0.001316926502361392</code></pre><h2 id="func-Time-Add"><a href="#func-Time-Add" class="headerlink" title="func (Time) Add"></a>func <strong>(Time) Add</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">Add</span><span class="hljs-params">(d Duration)</span> <span class="hljs-title">Time</span></span><br></code></pre></td></tr></table></figure><p><code>Add</code> 返回时间点 <code>t+d</code>。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    now := time.Now()<br><br>    fmt.Println(now)<br>fmt.Println(now.Add(<span class="hljs-number">1e9</span>))   <span class="hljs-comment">// 纳秒</span><br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2018-11-16 14:03:22.029219211 +0800 CST m=+0.0001578502018-11-16 14:03:23.029219211 +0800 CST m=+1.000157850</code></pre><h2 id="func-Time-AddDate"><a href="#func-Time-AddDate" class="headerlink" title="func (Time) AddDate"></a>func <strong>(Time) AddDate</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">AddDate</span><span class="hljs-params">(years <span class="hljs-keyword">int</span>, months <span class="hljs-keyword">int</span>, days <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">Time</span></span><br></code></pre></td></tr></table></figure><p><code>AddDate</code> 返回增加了给出的年份、月份和天数的时间点 <code>Time</code>。例如，时间点January 1, 2011调用 <code>AddDate(-1, 2, 3)</code> 会返回March 4, 2010。</p><p><code>AddDate</code> 会将结果规范化，类似 <code>Date</code> 函数的做法。因此，举个例子，给时间点October 31添加一个月，会生成时间点December 1。（从时间点November 31规范化而来）</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    now := time.Now()<br><br>    fmt.Println(now)<br>fmt.Println(now.AddDate(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2018-11-16 14:07:25.009463355 +0800 CST m=+0.0001652322019-12-17 14:07:25.009463355 +0800 CST</code></pre><h2 id="func-Time-Sub"><a href="#func-Time-Sub" class="headerlink" title="func (Time) Sub"></a>func <strong>(Time) Sub</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">Sub</span><span class="hljs-params">(u Time)</span> <span class="hljs-title">Duration</span></span><br></code></pre></td></tr></table></figure><p>返回一个时间段 <code>t-u</code>。如果结果超出了 <code>Duration</code> 可以表示的最大值/最小值，将返回最大值/最小值。要获取时间点 <code>t-d</code>（d为Duration），可以使用t.Add(-d)。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    now := time.Now()<br><br>fmt.Println(now)<br>fmt.Println(time.Now().Sub(now))<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2018-11-16 14:22:55.865289 +0800 CST m=+0.00017121165.876µs    // 微秒</code></pre><h2 id="func-Time-Round"><a href="#func-Time-Round" class="headerlink" title="func (Time) Round"></a>func <strong>(Time) Round</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">Round</span><span class="hljs-params">(d Duration)</span> <span class="hljs-title">Time</span></span><br></code></pre></td></tr></table></figure><p>返回距离 <code>t</code> 最近的时间点，该时间点应该满足从 <code>Time</code> 零值到该时间点的时间段能整除 <code>d</code>；如果有两个满足要求的时间点，距离 <code>t</code> 相同，会向上舍入；如果 <code>d &lt;= 0</code>，会返回 <code>t</code> 的拷贝。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>t := time.Date(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>, <span class="hljs-number">30</span>, <span class="hljs-number">918273645</span>, time.UTC)<br>round := []time.Duration&#123;<br>time.Nanosecond,<br>time.Microsecond,<br>time.Millisecond,<br>time.Second,<br><span class="hljs-number">2</span> * time.Second,<br>time.Minute,<br><span class="hljs-number">10</span> * time.Minute,<br>time.Hour,<br>&#125;<br><span class="hljs-keyword">for</span> _, d := <span class="hljs-keyword">range</span> round &#123;<br>fmt.Printf(<span class="hljs-string">&quot;t.Round(%6s) = %s\n&quot;</span>, d, t.Round(d).Format(<span class="hljs-string">&quot;15:04:05.999999999&quot;</span>))<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>t.Round(   1ns) = 12:15:30.918273645t.Round(   1µs) = 12:15:30.918274t.Round(   1ms) = 12:15:30.918t.Round(    1s) = 12:15:31t.Round(    2s) = 12:15:30t.Round(  1m0s) = 12:16:00t.Round( 10m0s) = 12:20:00t.Round(1h0m0s) = 12:00:00</code></pre><h2 id="func-Time-Truncate"><a href="#func-Time-Truncate" class="headerlink" title="func (Time) Truncate"></a>func <strong>(Time) Truncate</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">Truncate</span><span class="hljs-params">(d Duration)</span> <span class="hljs-title">Time</span></span><br></code></pre></td></tr></table></figure><p>类似 <code>Round</code>，但是返回的是最接近但早于 <code>t</code> 的时间点；如果 <code>d &lt;= 0</code>，会返回t的拷贝。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>   t, _ := time.Parse(<span class="hljs-string">&quot;2006 Jan 02 15:04:05&quot;</span>, <span class="hljs-string">&quot;2012 Dec 07 12:15:30.918273645&quot;</span>)<br>    trunc := []time.Duration&#123;<br>        time.Nanosecond,<br>        time.Microsecond,<br>        time.Millisecond,<br>        time.Second,<br>        <span class="hljs-number">2</span> * time.Second,<br>        time.Minute,<br>        <span class="hljs-number">10</span> * time.Minute,<br>        time.Hour,<br>    &#125;<br>    <span class="hljs-keyword">for</span> _, d := <span class="hljs-keyword">range</span> trunc &#123;<br>        fmt.Printf(<span class="hljs-string">&quot;t.Truncate(%6s) = %s\n&quot;</span>, d, t.Truncate(d).Format(<span class="hljs-string">&quot;15:04:05.999999999&quot;</span>))<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>t.Truncate(   1ns) = 12:15:30.918273645t.Truncate(   1us) = 12:15:30.918273t.Truncate(   1ms) = 12:15:30.918t.Truncate(    1s) = 12:15:30t.Truncate(    2s) = 12:15:30t.Truncate(  1m0s) = 12:15:00t.Truncate( 10m0s) = 12:10:00t.Truncate(1h0m0s) = 12:00:00</code></pre><h2 id="func-Time-Format"><a href="#func-Time-Format" class="headerlink" title="func (Time) Format"></a>func <strong>(Time) Format</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">Format</span><span class="hljs-params">(layout <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">string</span></span><br></code></pre></td></tr></table></figure><p><code>Format</code> 根据 <code>layout</code> 指定的格式返回 <code>t</code> 代表的时间点的格式化文本表示。<code>layout</code> 定义了参考时间：</p><pre><code>Mon Jan 2 15:04:05 -0700 MST 2006</code></pre><p>格式化后的字符串表示，它作为期望输出的例子。同样的格式规则会被用于格式化时间。</p><p>预定义的ANSIC、UnixDate、RFC3339和其他版式描述了参考时间的标准或便捷表示。要获得更多参考时间的定义和格式，参见本包的ANSIC和其他版式常量。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    <span class="hljs-comment">// layout shows by example how the reference time should be represented.</span><br><span class="hljs-keyword">const</span> layout = <span class="hljs-string">&quot;Jan 2, 2006 at 3:04pm (MST)&quot;</span><br>t := time.Date(<span class="hljs-number">2009</span>, time.November, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, time.Local)<br>fmt.Println(t.Format(layout))<br>    fmt.Println(t.UTC().Format(layout))<br>    <br>    fmt.Println(time.Now().Format(<span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>)) <span class="hljs-comment">// 2006-01-02 15:04:05</span><br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>Nov 10, 2009 at 3:00pm (CST)Nov 10, 2009 at 7:00am (UTC)2018-11-16 14:40:17</code></pre><h2 id="func-Time-String"><a href="#func-Time-String" class="headerlink" title="func (Time) String"></a>func <strong>(Time) String</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">String</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span><br></code></pre></td></tr></table></figure><p><code>String</code> 返回采用如下格式字符串的格式化时间。</p><pre><code>&quot;2006-01-02 15:04:05.999999999 -0700 MST&quot;</code></pre><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    now := time.Now()<br><br>    fmt.Println(now)<br>fmt.Println(now.String())<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2018-11-16 14:50:11.257346871 +0800 CST m=+0.0001771862018-11-16 14:50:11.257346871 +0800 CST m=+0.000247204</code></pre><h2 id="func-Time-GobEncode"><a href="#func-Time-GobEncode" class="headerlink" title="func (Time) GobEncode"></a>func <strong>(Time) GobEncode</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">GobEncode</span><span class="hljs-params">()</span> <span class="hljs-params">([]<span class="hljs-keyword">byte</span>, error)</span></span><br></code></pre></td></tr></table></figure><p><code>GobEncode</code> 实现了 <code>gob.GobEncoder</code> 接口。</p><h2 id="func-Time-GobDecode"><a href="#func-Time-GobDecode" class="headerlink" title="func (Time) GobDecode"></a>func <strong>(Time) GobDecode</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *Time)</span> <span class="hljs-title">GobDecode</span><span class="hljs-params">(data []<span class="hljs-keyword">byte</span>)</span> <span class="hljs-title">error</span></span><br></code></pre></td></tr></table></figure><p><code>GobDecode</code> 实现了 <code>gob.GobDecoder</code> 接口。</p><h2 id="func-Time-MarshalBinary"><a href="#func-Time-MarshalBinary" class="headerlink" title="func (Time) MarshalBinary"></a>func <strong>(Time) MarshalBinary</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">MarshalBinary</span><span class="hljs-params">()</span> <span class="hljs-params">([]<span class="hljs-keyword">byte</span>, error)</span></span><br></code></pre></td></tr></table></figure><p><code>MarshalBinary</code> 实现了 <code>encoding.BinaryMarshaler</code> 接口。</p><h2 id="func-Time-UnmarshalBinary"><a href="#func-Time-UnmarshalBinary" class="headerlink" title="func (Time) UnmarshalBinary"></a>func <strong>(Time) UnmarshalBinary</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *Time)</span> <span class="hljs-title">UnmarshalBinary</span><span class="hljs-params">(data []<span class="hljs-keyword">byte</span>)</span> <span class="hljs-title">error</span></span><br></code></pre></td></tr></table></figure><p><code>UnmarshalBinary</code> 实现了 <code>encoding.BinaryUnmarshaler</code> 接口。</p><h2 id="func-Time-MarshalJSON"><a href="#func-Time-MarshalJSON" class="headerlink" title="func (Time) MarshalJSON"></a>func <strong>(Time) MarshalJSON</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">MarshalJSON</span><span class="hljs-params">()</span> <span class="hljs-params">([]<span class="hljs-keyword">byte</span>, error)</span></span><br></code></pre></td></tr></table></figure><p><code>MarshalJSON</code> 实现了 <code>json.Marshaler</code> 接口。返回值是用双引号括起来的采用RFC 3339格式进行格式化的时间表示，如果需要会提供小于秒的精度。</p><h2 id="func-Time-UnmarshalJSON"><a href="#func-Time-UnmarshalJSON" class="headerlink" title="func (Time) UnmarshalJSON"></a>func <strong>(Time) UnmarshalJSON</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *Time)</span> <span class="hljs-title">UnmarshalJSON</span><span class="hljs-params">(data []<span class="hljs-keyword">byte</span>)</span> <span class="hljs-params">(err error)</span></span><br></code></pre></td></tr></table></figure><p><code>UnmarshalJSON</code> 实现了 <code>json.Unmarshaler</code> 接口。时间被期望是双引号括起来的RFC 3339格式。</p><h2 id="func-Time-MarshalText"><a href="#func-Time-MarshalText" class="headerlink" title="func (Time) MarshalText"></a>func <strong>(Time) MarshalText</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span> <span class="hljs-title">MarshalText</span><span class="hljs-params">()</span> <span class="hljs-params">([]<span class="hljs-keyword">byte</span>, error)</span></span><br></code></pre></td></tr></table></figure><p><code>MarshalText</code> 实现了 <code>encoding.TextMarshaler</code> 接口。返回值是采用RFC 3339格式进行格式化的时间表示，如果需要会提供小于秒的精度。</p><h2 id="func-Time-UnmarshalText"><a href="#func-Time-UnmarshalText" class="headerlink" title="func (Time) UnmarshalText"></a>func <strong>(Time) UnmarshalText</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *Time)</span> <span class="hljs-title">UnmarshalText</span><span class="hljs-params">(data []<span class="hljs-keyword">byte</span>)</span> <span class="hljs-params">(err error)</span></span><br></code></pre></td></tr></table></figure><p><code>UnmarshalText</code> 实现了 <code>encoding.TextUnmarshaler</code> 接口。时间被期望采用RFC 3339格式。</p><h1 id="type-Duration"><a href="#type-Duration" class="headerlink" title="type Duration"></a>type <strong>Duration</strong></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Duration <span class="hljs-keyword">int64</span><br></code></pre></td></tr></table></figure><p><code>Duration</code> 类型代表两个时间点之间经过的时间，以纳秒为单位。可表示的最长时间段大约290年。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>    Nanosecond  Duration = <span class="hljs-number">1</span><br>    Microsecond          = <span class="hljs-number">1000</span> * Nanosecond<br>    Millisecond          = <span class="hljs-number">1000</span> * Microsecond<br>    Second               = <span class="hljs-number">1000</span> * Millisecond<br>    Minute               = <span class="hljs-number">60</span> * Second<br>    Hour                 = <span class="hljs-number">60</span> * Minute<br>)<br></code></pre></td></tr></table></figure><p>常用的时间段。没有定义一天或超过一天的单元，以避免夏时制的时区切换的混乱。</p><p>要将 <code>Duration</code> 类型值表示为某时间单元的个数，用除法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">second := time.Second<br>fmt.Print(<span class="hljs-keyword">int64</span>(second/time.Millisecond)) <span class="hljs-comment">// prints 1000</span><br></code></pre></td></tr></table></figure><p>要将整数个某时间单元表示为 <code>Duration</code> 类型值，用乘法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">seconds := <span class="hljs-number">10</span><br>fmt.Print(time.Duration(seconds)*time.Second) <span class="hljs-comment">// prints 10s</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">t0 := time.Now()<br>expensiveCall()<br>t1 := time.Now()<br>fmt.Printf(<span class="hljs-string">&quot;The call took %v to run.\n&quot;</span>, t1.Sub(t0))<br></code></pre></td></tr></table></figure><h2 id="func-ParseDuration"><a href="#func-ParseDuration" class="headerlink" title="func ParseDuration"></a>func <strong>ParseDuration</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ParseDuration</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(Duration, error)</span></span><br></code></pre></td></tr></table></figure><p><code>ParseDuration</code> 解析一个时间段字符串。一个时间段字符串是一个序列，每个片段包含可选的正负号、十进制数、可选的小数部分和单位后缀，如”300ms”、”-1.5h”、”2h45m”。合法的单位有”ns”、”us” /“µs”、”ms”、”s”、”m”、”h”。</p><h2 id="func-Since"><a href="#func-Since" class="headerlink" title="func Since"></a>func <strong>Since</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Since</span><span class="hljs-params">(t Time)</span> <span class="hljs-title">Duration</span></span><br></code></pre></td></tr></table></figure><p><code>Since</code> 返回从 <code>t</code> 到现在经过的时间，等价于time.Now().Sub(t)。</p><h2 id="func-Duration-Hours"><a href="#func-Duration-Hours" class="headerlink" title="func (Duration) Hours"></a>func <strong>(Duration) Hours</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d Duration)</span> <span class="hljs-title">Hours</span><span class="hljs-params">()</span> <span class="hljs-title">float64</span></span><br></code></pre></td></tr></table></figure><p><code>Hours</code> 将时间段表示为 <code>float64</code> 类型的小时数。</p><h2 id="func-Duration-Minutes"><a href="#func-Duration-Minutes" class="headerlink" title="func (Duration) Minutes"></a>func <strong>(Duration) Minutes</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d Duration)</span> <span class="hljs-title">Minutes</span><span class="hljs-params">()</span> <span class="hljs-title">float64</span></span><br></code></pre></td></tr></table></figure><p><code>Minutes</code> 将时间段表示为 <code>float64</code> 类型的分钟数。</p><h2 id="func-Duration-Seconds"><a href="#func-Duration-Seconds" class="headerlink" title="func (Duration) Seconds"></a>func <strong>(Duration) Seconds</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d Duration)</span> <span class="hljs-title">Seconds</span><span class="hljs-params">()</span> <span class="hljs-title">float64</span></span><br></code></pre></td></tr></table></figure><p><code>Seconds</code> 将时间段表示为 <code>float64</code> 类型的秒数。</p><h2 id="func-Duration-Nanoseconds"><a href="#func-Duration-Nanoseconds" class="headerlink" title="func (Duration) Nanoseconds"></a>func <strong>(Duration) Nanoseconds</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d Duration)</span> <span class="hljs-title">Nanoseconds</span><span class="hljs-params">()</span> <span class="hljs-title">int64</span></span><br></code></pre></td></tr></table></figure><p><code>Nanoseconds</code> 将时间段表示为 <code>int64</code> 类型的纳秒数，等价于int64(d)。</p><h2 id="func-Duration-String"><a href="#func-Duration-String" class="headerlink" title="func (Duration) String"></a>func <strong>(Duration) String</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d Duration)</span> <span class="hljs-title">String</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span><br></code></pre></td></tr></table></figure><p>返回时间段采用”72h3m0.5s”格式的字符串表示。最前面可以有符号，数字+单位为一个单元，开始部分的0值单元会被省略；如果时间段&lt;1s，会使用”ms”、”us”、”ns”来保证第一个单元的数字不是0；如果时间段为0，会返回”0”。</p><h1 id="type-Timer"><a href="#type-Timer" class="headerlink" title="type Timer"></a>type <strong>Timer</strong></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Timer <span class="hljs-keyword">struct</span> &#123;<br>    C &lt;-<span class="hljs-keyword">chan</span> Time<br>    <span class="hljs-comment">// 内含隐藏或非导出字段</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Timer</code> 类型代表单次时间事件。当 <code>Timer</code> 到期时，当时的时间会被发送给 <code>C</code>，除非 <code>Timer</code> 是被 <code>AfterFunc</code> 函数创建的。</p><h2 id="func-NewTimer"><a href="#func-NewTimer" class="headerlink" title="func NewTimer"></a>func <strong>NewTimer</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewTimer</span><span class="hljs-params">(d Duration)</span> *<span class="hljs-title">Timer</span></span><br></code></pre></td></tr></table></figure><p><code>NewTimer</code> 创建一个 <code>Timer</code>，它会在最少过去时间段 <code>d</code> 后到期，向其自身的 <code>C</code>字段发送当时的时间。</p><h2 id="func-AfterFunc"><a href="#func-AfterFunc" class="headerlink" title="func AfterFunc"></a>func <strong>AfterFunc</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AfterFunc</span><span class="hljs-params">(d Duration, f <span class="hljs-keyword">func</span>()</span>) *<span class="hljs-title">Timer</span></span><br></code></pre></td></tr></table></figure><p><code>AfterFunc</code> 另起一个 <code>go</code> 进程等待时间段 <code>d</code> 过去，然后调用 <code>f</code>。它返回一个 <code>Timer</code>，可以通过调用其 <code>Stop</code> 方法来取消等待和对f的调用。</p><h2 id="func-Timer-Reset"><a href="#func-Timer-Reset" class="headerlink" title="func (*Timer) Reset"></a>func <strong>(*Timer) Reset</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *Timer)</span> <span class="hljs-title">Reset</span><span class="hljs-params">(d Duration)</span> <span class="hljs-title">bool</span></span><br></code></pre></td></tr></table></figure><p><code>Reset</code> 使 <code>t</code> 重新开始计时，（本方法返回后再）等待时间段d过去后到期。如果调用时 <code>t</code> 还在等待中会返回真；如果 <code>t</code> 已经到期或者被停止了会返回假。</p><h2 id="func-Timer-Stop"><a href="#func-Timer-Stop" class="headerlink" title="func (*Timer) Stop"></a>func <strong>(*Timer) Stop</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *Timer)</span> <span class="hljs-title">Stop</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span><br></code></pre></td></tr></table></figure><p><code>Stop</code> 停止 <code>Timer</code> 的执行。如果停止了 <code>t</code> 会返回真；如果 <code>t</code> 已经被停止或者过期了会返回假。<code>Stop</code> 不会关闭通道 <code>t.C</code>，以避免从该通道的读取不正确的成功。</p><h1 id="type-Ticker"><a href="#type-Ticker" class="headerlink" title="type Ticker"></a>type <strong>Ticker</strong></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Ticker <span class="hljs-keyword">struct</span> &#123;<br>    C &lt;-<span class="hljs-keyword">chan</span> Time <span class="hljs-comment">// 周期性传递时间信息的通道</span><br>    <span class="hljs-comment">// 内含隐藏或非导出字段</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Ticker</code> 保管一个通道，并每隔一段时间向其传递”tick”。</p><h2 id="func-NewTicker"><a href="#func-NewTicker" class="headerlink" title="func NewTicker"></a>func <strong>NewTicker</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewTicker</span><span class="hljs-params">(d Duration)</span> *<span class="hljs-title">Ticker</span></span><br></code></pre></td></tr></table></figure><p><code>NewTicker</code> 返回一个新的 <code>Ticker</code>，该 <code>Ticker</code> 包含一个通道字段，并会每隔时间段 <code>d</code> 就向该通道发送当时的时间。它会调整时间间隔或者丢弃 <code>tick</code> 信息以适应反应慢的接收者。如果d&lt;=0会panic。关闭该 <code>Ticker</code> 可以释放相关资源。</p><h2 id="func-Ticker-Stop"><a href="#func-Ticker-Stop" class="headerlink" title="func (*Ticker) Stop"></a>func <strong>(*Ticker) Stop</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *Ticker)</span> <span class="hljs-title">Stop</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p><code>Stop</code> 关闭一个 <code>Ticker</code>。在关闭后，将不会发送更多的tick信息。<code>Stop</code> 不会关闭通道 <code>t.C</code>，以避免从该通道的读取不正确的成功。</p><h2 id="func-Sleep"><a href="#func-Sleep" class="headerlink" title="func Sleep"></a>func <strong>Sleep</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sleep</span><span class="hljs-params">(d Duration)</span></span><br></code></pre></td></tr></table></figure><p><code>Sleep</code> 阻塞当前 <code>go</code> 进程至少 <code>d</code> 代表的时间段。d&lt;=0时，<code>Sleep</code> 会立刻返回。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br><span class="hljs-comment">//t0 := time.Now()</span><br><br>t1 := time.Now()<br>fmt.Println(t1)<br><br>time.Sleep(<span class="hljs-number">5</span> * <span class="hljs-number">1000</span> * time.Millisecond)<br><br>fmt.Println(time.Now())<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><pre><code>2018-11-16 15:48:29.089446905 +0800 CST m=+0.0001547082018-11-16 15:48:34.089593643 +0800 CST m=+5.000301421  // 两次输出间隔 5 秒</code></pre><h2 id="func-After"><a href="#func-After" class="headerlink" title="func After"></a>func <strong>After</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">After</span><span class="hljs-params">(d Duration)</span> &lt;-<span class="hljs-title">chan</span> <span class="hljs-title">Time</span></span><br></code></pre></td></tr></table></figure><p><code>After</code> 会在另一线程经过时间段 <code>d</code> 后向返回值发送当时的时间。等价于NewTimer(d).C。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> m := &lt;-c:<br>    handle(m)<br><span class="hljs-keyword">case</span> &lt;-time.After(<span class="hljs-number">5</span> * time.Minute):<br>    fmt.Println(<span class="hljs-string">&quot;timed out&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="func-Tick"><a href="#func-Tick" class="headerlink" title="func Tick"></a>func <strong>Tick</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Tick</span><span class="hljs-params">(d Duration)</span> &lt;-<span class="hljs-title">chan</span> <span class="hljs-title">Time</span></span><br></code></pre></td></tr></table></figure><p><code>Tick</code> 是 <code>NewTicker</code> 的封装，只提供对 <code>Ticker</code> 的通道的访问。如果不需要关闭 <code>Ticker</code>，本函数就很方便。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">c := time.Tick(<span class="hljs-number">1</span> * time.Minute)<br><span class="hljs-keyword">for</span> now := <span class="hljs-keyword">range</span> c &#123;<br>    fmt.Printf(<span class="hljs-string">&quot;%v %s\n&quot;</span>, now, statusUpdate())<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【转】Golang的单引号、双引号与反引号</title>
    <link href="/2018/11/12/golang/Golang%E7%9A%84%E5%8D%95%E5%BC%95%E5%8F%B7%E3%80%81%E5%8F%8C%E5%BC%95%E5%8F%B7%E4%B8%8E%E5%8F%8D%E5%BC%95%E5%8F%B7/"/>
    <url>/2018/11/12/golang/Golang%E7%9A%84%E5%8D%95%E5%BC%95%E5%8F%B7%E3%80%81%E5%8F%8C%E5%BC%95%E5%8F%B7%E4%B8%8E%E5%8F%8D%E5%BC%95%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<p>Go语言的字符串类型 <code>string</code> 在本质上就与其他语言的字符串类型不同：</p><ul><li><p>Java的String、C++的std::string以及Python3的str类型都只是 <code>定宽字符序列</code></p></li><li><p>Go语言的字符串是一个用 <code>UTF-8编码的变宽字符序列</code>，<em>它的每一个字符都用一个或多个字节表示</em></p></li></ul><p>即：<strong>一个Go语言字符串是一个<code>任意字节</code>的常量序列</strong>。</p><p>Golang的双引号和反引号都可用于表示一个常量字符串，不同在于：</p><ul><li><p>双引号用来创建<strong>可解析的字符串字面量</strong>(支持转义，但不能用来引用多行)</p></li><li><p>反引号用来创建<strong>原生的字符串字面量</strong>，这些字符串可能由多行组成(不支持任何转义序列)，原生的字符串字面量多用于书写多行消息、HTML以及正则表达式。</p></li></ul><p>而单引号则用于表示Golang的一个特殊类型：<code>rune</code>，类似其他语言的 <code>byte</code> 但又不完全一样，是指：<strong>码点字面量（Unicode code point）</strong>，不做任何转义的原始内容。</p><p>注：<br>本文转载自 — <a href="https://studygolang.com/articles/8431">Golang的单引号、双引号与反引号</a></p>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>『记』Golang-位左移的应用</title>
    <link href="/2018/11/09/golang/Golang-%E4%BD%8D%E5%B7%A6%E7%A7%BB%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <url>/2018/11/09/golang/Golang-%E4%BD%8D%E5%B7%A6%E7%A7%BB%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="位左移-lt-lt-："><a href="#位左移-lt-lt-：" class="headerlink" title="位左移 &lt;&lt;："></a>位左移 &lt;&lt;：</h2><ul><li>用法：<code>bitP &lt;&lt; n</code>。</li><li>bitP 的位向左移动 <code>n</code> 位，右侧空白部分使用 0 填充；如果 n 等于 2，则结果是 2 的相应倍数，即 2 的 n 次方。例如：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">10</span> <span class="hljs-comment">// 等于 1 KB</span><br><span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">20</span> <span class="hljs-comment">// 等于 1 MB</span><br><span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span> <span class="hljs-comment">// 等于 1 GB</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="位左移常见实现存储单位的用例"><a href="#位左移常见实现存储单位的用例" class="headerlink" title="位左移常见实现存储单位的用例"></a>位左移常见实现存储单位的用例</h3><p>使用位左移与 iota 计数配合可优雅地实现存储单位的常量枚举：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> ByteSize <span class="hljs-keyword">float64</span><br><span class="hljs-keyword">const</span> (<br>    _ = <span class="hljs-literal">iota</span> <span class="hljs-comment">// 通过赋值给空白标识符来忽略值</span><br>    KB ByteSize = <span class="hljs-number">1</span>&lt;&lt;(<span class="hljs-number">10</span>*<span class="hljs-literal">iota</span>)<br>    MB<br>    GB<br>    TB<br>    PB<br>    EB<br>    ZB<br>    YB<br>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP手册-预定义接口</title>
    <link href="/2018/10/31/php/PHP%E6%89%8B%E5%86%8C-%E9%A2%84%E5%AE%9A%E4%B9%89%E6%8E%A5%E5%8F%A3/"/>
    <url>/2018/10/31/php/PHP%E6%89%8B%E5%86%8C-%E9%A2%84%E5%AE%9A%E4%B9%89%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Traversable（遍历）接口"><a href="#Traversable（遍历）接口" class="headerlink" title="Traversable（遍历）接口"></a>Traversable（遍历）接口</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>检测一个类是否可以使用 foreach 进行遍历的接口。</p><p>无法被单独实现的基本抽象接口。相反它必须由 <code>IteratorAggregate</code> 或 <code>Iterator</code> 接口实现。</p><pre><code>Note:实现此接口的内建类可以使用 foreach 进行遍历而无需实现 IteratorAggregate 或 Iterator 接口。</code></pre><hr><pre><code>Note:这是一个无法在 PHP 脚本中实现的内部引擎接口。IteratorAggregate 或 Iterator 接口可以用来代替它。</code></pre><h2 id="接口摘要"><a href="#接口摘要" class="headerlink" title="接口摘要"></a>接口摘要</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-built_in">Traversable</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个接口没有任何方法，它的作用仅仅是作为所有可遍历类的基本接口。</p><h2 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$myarray</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>);<br><span class="hljs-variable">$myobj</span> = (<span class="hljs-keyword">object</span>)<span class="hljs-variable">$myarray</span>;<br><br><span class="hljs-keyword">if</span> ( !(<span class="hljs-variable">$myarray</span> <span class="hljs-keyword">instanceof</span> \<span class="hljs-built_in">Traversable</span>) ) &#123;<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;myarray is NOT Traversable&quot;</span>;<br>&#125;<br><span class="hljs-keyword">if</span> ( !(<span class="hljs-variable">$myobj</span> <span class="hljs-keyword">instanceof</span> \<span class="hljs-built_in">Traversable</span>) ) &#123;<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;myobj is NOT Traversable&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$myarray</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>) &#123;<br>    <span class="hljs-keyword">print</span> <span class="hljs-variable">$value</span>;<br>&#125;<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$myobj</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>) &#123;<br>    <span class="hljs-keyword">print</span> <span class="hljs-variable">$value</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的例子大概会输出：</p><pre><code>myarray is NOT Traversablemyobj is NOT Traversableonetwothreeonetwothree</code></pre><h1 id="Iterator（迭代器）接口"><a href="#Iterator（迭代器）接口" class="headerlink" title="Iterator（迭代器）接口"></a>Iterator（迭代器）接口</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>可在内部迭代自己的外部迭代器或类的接口。</p><h2 id="接口摘要-1"><a href="#接口摘要-1" class="headerlink" title="接口摘要"></a>接口摘要</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-built_in">Iterator</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">Traversable</span> &#123;<br><span class="hljs-comment">/* 方法 */</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">mixed</span> current ( <span class="hljs-keyword">void</span> )<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> scalar key ( <span class="hljs-keyword">void</span> )<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> next ( <span class="hljs-keyword">void</span> )<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> rewind ( <span class="hljs-keyword">void</span> )<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">bool</span> valid ( <span class="hljs-keyword">void</span> )<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="预定义迭代器"><a href="#预定义迭代器" class="headerlink" title="预定义迭代器"></a>预定义迭代器</h2><p>PHP 已经提供了一些用于日常任务的迭代器。 详细列表参见 <a href="http://php.net/manual/zh/spl.iterators.php">SPL 迭代器</a>。</p><h2 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h2><p>这个例子展示了使用 foreach 时，迭代器方法的调用顺序。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$position</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$array</span> = <span class="hljs-keyword">array</span>(<br>        <span class="hljs-string">&quot;firstelement&quot;</span>,<br>        <span class="hljs-string">&quot;secondelement&quot;</span>,<br>        <span class="hljs-string">&quot;lastelement&quot;</span>,<br>    );  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;position = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rewind</span>(<span class="hljs-params"></span>) </span>&#123;<br>        var_dump(<span class="hljs-keyword">__METHOD__</span>);<br>        <span class="hljs-keyword">$this</span>-&gt;position = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">current</span>(<span class="hljs-params"></span>) </span>&#123;<br>        var_dump(<span class="hljs-keyword">__METHOD__</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;array[<span class="hljs-keyword">$this</span>-&gt;position];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">key</span>(<span class="hljs-params"></span>) </span>&#123;<br>        var_dump(<span class="hljs-keyword">__METHOD__</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;position;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">next</span>(<span class="hljs-params"></span>) </span>&#123;<br>        var_dump(<span class="hljs-keyword">__METHOD__</span>);<br>        ++<span class="hljs-keyword">$this</span>-&gt;position;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">valid</span>(<span class="hljs-params"></span>) </span>&#123;<br>        var_dump(<span class="hljs-keyword">__METHOD__</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;array[<span class="hljs-keyword">$this</span>-&gt;position]);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$it</span> = <span class="hljs-keyword">new</span> myIterator;<br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$it</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>    var_dump(<span class="hljs-variable">$key</span>, <span class="hljs-variable">$value</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上例程的输出类似于：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">string(18) <span class="hljs-string">&quot;myIterator::rewind&quot;</span><br>string(17) <span class="hljs-string">&quot;myIterator::valid&quot;</span><br>string(19) <span class="hljs-string">&quot;myIterator::current&quot;</span><br>string(15) <span class="hljs-string">&quot;myIterator::key&quot;</span><br>int(0)<br>string(12) <span class="hljs-string">&quot;firstelement&quot;</span><br><br>string(16) <span class="hljs-string">&quot;myIterator::next&quot;</span><br>string(17) <span class="hljs-string">&quot;myIterator::valid&quot;</span><br>string(19) <span class="hljs-string">&quot;myIterator::current&quot;</span><br>string(15) <span class="hljs-string">&quot;myIterator::key&quot;</span><br>int(1)<br>string(13) <span class="hljs-string">&quot;secondelement&quot;</span><br><br>string(16) <span class="hljs-string">&quot;myIterator::next&quot;</span><br>string(17) <span class="hljs-string">&quot;myIterator::valid&quot;</span><br>string(19) <span class="hljs-string">&quot;myIterator::current&quot;</span><br>string(15) <span class="hljs-string">&quot;myIterator::key&quot;</span><br>int(2)<br>string(11) <span class="hljs-string">&quot;lastelement&quot;</span><br><br>string(16) <span class="hljs-string">&quot;myIterator::next&quot;</span><br>string(17) <span class="hljs-string">&quot;myIterator::valid&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ul><li>Iterator::current — 返回当前元素</li><li>Iterator::key — 返回当前元素的键</li><li>Iterator::next — 向前移动到下一个元素</li><li>Iterator::rewind — 返回到迭代器的第一个元素</li><li>Iterator::valid — 检查当前位置是否有效</li></ul><p><em><a href="https://segmentfault.com/q/1010000010830185">php 迭代接口的作用</a></em></p><h1 id="IteratorAggregate（聚合式迭代器）接口"><a href="#IteratorAggregate（聚合式迭代器）接口" class="headerlink" title="IteratorAggregate（聚合式迭代器）接口"></a>IteratorAggregate（聚合式迭代器）接口</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p>创建外部迭代器的接口。</p><h2 id="接口摘要-2"><a href="#接口摘要-2" class="headerlink" title="接口摘要"></a>接口摘要</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-built_in">IteratorAggregate</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">Traversable</span> &#123;<br><span class="hljs-comment">/* 方法 */</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-built_in">Traversable</span> getIterator ( <span class="hljs-keyword">void</span> )    <span class="hljs-comment">// 获取一个外部迭代器</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Example-1-基本用法"><a href="#Example-1-基本用法" class="headerlink" title="Example #1 基本用法"></a>Example #1 基本用法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myData</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IteratorAggregate</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$property1</span> = <span class="hljs-string">&quot;Public property one&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$property2</span> = <span class="hljs-string">&quot;Public property two&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$property3</span> = <span class="hljs-string">&quot;Public property three&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;property4 = <span class="hljs-string">&quot;last property&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getIterator</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayIterator</span>(<span class="hljs-keyword">$this</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> myData;<br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$obj</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>    var_dump(<span class="hljs-variable">$key</span>, <span class="hljs-variable">$value</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上例程的输出类似于：</p><pre><code>string(9) &quot;property1&quot;string(19) &quot;Public property one&quot;string(9) &quot;property2&quot;string(19) &quot;Public property two&quot;string(9) &quot;property3&quot;string(21) &quot;Public property three&quot;string(9) &quot;property4&quot;string(13) &quot;last property&quot;</code></pre><h1 id="ArrayAccess（数组式访问）接口"><a href="#ArrayAccess（数组式访问）接口" class="headerlink" title="ArrayAccess（数组式访问）接口"></a>ArrayAccess（数组式访问）接口</h1><h2 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h2><p>提供像<strong>访问数组一样访问对象</strong>的能力的接口。</p><h2 id="接口摘要-3"><a href="#接口摘要-3" class="headerlink" title="接口摘要"></a>接口摘要</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-built_in">ArrayAccess</span> &#123;<br><span class="hljs-comment">/* 方法 */</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> offsetExists ( <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$offset</span> )<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">mixed</span> offsetGet ( <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$offset</span> )<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> offsetSet ( <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$offset</span> , <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$value</span> )<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> offsetUnset ( <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$offset</span> )<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Example-1-Basic-usage"><a href="#Example-1-Basic-usage" class="headerlink" title="Example #1 Basic usage"></a>Example #1 Basic usage</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">obj</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">arrayaccess</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$container</span> = <span class="hljs-keyword">array</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;container = <span class="hljs-keyword">array</span>(<br>            <span class="hljs-string">&quot;one&quot;</span>   =&gt; <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;two&quot;</span>   =&gt; <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&quot;three&quot;</span> =&gt; <span class="hljs-number">3</span>,<br>        );<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">offsetSet</span>(<span class="hljs-params"><span class="hljs-variable">$offset</span>, <span class="hljs-variable">$value</span></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (is_null(<span class="hljs-variable">$offset</span>)) &#123;<br>            <span class="hljs-keyword">$this</span>-&gt;container[] = <span class="hljs-variable">$value</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">$this</span>-&gt;container[<span class="hljs-variable">$offset</span>] = <span class="hljs-variable">$value</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">offsetExists</span>(<span class="hljs-params"><span class="hljs-variable">$offset</span></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;container[<span class="hljs-variable">$offset</span>]);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">offsetUnset</span>(<span class="hljs-params"><span class="hljs-variable">$offset</span></span>) </span>&#123;<br>        <span class="hljs-keyword">unset</span>(<span class="hljs-keyword">$this</span>-&gt;container[<span class="hljs-variable">$offset</span>]);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">offsetGet</span>(<span class="hljs-params"><span class="hljs-variable">$offset</span></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;container[<span class="hljs-variable">$offset</span>]) ? <span class="hljs-keyword">$this</span>-&gt;container[<span class="hljs-variable">$offset</span>] : <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> obj;<br><br>var_dump(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$obj</span>[<span class="hljs-string">&quot;two&quot;</span>]));<br>var_dump(<span class="hljs-variable">$obj</span>[<span class="hljs-string">&quot;two&quot;</span>]);<br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$obj</span>[<span class="hljs-string">&quot;two&quot;</span>]);<br>var_dump(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$obj</span>[<span class="hljs-string">&quot;two&quot;</span>]));<br><span class="hljs-variable">$obj</span>[<span class="hljs-string">&quot;two&quot;</span>] = <span class="hljs-string">&quot;A value&quot;</span>;<br>var_dump(<span class="hljs-variable">$obj</span>[<span class="hljs-string">&quot;two&quot;</span>]);<br><span class="hljs-variable">$obj</span>[] = <span class="hljs-string">&#x27;Append 1&#x27;</span>;<br><span class="hljs-variable">$obj</span>[] = <span class="hljs-string">&#x27;Append 2&#x27;</span>;<br><span class="hljs-variable">$obj</span>[] = <span class="hljs-string">&#x27;Append 3&#x27;</span>;<br>print_r(<span class="hljs-variable">$obj</span>);<br></code></pre></td></tr></table></figure><p>以上例程的输出类似于：</p><pre><code>bool(true)int(2)bool(false)string(7) &quot;A value&quot;obj Object(    [container:obj:private] =&gt; Array        (            [one] =&gt; 1            [three] =&gt; 3            [two] =&gt; A value            [0] =&gt; Append 1            [1] =&gt; Append 2            [2] =&gt; Append 3        ))</code></pre><h2 id="Table-of-Contents-¶"><a href="#Table-of-Contents-¶" class="headerlink" title="Table of Contents ¶"></a>Table of Contents ¶</h2><ul><li>ArrayAccess::offsetExists — 检查一个偏移位置是否存在</li><li>ArrayAccess::offsetGet — 获取一个偏移位置的值</li><li>ArrayAccess::offsetSet — 设置一个偏移位置的值</li><li>ArrayAccess::offsetUnset — 复位一个偏移位置的值</li></ul><h1 id="序列化接口"><a href="#序列化接口" class="headerlink" title="序列化接口"></a>序列化接口</h1><h2 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h2><p>自定义序列化的接口。</p><p>实现此接口的类将不再支持 __sleep() 和 __wakeup()。不论何时，只要有实例需要被序列化，serialize 方法都将被调用。它将不会调用 __destruct() 或有其他影响，除非程序化地调用此方法。当数据被反序列化时，类将被感知并且调用合适的 unserialize() 方法而不是调用 __construct()。如果需要执行标准的构造器，你应该在这个方法中进行处理。</p><h2 id="接口摘要-4"><a href="#接口摘要-4" class="headerlink" title="接口摘要"></a>接口摘要</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-built_in">Serializable</span> &#123;<br><span class="hljs-comment">/* 方法 */</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> serialize ( <span class="hljs-keyword">void</span> )<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">mixed</span> unserialize ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$serialized</span> )<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Example-1-Basic-usage-1"><a href="#Example-1-Basic-usage-1" class="headerlink" title="Example #1 Basic usage"></a>Example #1 Basic usage</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">obj</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$data</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;data = <span class="hljs-string">&quot;My private data&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">serialize</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> serialize(<span class="hljs-keyword">$this</span>-&gt;data);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unserialize</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>) </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;data = unserialize(<span class="hljs-variable">$data</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getData</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;data;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> obj;<br><span class="hljs-variable">$ser</span> = serialize(<span class="hljs-variable">$obj</span>);<br><br><span class="hljs-variable">$newobj</span> = unserialize(<span class="hljs-variable">$ser</span>);<br><br>var_dump(<span class="hljs-variable">$newobj</span>-&gt;getData());<br></code></pre></td></tr></table></figure><p>以上例程的输出类似于：</p><pre><code>string(15) &quot;My private data&quot;</code></pre><h2 id="Table-of-Contents-1"><a href="#Table-of-Contents-1" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ul><li>Serializable::serialize — 对象的字符串表示</li><li>Serializable::unserialize — 构造对象</li></ul><h1 id="Closure-类"><a href="#Closure-类" class="headerlink" title="Closure 类"></a>Closure 类</h1><h2 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h2><p>用于代表 匿名函数 的类.</p><p>匿名函数（在 PHP 5.3 中被引入）会产生这个类型的对象。在过去，这个类被认为是一个实现细节，但现在可以依赖它做一些事情。自 PHP 5.4 起，这个类带有一些方法，允许在匿名函数创建后对其进行更多的控制。</p><p>除了此处列出的方法，还有一个 __invoke 方法。这是为了与其他实现了 __invoke()魔术方法 的对象保持一致性，但调用匿名函数的过程与它无关。</p><h2 id="类摘要"><a href="#类摘要" class="headerlink" title="类摘要"></a>类摘要</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-built_in">Closure</span> &#123;<br>    <span class="hljs-comment">/* 方法 */</span><br>    __construct ( <span class="hljs-keyword">void</span> )<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-built_in">Closure</span> bind ( <span class="hljs-built_in">Closure</span> <span class="hljs-variable">$closure</span> , <span class="hljs-keyword">object</span> <span class="hljs-variable">$newthis</span> [, <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$newscope</span> = <span class="hljs-string">&#x27;static&#x27;</span> ] )<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">Closure</span> bindTo ( <span class="hljs-keyword">object</span> <span class="hljs-variable">$newthis</span> [, <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$newscope</span> = <span class="hljs-string">&#x27;static&#x27;</span> ] )<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Table-of-Contents-2"><a href="#Table-of-Contents-2" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ul><li>Closure::__construct — 用于禁止实例化的构造函数</li><li>Closure::bind — 复制一个闭包，绑定指定的$this对象和类作用域。</li><li>Closure::bindTo — 复制当前闭包对象，绑定指定的$this对象和类作用域。</li></ul><h1 id="生成器类"><a href="#生成器类" class="headerlink" title="生成器类"></a>生成器类</h1><h2 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h2><p>Generator 对象是从 generators返回的.</p><pre><code>Caution Generator 对象不能通过 new 实例化.</code></pre><h2 id="类摘要-1"><a href="#类摘要-1" class="headerlink" title="类摘要"></a>类摘要</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-built_in">Generator</span> <span class="hljs-keyword">implements</span> <span class="hljs-built_in">Iterator</span> &#123;<br><span class="hljs-comment">/* 方法 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">mixed</span> current ( <span class="hljs-keyword">void</span> )<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">mixed</span> key ( <span class="hljs-keyword">void</span> )<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> next ( <span class="hljs-keyword">void</span> )<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> rewind ( <span class="hljs-keyword">void</span> )<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">mixed</span> send ( <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$value</span> )<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-keyword">throw</span> ( <span class="hljs-built_in">Exception</span> <span class="hljs-variable">$exception</span> )<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">bool</span> valid ( <span class="hljs-keyword">void</span> )<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> __wakeup ( <span class="hljs-keyword">void</span> )<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Table-of-Contents-3"><a href="#Table-of-Contents-3" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ul><li>Generator::current — 返回当前产生的值</li><li>Generator::key — 返回当前产生的键</li><li>Generator::next — 生成器继续执行</li><li>Generator::rewind — 重置迭代器</li><li>Generator::send — 向生成器中传入一个值</li><li>Generator::throw — 向生成器中抛入一个异常</li><li>Generator::valid — 检查迭代器是否被关闭</li><li>Generator::__wakeup — 序列化回调</li></ul>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【转】NGINX宏观手记</title>
    <link href="/2018/10/30/nginx/NGINX%E5%AE%8F%E8%A7%82%E6%89%8B%E8%AE%B0/"/>
    <url>/2018/10/30/nginx/NGINX%E5%AE%8F%E8%A7%82%E6%89%8B%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>原文链接:<br><a href="https://segmentfault.com/a/1190000015842717">NGINX宏观手记</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>任何一个工具都有它的灵魂所在,作为一个PHP程序员，我们可能仅仅使用了它的一小部分，这篇文章让你更加了解Nginx，本章大多都是总结、翻译、整理 ，希望你可以知道nginx不仅仅是PHP的附属品，更宏观的认识它的强大。</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>内置变量存放在 <code>ngx_http_core_module</code> 模块中，变量的命名方式和apache 服务器变量是一致的。总而言之，这些变量代表着客户端请求头的内容，例如 <code>$http_user_agent</code>, <code>$http_cookie</code>, 等等。下面是nginx支持的所有内置变量</p><table><thead><tr><th>变量名</th><th>注释</th></tr></thead><tbody><tr><td>$arg_name</td><td>请求中的的参数名，即“?”后面的arg_name=arg_value形式的arg_name</td></tr><tr><td>$args</td><td>请求中的参数值</td></tr><tr><td>$binary_remote_addr</td><td>客户端地址的二进制形式, 固定长度为4个字节</td></tr><tr><td>$body_bytes_sent</td><td>传输给客户端的字节数，响应头不计算在内；这个变量和Apache的 mod_log_config 模块中的“%B”参数保持兼容</td></tr><tr><td>$bytes_sent</td><td>传输给客户端的字节数 (1.3.8, 1.2.5)</td></tr><tr><td>$connection</td><td>TCP连接的序列号 (1.3.8, 1.2.5)</td></tr><tr><td>$connection_requests</td><td>TCP连接当前的请求数量 (1.3.8, 1.2.5)</td></tr><tr><td>$content_length</td><td>“Content-Length” 请求头字段</td></tr><tr><td>$content_type</td><td>“Content-Type” 请求头字段</td></tr><tr><td>$cookie_name</td><td>cookie名称</td></tr><tr><td>$document_root</td><td>当前请求的文档根目录或别名</td></tr><tr><td>$document_uri</td><td>同 $uri</td></tr><tr><td>$host</td><td>优先级如下：HTTP请求行的主机名&gt;”HOST”请求头字段&gt;符合请求的服务器名</td></tr><tr><td>$hostname</td><td>主机名</td></tr><tr><td>$http_name</td><td>匹配任意请求头字段； 变量名中的后半部分“name”可以替换成任意请求头字段，如在配置文件中需要获取http请求头：“Accept-Language”，那么将“－”替换为下划线，大写字母替换为小写，形如：$http_accept_language即可。</td></tr><tr><td>$https</td><td>如果开启了SSL安全模式，值为“on”，否则为空字符串。</td></tr><tr><td>$is_args</td><td>如果请求中有参数，值为“?”，否则为空字符串。</td></tr><tr><td>$limit_rate</td><td>用于设置响应的速度限制，详见 limit_rate。</td></tr><tr><td>$msec</td><td>当前的Unix时间戳 (1.3.9, 1.2.6)</td></tr><tr><td>$nginx_version</td><td>nginx版本</td></tr><tr><td>$pid</td><td>工作进程的PID</td></tr><tr><td>$pipe</td><td>如果请求来自管道通信，值为“p”，否则为“.” (1.3.12, 1.2.7)</td></tr><tr><td>$proxy_protocol_addr</td><td>获取代理访问服务器的客户端地址，如果是直接访问，该值为空字符串。(1.5.12)</td></tr><tr><td>$proxy_protocol_port</td><td>获取代理访问服务器的客户端的端口，如果是直接访问,该值为空字符串(1.11.0)。</td></tr><tr><td>$query_string</td><td>同 $args</td></tr><tr><td>$realpath_root</td><td>当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径。</td></tr><tr><td>$remote_addr</td><td>客户端地址</td></tr><tr><td>$remote_port</td><td>客户端端口</td></tr><tr><td>$remote_user</td><td>用于HTTP基础认证服务的用户名</td></tr><tr><td>$request</td><td>代表客户端的请求地址</td></tr><tr><td>$request_body</td><td>客户端的请求主体,此变量可在location中使用，将请求主体通过proxy_pass, fastcgi_pass, uwsgi_pass, 和 scgi_pass传递给下一级的代理服务器。</td></tr><tr><td>$request_body_file</td><td>将客户端请求主体保存在临时文件中。文件处理结束后，此文件需删除。如果需要之一开启此功能，需要设置client_body_in_file_only。如果将次文件传递给后端的代理服务器，需要禁用request body，即设置proxy_pass_request_body off，fastcgi_pass_request_body off, uwsgi_pass_request_body off, or scgi_pass_request_body off 。</td></tr><tr><td>$request_completion</td><td>如果请求成功，值为”OK”，如果请求未完成或者请求不是一个范围请求的最后一部分，则为空。</td></tr><tr><td>$request_filename</td><td>当前连接请求的文件路径，由root或alias指令与URI请求生成。</td></tr><tr><td>$request_id</td><td>16随机字节(十六进制)生成的唯一请求标识符(1.11.0)</td></tr><tr><td>$request_length</td><td>请求的长度 (包括请求的地址, http请求头和请求主体) (1.3.12,</td></tr><tr><td>$request_method</td><td>HTTP请求方法，通常为“GET”或“POST”</td></tr><tr><td>$request_time</td><td>处理客户端请求使用的时间 (1.3.9, 1.2.6); 从读取客户端的第一个字节开始计时。</td></tr><tr><td>$request_uri</td><td>这个变量等于包含一些客户端请求参数的原始URI，它无法修改，请查看$uri更改或重写URI，不包含主机名，例如：”/cnphp/test.php?arg=freemouse”。</td></tr><tr><td>$scheme</td><td>请求使用的Web协议, “http” 或 “https”</td></tr><tr><td>$sent_http_name</td><td>可以设置任意http响应头字段； 变量名中的后半部分“name”可以替换成任意响应头字段，如需要设置响应头Content-length，那么将“－”替换为下划线，大写字母替换为小写，形如：$sent_http_content_length 4096即可。</td></tr><tr><td>$server_addr</td><td>服务器端地址，需要注意的是：为了避免访问linux系统内核，应将ip地址提前设置在配置文件中。</td></tr><tr><td>$server_name</td><td>服务器名，<a href="http://www.nginx.org/">www.nginx.org</a></td></tr><tr><td>$server_port</td><td>port of the server which accepted a request</td></tr><tr><td>$server_protocol</td><td>服务器的HTTP版本, 通常为 “HTTP/1.0” 或 “HTTP/1.1” , “HTTP/2.0”</td></tr><tr><td>$status</td><td>HTTP响应代码 (1.3.2, 1.2.2)</td></tr><tr><td>$tcpinfo_rtt、$tcpinfo_rttvar、$tcpinfo_snd_cwnd、$tcpinfo_rcv_space</td><td>客户端TCP连接的具体信息</td></tr><tr><td>$time_iso8601</td><td>服务器时间的ISO 8610格式 (1.3.12, 1.2.7)</td></tr><tr><td>$time_local</td><td>服务器时间（LOG Format 格式） (1.3.12, 1.2.7)</td></tr><tr><td>$uri</td><td>请求中的当前URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改，$uri不包含主机名，如”/foo/bar.html”。</td></tr></tbody></table><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>nginx if 不允许嵌套，变量与括号之间都需要有空格，否则nginx认为是一条命令</p><table><thead><tr><th>符号</th><th>注释</th></tr></thead><tbody><tr><td>=</td><td>比较运算符,并非 “==”</td></tr><tr><td>&amp;&amp;</td><td>逻辑与</td></tr><tr><td>or</td><td>逻辑或</td></tr></tbody></table><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><p>nginx 将每个功能都分成不同的模块加载，具有很强的扩展性，与php的ext一样。<br>下面列出的都是常用到的模块和内置的模块</p><table><thead><tr><th>模块名</th><th>注释</th></tr></thead><tbody><tr><td>ngx_http_core_module</td><td>nginx核心模块,例如location, error_page和内置变量等等</td></tr><tr><td>ngx_http_access_module</td><td>允许/限制客户端的访问</td></tr><tr><td>ngx_http_fastcgi_module</td><td>这个不多说，如果你是PHP程序员一定知道</td></tr><tr><td>ngx_http_grpc_module</td><td>将请求发送到grpc服务器</td></tr><tr><td>ngx_http_gzip_module</td><td>压缩技术</td></tr><tr><td>ngx_http_proxy_module</td><td>反向代理的模块</td></tr><tr><td>ngx_http_log_module</td><td>日志的模块</td></tr><tr><td>ngx_http_rewrite_module</td><td>重写的模块</td></tr><tr><td>ngx_http_ssl_module</td><td>配置https的模块</td></tr></tbody></table><h1 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h1><p>nginx支持以下命令行参数</p><table><thead><tr><th>参数</th><th>注释</th></tr></thead><tbody><tr><td>-? -h</td><td>打开帮助信息</td></tr><tr><td>-c file</td><td>使用指定配置文件启动nginx.</td></tr><tr><td>-g directives</td><td>设置配置文件外的全局指令</td></tr><tr><td>-p prefix</td><td>设置前缀路径（默认是：/usr/local/Cellar/nginx）</td></tr><tr><td>-q suppress</td><td>在检测配置文件期间屏蔽非错误信息</td></tr><tr><td>-s signal</td><td>给一个 nginx 主进程发送信号：stop（停止）, quit（退出）, reopen（重启）, reload（重新加载配置文件）</td></tr><tr><td>stop</td><td>立刻停止nginx运行</td></tr><tr><td>quit</td><td>优雅的关闭nginx</td></tr><tr><td>reload</td><td>重启</td></tr><tr><td>reopen</td><td>打开日志文件</td></tr><tr><td>-t</td><td>检测配置文件是否有语法错误，然后退出</td></tr><tr><td>-T</td><td>与-t相同</td></tr><tr><td>-v</td><td>显示版本信息并退出</td></tr><tr><td>-V</td><td>显示版本和配置选项信息，然后退出</td></tr></tbody></table><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="配置SSL"><a href="#配置SSL" class="headerlink" title="配置SSL"></a>配置SSL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">server &#123;<br>    listen 443;<br>    server_name nginx.org;<br>    ssl on;<br>    root /var/www/nginx.org;<br>    index index.html index.htm;<br>    ssl_certificate  cert/nginx.pem;<br>    ssl_certificate_key cert/nginx.key;<br>    ssl_session_timeout 5m;<br>    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;<br>    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;<br>    ssl_prefer_server_ciphers on;<br>    location / &#123;<br>        index index.html index.htm;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="配置反向代理"><a href="#配置反向代理" class="headerlink" title="配置反向代理"></a>配置反向代理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">server &#123;<br>    listen 80;<br>    server_name  www.baidu.cim;<br> <br>    access_log  logs/nginx.access.log  main;<br>    error_log  logs/nginx.error.log;<br>    root   html;<br>    index  index.html index.htm index.php;<br><br>    location / &#123;<br>        proxy_pass  http://nginx.org;<br> <br>        proxy_redirect     off;<br>        proxy_set_header   Host             <span class="hljs-variable">$host</span>;<br>        proxy_set_header   X-Real-IP        <span class="hljs-variable">$remote_addr</span>;<br>        proxy_set_header   X-Forwarded-For  <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;<br>        proxy_max_temp_file_size 0;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="配置负载均衡"><a href="#配置负载均衡" class="headerlink" title="配置负载均衡"></a>配置负载均衡</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">upstream server &#123;  <br>    server 127.0.0.1:8080 weight=3;  <br>    server 127.1.1.1:8081;  <br>&#125;   <br><br>server &#123;<br>    listen 80;<br>    server_name  www.baidu.cim;<br> <br>    access_log  logs/nginx.access.log  main;<br>    error_log  logs/nginx.error.log;<br>    root   html;<br>    index  index.html index.htm index.php;<br><br>    location / &#123;<br>        proxy_pass  http://server;<br> <br>        proxy_redirect     off;<br>        proxy_set_header   Host             <span class="hljs-variable">$host</span>;<br>        proxy_set_header   X-Real-IP        <span class="hljs-variable">$remote_addr</span>;<br>        proxy_set_header   X-Forwarded-For  <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;<br>        proxy_max_temp_file_size 0;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>原文链接:<br><a href="https://segmentfault.com/a/1190000015842717">NGINX宏观手记</a></p>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【转】一道看似简单的面试题</title>
    <link href="/2018/10/29/php/%E4%B8%80%E9%81%93%E7%9C%8B%E4%BC%BC%E7%AE%80%E5%8D%95%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2018/10/29/php/%E4%B8%80%E9%81%93%E7%9C%8B%E4%BC%BC%E7%AE%80%E5%8D%95%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>原文链接:<br><a href="https://segmentfault.com/a/1190000015718348">一道看似简单的面试题</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><pre><code>使用PHP,给定一个数,判断这个数是否是二的N次方</code></pre><p>这样看似简单的一个面试题, 实际牵出了很多基础知识,本章在为大家补习基础知识的情况下来解答这道题。先亮出答案</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">exponentiation</span>(<span class="hljs-params"><span class="hljs-variable">$number</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$number</span> &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>        <br>    <span class="hljs-keyword">if</span> ((<span class="hljs-variable">$number</span> &amp; (<span class="hljs-variable">$number</span> - <span class="hljs-number">1</span>)) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br>    <br>exponentiation (<span class="hljs-number">2</span>);     <span class="hljs-comment">// bool(true)</span><br>exponentiation (<span class="hljs-number">8</span>);     <span class="hljs-comment">// bool(true)</span><br>exponentiation (<span class="hljs-number">16</span>);    <span class="hljs-comment">// bool(true)</span><br>exponentiation (<span class="hljs-number">32</span>);    <span class="hljs-comment">// bool(true)</span><br>exponentiation (<span class="hljs-number">128</span>);   <span class="hljs-comment">// bool(true)</span><br></code></pre></td></tr></table></figure><p><strong>这是查阅后的最最标准的答案，其他类似通过循环等等答案就略过把。</strong></p><h1 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h1><p>实际这道面试题考的并非是算法，而是作为开发人员的你“底子”够不够。</p><p>运算符应该是每门语言hello world 后立马要学习的。运算符分很多种，赋值运算符，比较运算符等等。我想大多自学或者培训出道的没有经过系统化学习的童鞋的，对这块的知识应该很薄弱把。当然赋值、比较什么的很熟悉，因业务基本逃不过这些。</p><p>但对位运算符，你真的吃透了吗？</p><pre><code>这道题的考点一是位运算符的使用，上面说过了本题考察的并非算法，而是你对二进制的了解，而在php中能操作二进制的运算符貌似 (我的知识范围内) 只有位运算符</code></pre><h2 id="PHP位运算符-部分"><a href="#PHP位运算符-部分" class="headerlink" title="PHP位运算符 (部分)"></a>PHP位运算符 (部分)</h2><p>本道面试题用到了 &amp; 所以不详解其他的运算符，需要更多了解请移步官方</p><p><a href="http://php.net/manual/zh/language.operators.bitwise.php">http://php.net/manual/zh/lang…</a></p><table><thead><tr><th>运算符</th><th>附加信息</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与运算符</td></tr><tr><td>^</td><td>按位异或运算符</td></tr></tbody></table><h1 id="按位与"><a href="#按位与" class="headerlink" title="按位与"></a>按位与</h1><p>按位与以简单易懂的方式来讲就是二进制位不相同的抵消，相同的保留</p><p><img src="/images/php/bitwise-and.png" alt="按位与"></p><p>举几个栗子</p><pre><code>公式 -&gt; 转为二进制后的公式 -&gt; 二进制结果 -&gt; 十进制结果</code></pre><hr><pre><code>2 &amp; 3 -&gt; 0010 &amp; 0011 -&gt; 0010 = 210 &amp; 7 -&gt; 1010 &amp; 0111 -&gt; 0010 = 232 &amp; 70 -&gt; 0100000 &amp; 1000110 -&gt; 0000000 = 0</code></pre><h1 id="按位异或"><a href="#按位异或" class="headerlink" title="按位异或"></a>按位异或</h1><p><img src="/images/php/bitwise-xor.png" alt="按位异或"></p><p>举几个栗子</p><pre><code>公式 -&gt; 转为二进制后的公式 -&gt; 二进制结果 -&gt; 十进制结果</code></pre><hr><pre><code>2 ^ 3 -&gt; 0010 ^ 0011 -&gt; 0001 = 110 ^ 7 -&gt; 1010 ^ 0111 -&gt; 1101 = 1332 ^ 70 -&gt; 0100000 ^ 1000110 -&gt; 1100110 = 102</code></pre><h1 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h1><p>借用百度百科上的一段话</p><pre><code>二进制是计算技术中广泛采用的一种数制。二进制数据是用0和1两个数码来表示的数。它的基数为2，进位规则是“逢二进一”，借位规则是“借一当二”。</code></pre><p>二进制本身就是为2这个数字而使用的，所以说这道面试题直指二进制的使用是没错的。2的n次方则就是</p><table><thead><tr><th>n</th><th>公式</th><th>结果</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>2</td></tr><tr><td>2</td><td>2x2</td><td>4</td></tr><tr><td>3</td><td>2x2x2</td><td>8</td></tr><tr><td>4</td><td>2x2x2x2</td><td>16</td></tr></tbody></table><p>换算成二进制的表格是</p><table><thead><tr><th>n</th><th>公式</th><th>结果</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>000010</td></tr><tr><td>2</td><td>2x2</td><td>000100</td></tr><tr><td>3</td><td>2x2x2</td><td>001000</td></tr><tr><td>4</td><td>2x2x2x2</td><td>010000</td></tr></tbody></table><p>由此看出2的n次方的二进制最高位是1，其余补0，(n&amp;(n-1))==0 并且 n&gt; 0 的情况下必定是2的n次方，为什么要-1呢？在二进制中每一位必须都不相同&amp;后才会得出0，上述已经讲解了&amp;的运算结果。例如十进制的16</p><pre><code>16 &amp; (16 - 1) = 010000 &amp; (001111) = 0 </code></pre><p>不要纠结(n&amp;(n-1))==0 这个公式是怎么来的，作为程序员，我感觉应该把更多时间放到反推上面来，去应证这个公式的正确性。</p><pre><code>验证是否是2的n次方，笨的方法就是一直除2，除到最后等于0则就是2的次方，所以公式如上</code></pre><h1 id="补位"><a href="#补位" class="headerlink" title="补位"></a>补位</h1><p>如果是2个二进制进行运算时，计算机会统一位数，例如</p><pre><code>01011&lt;------&gt; 001011</code></pre><p>计算机会将01自动补一位为001去方便运算。</p><h1 id="正负"><a href="#正负" class="headerlink" title="正负"></a>正负</h1><p>在二进制中，第一位为1的是负数，0是正数。如果没有补零的情况下</p><pre><code>1000000000001111111111</code></pre><p>虽然计算后也是0，但它并不是2的n次方，因为第一组二进制是负数。</p><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><pre><code>给定任意数，计算是2的几次方？</code></pre><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">power</span>(<span class="hljs-params"><span class="hljs-variable">$number</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$number</span> &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> ((<span class="hljs-variable">$number</span> &amp; (<span class="hljs-variable">$number</span> - <span class="hljs-number">1</span>)) == <span class="hljs-number">0</span>) &#123;<br>        <br>        <span class="hljs-comment">// 数学不好的,就看下面的方法</span><br>        <span class="hljs-comment">// $number = decbin($number);</span><br>        <span class="hljs-comment">// return (mb_strlen($number)-1);</span><br>        <span class="hljs-comment">// 数学可以的就看下面的方法</span><br>        <span class="hljs-keyword">return</span> floor(log(<span class="hljs-variable">$number</span>,<span class="hljs-number">2</span>));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>判断是否是2的n次方</li><li>如果是则将十进制数字转为二进制</li><li>计算总长度-1获取到是2的几次方,按照0的个数来计算</li></ul><p>原文链接:<br><a href="https://segmentfault.com/a/1190000015718348">一道看似简单的面试题</a></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>运算符</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【转】PHP中被忽略的性能优化利器：生成器.md</title>
    <link href="/2018/10/25/php/PHP%E4%B8%AD%E8%A2%AB%E5%BF%BD%E7%95%A5%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%88%A9%E5%99%A8%EF%BC%9A%E7%94%9F%E6%88%90%E5%99%A8-md/"/>
    <url>/2018/10/25/php/PHP%E4%B8%AD%E8%A2%AB%E5%BF%BD%E7%95%A5%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%88%A9%E5%99%A8%EF%BC%9A%E7%94%9F%E6%88%90%E5%99%A8-md/</url>
    
    <content type="html"><![CDATA[<p>如果是做Python或者其他语言的小伙伴，对于生成器应该不陌生。但很多PHP开发者或许都不知道生成器这个功能，可能是因为生成器是PHP 5.5.0才引入的功能，也可以是生成器作用不是很明显。但是，生成器功能的确非常有用。</p><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>直接讲概念估计你听完还是一头雾水，所以我们先来说说优点，也许能勾起你的兴趣。那么生成器有哪些优点，如下：</p><ul><li>生成器会对PHP应用的性能有非常大的影响</li><li>PHP代码运行时节省大量的内存</li><li>比较适合计算大量的数据</li></ul><p>那么，这些神奇的功能究竟是如何做到的？我们先来举个例子。</p><h1 id="概念引入"><a href="#概念引入" class="headerlink" title="概念引入"></a>概念引入</h1><p>首先，放下生成器概念的包袱，来看一个简单的PHP函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createRange</span>(<span class="hljs-params"><span class="hljs-variable">$number</span></span>)</span>&#123;<br>    <span class="hljs-variable">$data</span> = [];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$number</span>;<span class="hljs-variable">$i</span>++)&#123;<br>        <span class="hljs-variable">$data</span>[] = time();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$data</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是一个非常常见的PHP函数，我们在处理一些数组的时候经常会使用。这里的代码也非常简单：</p><ul><li>1、我们创建一个函数。</li><li>2、函数内包含一个for循环，我们循环的把当前时间放到$data里面</li><li>3、for循环执行完毕，把$data返回出去。</li></ul><p>下面没完，我们继续。我们再写一个函数，把这个函数的返回值循环打印出来：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;start time: &#x27;</span> . <span class="hljs-variable">$start_time</span> = microtime_float();<br><br><span class="hljs-variable">$result</span> = createRange(<span class="hljs-number">10</span>); <span class="hljs-comment">// 这里调用上面我们创建的函数</span><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$result</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>)&#123;<br>    sleep(<span class="hljs-number">1</span>);<span class="hljs-comment">//这里停顿1秒，我们后续有用</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> . <span class="hljs-variable">$value</span>;<br>&#125;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt; end time: &#x27;</span> . <span class="hljs-variable">$end_time</span> = microtime_float();<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt; 当前页面执行时间： &#x27;</span> . (<span class="hljs-variable">$end_time</span> - <span class="hljs-variable">$start_time</span>);<br></code></pre></td></tr></table></figure><p>这里定义了一个辅助函数，用于打印程序的执行时间：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 返回微妙数（辅助函数）</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> float</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">microtime_float</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">list</span>(<span class="hljs-variable">$usec</span>, <span class="hljs-variable">$sec</span>) = explode(<span class="hljs-string">&#x27; &#x27;</span>, microtime());<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$usec</span> + <span class="hljs-variable">$sec</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们在浏览器里面看一下运行结果：</p><p><img src="/images/php/yield1.png" alt="普通数组方法返回结果"></p><p>这里非常完美，没有任何问题。</p><h1 id="思考一个问题"><a href="#思考一个问题" class="headerlink" title="思考一个问题"></a>思考一个问题</h1><p>我们注意到，在调用函数 <code>createRange</code> 的时候给 <code>$number</code> 的传值是10，一个很小的数字。假设，现在传递一个值 <code>10000000</code>（1000万）。</p><p>那么，在函数 <code>createRange</code> 里面，<code>for</code> 循环就需要执行 <code>1000</code>万次。且有 <code>1000</code> 万个值被放到 <code>$data</code> 里面，而 <code>$data</code> 数组在是被放在内存内。所以，在调用函数时候会占用大量内存。</p><p>这里，生成器就可以大显身手了。</p><h1 id="创建生成器"><a href="#创建生成器" class="headerlink" title="创建生成器"></a>创建生成器</h1><p>我们直接修改代码，你们注意观察：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createRange</span>(<span class="hljs-params"><span class="hljs-variable">$number</span></span>)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$number</span>;<span class="hljs-variable">$i</span>++)&#123;<br>        <span class="hljs-keyword">yield</span> time();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看下这段和刚刚很像的代码，我们删除了数组 <code>$data</code>，而且也没有返回任何内容，而是在 <code>time()</code> 之前使用了一个关键字 <code>yield</code></p><h1 id="使用生成器"><a href="#使用生成器" class="headerlink" title="使用生成器"></a>使用生成器</h1><p>我们再运行一下第二段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;start time: &#x27;</span> . <span class="hljs-variable">$start_time</span> = microtime_float();<br><br><span class="hljs-variable">$result</span> = createRange(<span class="hljs-number">10</span>); <span class="hljs-comment">// 这里调用上面我们创建的函数</span><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$result</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>)&#123;<br>    sleep(<span class="hljs-number">1</span>);<span class="hljs-comment">//这里停顿1秒，我们后续有用</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> . <span class="hljs-variable">$value</span>;<br>&#125;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt; end time: &#x27;</span> . <span class="hljs-variable">$end_time</span> = microtime_float();<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt; 当前页面执行时间： &#x27;</span> . (<span class="hljs-variable">$end_time</span> - <span class="hljs-variable">$start_time</span>);<br></code></pre></td></tr></table></figure><p><img src="/images/php/yield2.png" alt="使用生成器返回结果"></p><p>我们奇迹般的发现了，输出的值和第一次没有使用生成器的不一样。这里的值（时间戳）中间间隔了1秒。</p><p>这里的间隔一秒其实就是 <code>sleep(1)</code> 造成的后果。但是为什么第一次没有间隔？那是因为：</p><ul><li>未使用生成器时：<code>createRange</code> 函数内的 <code>for</code> 循环结果被很快放到 <code>$data</code>中，并且立即返回。所以，<code>foreach</code> 循环的是一个固定的数组。</li><li>使用生成器时：<code>createRange</code> 的值不是一次性快速生成，而是依赖于 <code>foreach</code> 循环。<code>foreach</code> 循环一次，<code>for</code> 执行一次。</li></ul><p>到这里，你应该对生成器有点儿头绪。</p><h1 id="深入理解生成器"><a href="#深入理解生成器" class="headerlink" title="深入理解生成器"></a>深入理解生成器</h1><h2 id="代码剖析"><a href="#代码剖析" class="headerlink" title="代码剖析"></a>代码剖析</h2><p>下面我们来对于刚刚的代码进行剖析（去掉冗余部分）。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createRange</span>(<span class="hljs-params"><span class="hljs-variable">$number</span></span>)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$number</span>;<span class="hljs-variable">$i</span>++)&#123;<br>        <span class="hljs-keyword">yield</span> time();<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$result</span> = createRange(<span class="hljs-number">10</span>); <span class="hljs-comment">// 这里调用上面我们创建的函数</span><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$result</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>)&#123;<br>    sleep(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$value</span>.<span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们来还原一下代码执行过程。</p><ul><li>首先调用 <code>createRange</code> 函数，传入参数 <code>10</code>，但是 <code>for</code> 值执行了一次然后停止了，并且告诉 <code>foreach</code> 第一次循环可以用的值。</li><li><code>foreach</code> 开始对 <code>$result</code> 循环，进来首先 <code>sleep(1)</code>，然后开始使用 <code>for</code> 给的一个值执行输出。</li><li><code>foreach</code> 准备第二次循环，开始第二次循环之前，它向 <code>for</code> 循环又请求了一次。</li><li><code>for</code> 循环于是又执行了一次，将生成的时间戳告诉<code>foreach</code>.</li><li><code>foreach</code> 拿到第二个值，并且输出。由于 <code>foreach</code> 中 <code>sleep(1)</code>，所以，<code>for</code> 循环延迟了1秒生成当前时间</li></ul><p>所以，整个代码执行中，始终只有一个记录值参与循环，内存中也只有一条信息。</p><p>无论开始传入的 <code>$number</code> 有多大，由于并不会立即生成所有结果集，所以内存始终是一条循环的值。</p><h1 id="概念理解"><a href="#概念理解" class="headerlink" title="概念理解"></a>概念理解</h1><p>到这里，你应该已经大概理解什么是生成器了。下面我们来说下生成器原理。</p><p>首先明确一个概念：<strong>生成器yield关键字不是返回值，他的专业术语叫<code>产出值</code>，只是生成一个值</strong></p><p>那么代码中 <code>foreach</code> 循环的是什么？其实是PHP在使用生成器的时候，会返回一个 <code>Generator</code> 类的对象。<code>foreach</code> 可以对该对象进行迭代，每一次迭代，PHP会通过 <code>Generator</code> 实例计算出下一次需要迭代的值。这样 <code>foreach</code> 就知道下一次需要迭代的值了。</p><p>而且，在运行中 <code>for</code> 循环执行后，会立即停止。等待 <code>foreach</code> 下次循环时候再次和 <code>for</code> 索要下次的值的时候，<code>for</code> 循环才会再执行一次，然后立即再次停止。直到不满足条件不执行结束。</p><h1 id="实际开发应用"><a href="#实际开发应用" class="headerlink" title="实际开发应用"></a>实际开发应用</h1><p>很多PHP开发者不了解生成器，其实主要是不了解应用领域。那么，生成器在实际开发中有哪些应用？</p><h2 id="读取超大文件"><a href="#读取超大文件" class="headerlink" title="读取超大文件"></a>读取超大文件</h2><p>PHP开发很多时候都要读取大文件，比如csv文件、text文件，或者一些日志文件。这些文件如果很大，比如5个G。这时，直接一次性把所有的内容读取到内存中计算不太现实。</p><p>这里生成器就可以派上用场啦。简单看个例子：读取log文件</p><p><img src="/images/php/bootstrap.png" alt="bootstrap.log"></p><p>这是我系统的一个启动日志，拿来做示范读取</p><ul><li><p>通过数组输出文件内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php">header(<span class="hljs-string">&quot;content-type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readLog</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment"># code...</span><br>    <span class="hljs-variable">$handle</span> = fopen(<span class="hljs-string">&quot;./bootstrap.log&quot;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>);<br><br>    <span class="hljs-variable">$data</span> = [];<br>    <span class="hljs-keyword">while</span> (feof(<span class="hljs-variable">$handle</span>)===<span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-comment"># code...</span><br>        <span class="hljs-variable">$data</span>[] = fgets(<span class="hljs-variable">$handle</span>);<br>    &#125;<br><br>    fclose(<span class="hljs-variable">$handle</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$data</span>;<br>&#125;<br><br><span class="hljs-variable">$start_time</span> = microtime_float();<br><span class="hljs-variable">$start_mem</span> = memory_get_usage();<br><br><span class="hljs-variable">$result</span> = readLog();<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$result</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>    <span class="hljs-comment"># code...</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> . <span class="hljs-variable">$value</span>;<br>&#125;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;start time: &#x27;</span> . <span class="hljs-variable">$start_time</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;end time: &#x27;</span> . <span class="hljs-variable">$end_time</span> = microtime_float();<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;读取文件总共用时: &#x27;</span> . (<span class="hljs-variable">$end_time</span> - <span class="hljs-variable">$start_time</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;start memory: &#x27;</span> . <span class="hljs-variable">$start_mem</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;end memory: &#x27;</span> . <span class="hljs-variable">$end_mem</span> = memory_get_usage();<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;total memory: &#x27;</span> . (<span class="hljs-variable">$end_mem</span> - <span class="hljs-variable">$start_mem</span>) / <span class="hljs-number">1024</span>;<br></code></pre></td></tr></table></figure><p><img src="/images/php/yield3.png" alt="使用数组返回结果"></p></li><li><p>通过生成器输出文件内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php">...<br>...<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readLog</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment"># code...</span><br>    <span class="hljs-variable">$handle</span> = fopen(<span class="hljs-string">&quot;./bootstrap.log&quot;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>);<br><br>    <span class="hljs-variable">$data</span> = [];<br>    <span class="hljs-keyword">while</span> (feof(<span class="hljs-variable">$handle</span>)===<span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-comment"># code...</span><br>        <span class="hljs-keyword">yield</span> = fgets(<span class="hljs-variable">$handle</span>);<br>    &#125;<br><br>    fclose(<span class="hljs-variable">$handle</span>);<br>&#125;<br>...<br>...<br></code></pre></td></tr></table></figure><p><img src="/images/php/yield4.png" alt="使用生成器返回结果"></p></li></ul><p>通过上图的输出结果我们可以看出：</p><p><strong>输出的内容完全相同，但使用数组输出文件内容和使用生成器输出内容所占用的内存差距很惊人</strong>（我这个文件大小为：300.8k）。</p><p>由此可见，两种方式背后的代码执行规则一点儿也不一样。使用生成器读取文件，第一次读取了第一行，第二次读取了第二行，以此类推，<strong>每次被加载到内存中的文字只有一行</strong>，大大的减小了内存的使用。</p><p>这样，即使读取上G的文本也不用担心，完全可以像读取很小文件一样编写代码。</p><p>【注】：本传转载自<a href="https://segmentfault.com/a/1190000012334856">PHP中被忽略的性能优化利器：生成器</a></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【转】PHP实现异步调用方法</title>
    <link href="/2018/10/23/php/PHP%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2018/10/23/php/PHP%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>浏览器和服务器之间是通过 HTTP 协议进行连接通讯的。这是一种基于请求和响应模型的协议。<br>浏览器通过 URL 向服务器发起请求，Web 服务器接收到请求，执行一段程序，然后做出响应，发送相应的html代码给客户端。</p><p>这就有了一个问题，Web 服务器执行一段程序，可能几毫秒就完成，也可能几分钟都完不成。如果程序执行缓慢，用户可能没有耐心等下去，就关闭浏览器了。</p><p>而有的时候，我们更本不关心这些耗时的脚本的返回结果，但却还要等他执行完返回，才能继续下一步。</p><p>那么有没有什么办法，只是简单的触发调用这些耗时的脚本然后就继续下一步，让这些耗时的脚本在服务端慢慢执行？</p><p>经过试验，总结出来几种方法，和大家share：</p><ol><li>最简单的办法，就是在返回给客户端的HTML代码中，嵌入AJAX调用，或者，嵌入一个img标签，src指向要执行的耗时脚本。<br>这种方法最简单，也最快。服务器端不用做任何的调用。</li></ol><p>但是缺点是，一般来说Ajax都应该在onLoad以后触发，也就是说，用户点开页面后，就关闭，那就不会触发我们的后台脚本了。<br>而使用img标签的话，这种方式不能称为严格意义上的异步执行。用户浏览器会长时间等待php脚本的执行完成，也就是用户浏览器的状态栏一直显示还在load。<br>当然，还可以使用其他的类似原理的方法，比如script标签等等。</p><ol start="2"><li>popen()</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">resource popen ( <span class="hljs-keyword">string</span> command, <span class="hljs-keyword">string</span> mode ); <span class="hljs-comment">// //打开一个指向进程的管道，该进程由派生给定的 command 命令执行而产生。打开一个指向进程的管道，该进程由派生给定的 command 命令执行而产生。</span><br></code></pre></td></tr></table></figure><p>所以可以通过调用它，但忽略它的输出。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">pclose(popen(<span class="hljs-string">&quot;/home/xinchen/backend.php &amp;&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>));<br></code></pre></td></tr></table></figure><p>这个方法避免了第一个方法的缺点，并且也很快。但是问题是，这种方法不能通过HTTP协议请求另外的一个WebService，只能执行本地的脚本文件。并且只能单向打开，无法穿大量参数给被调用脚本。</p><p>并且如果，访问量很高的时候，会产生大量的进程。如果使用到了外部资源，还要自己考虑竞争。</p><ol start="3"><li>使用CURL</li></ol><p>这个方法，设置CUROPT_TIMEOUT为1（最小为1，郁闷）。也就是说，客户端至少必须等待1秒钟。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$ch</span> = curl_init();<br><span class="hljs-variable">$curl_opt</span> = [<br>    CURLOPT_URL, <span class="hljs-string">&#x27;http://www.example.com/backend.php&#x27;</span>,<br>    CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>,<br>    CURLOPT_TIMEOUT, <span class="hljs-number">1</span><br>];<br>curl_setopt_array(<span class="hljs-variable">$ch</span>, <span class="hljs-variable">$curl_opt</span>);<br>curl_exec(<span class="hljs-variable">$ch</span>);<br>curl_close(<span class="hljs-variable">$ch</span>);<br></code></pre></td></tr></table></figure><ol start="4"><li>使用fsockopen</li></ol><p>这个方法应该是最完美的，但是缺点是，你需要自己拼出HTTP的header部分。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$fp</span> = fsockopen(<span class="hljs-string">&quot;www.example.com&quot;</span>, <span class="hljs-number">80</span>, <span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-number">30</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$fp</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$errstr</span> (<span class="hljs-subst">$errno</span>)&lt;br /&gt;\n&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$out</span> = <span class="hljs-string">&quot;GET /backend.php  / HTTP/1.1\r\n&quot;</span>;<br>    <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Host: www.example.com\r\n&quot;</span>;<br>    <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Connection: Close\r\n\r\n&quot;</span>;<br> <br>    fwrite(<span class="hljs-variable">$fp</span>, <span class="hljs-variable">$out</span>);<br>    <span class="hljs-comment">/*忽略执行结果</span><br><span class="hljs-comment">    while (!feof($fp)) &#123;</span><br><span class="hljs-comment">        echo fgets($fp, 128);</span><br><span class="hljs-comment">    &#125;*/</span><br>    fclose(<span class="hljs-variable">$fp</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>所以，总体来看，最好用，最简单的还是第一种方法。<br>最完美的应该是最后一种，但是比较复杂</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP递归删除数组中值为空的元素.md</title>
    <link href="/2018/10/23/php/PHP%E9%80%92%E5%BD%92%E5%88%A0%E9%99%A4%E6%95%B0%E7%BB%84%E4%B8%AD%E5%80%BC%E4%B8%BA%E7%A9%BA%E7%9A%84%E5%85%83%E7%B4%A0/"/>
    <url>/2018/10/23/php/PHP%E9%80%92%E5%BD%92%E5%88%A0%E9%99%A4%E6%95%B0%E7%BB%84%E4%B8%AD%E5%80%BC%E4%B8%BA%E7%A9%BA%E7%9A%84%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 递归删除数组中值为空的元素</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> $arr</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> array</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">array_remove_empty</span>(<span class="hljs-params"><span class="hljs-variable">$arr</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$_arr</span> = <span class="hljs-keyword">array</span>();<br><br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$arr</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$val</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (is_array(<span class="hljs-variable">$val</span>))<br>        &#123;<br>            <span class="hljs-variable">$val</span> = array_remove_empty(<span class="hljs-variable">$val</span>);<br>            <span class="hljs-keyword">if</span> (count(<span class="hljs-variable">$val</span>) != <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-variable">$_arr</span>[<span class="hljs-variable">$key</span>] = <span class="hljs-variable">$val</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (trim(<span class="hljs-variable">$val</span>) != <span class="hljs-string">&quot;&quot;</span>)&#123;<br>                <span class="hljs-variable">$_arr</span>[<span class="hljs-variable">$key</span>] = <span class="hljs-variable">$val</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$arr</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$_arr</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Trait</title>
    <link href="/2017/11/28/php/Trait%20/"/>
    <url>/2017/11/28/php/Trait%20/</url>
    
    <content type="html"><![CDATA[<h1 id="Trait"><a href="#Trait" class="headerlink" title="Trait"></a>Trait</h1><p>自 PHP 5.4.0 起，PHP 实现了一种代码复用的方法，称为 trait。 </p><p>Trait 是为类似 PHP 的单继承语言而准备的一种代码复用机制。Trait 为了减少单继承语言的限制，使开发人员能够自由地在不同层次结构内独立的类中复用 method。Trait 和 Class 组合的语义定义了一种减少复杂性的方式，避免传统多继承和 Mixin 类相关典型问题。 </p><p>Trait 和 Class 相似，但仅仅旨在用细粒度和一致的方式来组合功能。 无法通过 trait 自身来实例化。它为传统继承增加了水平特性的组合；也就是说，应用的几个 Class 之间不需要继承。 </p><h2 id="Example-1-Trait-示例"><a href="#Example-1-Trait-示例" class="headerlink" title="Example #1 Trait 示例"></a>Example #1 Trait 示例</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">ezcReflectionReturnInfo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getReturnType</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">/*1*/</span> &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getReturnDescription</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">/*2*/</span> &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ezcReflectionMethod</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ReflectionMethod</span> </span>&#123;<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">ezcReflectionReturnInfo</span>;<br>    <span class="hljs-comment">/* ... */</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ezcReflectionFunction</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ReflectionFunction</span> </span>&#123;<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">ezcReflectionReturnInfo</span>;<br>    <span class="hljs-comment">/* ... */</span><br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h1 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h1><p>从基类继承的成员会被 trait 插入的成员所覆盖。优先顺序是来自当前类的成员覆盖了 trait 的方法，而 trait 则覆盖了被继承的方法。 </p><h2 id="Example-2-优先顺序示例"><a href="#Example-2-优先顺序示例" class="headerlink" title="Example #2 优先顺序示例"></a>Example #2 优先顺序示例</h2><p>从基类继承的成员被插入的 SayWorld Trait 中的 MyHelloWorld 方法所覆盖。其行为 MyHelloWorld 类中定义的方法一致。优先顺序是当前类中的方法会覆盖 trait 方法，而 trait 方法又覆盖了基类中的方法。 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Hello &#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">SayWorld</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">parent</span>::sayHello();<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;World!&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHelloWorld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Base</span> </span>&#123;<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">SayWorld</span>;<br>&#125;<br><br><span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> MyHelloWorld();<br><span class="hljs-variable">$o</span>-&gt;sayHello();<br><span class="hljs-meta">?&gt;</span> <br><span class="hljs-comment">// 以上例程会输出：</span><br><span class="hljs-comment">//  Hello World!</span><br></code></pre></td></tr></table></figure><h2 id="Example-3-另一个优先级顺序的例子"><a href="#Example-3-另一个优先级顺序的例子" class="headerlink" title="Example #3 另一个优先级顺序的例子"></a>Example #3 另一个优先级顺序的例子</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">HelloWorld</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Hello World!&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TheWorldIsNotEnough</span> </span>&#123;<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">HelloWorld</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Hello Universe!&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> TheWorldIsNotEnough();<br><span class="hljs-variable">$o</span>-&gt;sayHello();<br><span class="hljs-meta">?&gt;</span> <br><span class="hljs-comment">// 以上例程会输出：</span><br><span class="hljs-comment">//  Hello Universe!</span><br></code></pre></td></tr></table></figure><h1 id="多个-trait"><a href="#多个-trait" class="headerlink" title="多个 trait"></a>多个 trait</h1><p>通过逗号分隔，在 use 声明列出多个 trait，可以都插入到一个类中。 </p><h2 id="Example-4-多个-trait-的用法"><a href="#Example-4-多个-trait-的用法" class="headerlink" title="Example #4 多个 trait 的用法"></a>Example #4 多个 trait 的用法</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">Hello</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Hello &#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">World</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayWorld</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;World&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHelloWorld</span> </span>&#123;<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">Hello</span>, <span class="hljs-title">World</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayExclamationMark</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;!&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> MyHelloWorld();<br><span class="hljs-variable">$o</span>-&gt;sayHello();<br><span class="hljs-variable">$o</span>-&gt;sayWorld();<br><span class="hljs-variable">$o</span>-&gt;sayExclamationMark();<br><span class="hljs-meta">?&gt;</span> <br><span class="hljs-comment">// 以上例程会输出：</span><br><span class="hljs-comment">// Hello World!</span><br></code></pre></td></tr></table></figure><h2 id="冲突的解决"><a href="#冲突的解决" class="headerlink" title="冲突的解决"></a>冲突的解决</h2><p>如果两个 trait 都插入了一个同名的方法，如果没有明确解决冲突将会产生一个致命错误。 </p><p>为了解决多个 trait 在同一个类中的命名冲突，需要使用 insteadof 操作符来明确指定使用冲突方法中的哪一个。 </p><p>以上方式仅允许排除掉其它方法，as 操作符可以 为某个方法引入别名。 注意，as 操作符不会对方法进行重命名，也不会影响其方法。</p><h2 id="Example-5-冲突的解决"><a href="#Example-5-冲突的解决" class="headerlink" title="Example #5 冲突的解决"></a>Example #5 冲突的解决</h2><p>在本例中 Talker 使用了 trait A 和 B。由于 A 和 B 有冲突的方法，其定义了使用 trait B 中的 smallTalk 以及 trait A 中的 bigTalk。 </p><p>Aliased_Talker 使用了 as 操作符来定义了 talk 来作为 B 的 bigTalk 的别名。 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">smallTalk</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bigTalk</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;A&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">smallTalk</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;b&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bigTalk</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;B&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Talker</span> </span>&#123;<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">A</span>, <span class="hljs-title">B</span> &#123;<br>        <span class="hljs-title">B</span>::<span class="hljs-title">smallTalk</span> <span class="hljs-title">insteadof</span> <span class="hljs-title">A</span>;<br>        A::bigTalk <span class="hljs-keyword">insteadof</span> B;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Aliased_Talker</span> </span>&#123;<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">A</span>, <span class="hljs-title">B</span> &#123;<br>        <span class="hljs-title">B</span>::<span class="hljs-title">smallTalk</span> <span class="hljs-title">insteadof</span> <span class="hljs-title">A</span>;<br>        A::bigTalk <span class="hljs-keyword">insteadof</span> B;<br>        B::bigTalk <span class="hljs-keyword">as</span> talk;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p class="note">Note: <p>在 PHP 7.0 之前，在类里定义和 trait 同名的属性，哪怕是完全兼容的也会抛出 E_STRICT（完全兼容的意思：具有相同的访问可见性、初始默认值）。 </p></p><h1 id="修改方法的访问控制"><a href="#修改方法的访问控制" class="headerlink" title="修改方法的访问控制"></a>修改方法的访问控制</h1><p>使用 as 语法还可以用来调整方法的访问控制。 </p><h2 id="Example-6-修改方法的访问控制"><a href="#Example-6-修改方法的访问控制" class="headerlink" title="Example #6 修改方法的访问控制"></a>Example #6 修改方法的访问控制</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">HelloWorld</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Hello World!&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 修改 sayHello 的访问控制</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass1</span> </span>&#123;<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">HelloWorld</span> &#123; <span class="hljs-title">sayHello</span> <span class="hljs-title">as</span> <span class="hljs-title">protected</span>; &#125;<br>&#125;<br><br><span class="hljs-comment">// 给方法一个改变了访问控制的别名</span><br><span class="hljs-comment">// 原版 sayHello 的访问控制则没有发生变化</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass2</span> </span>&#123;<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">HelloWorld</span> &#123; <span class="hljs-title">sayHello</span> <span class="hljs-title">as</span> <span class="hljs-title">private</span> <span class="hljs-title">myPrivateHello</span>; &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h1 id="从-trait-来组成-trait"><a href="#从-trait-来组成-trait" class="headerlink" title="从 trait 来组成 trait"></a>从 trait 来组成 trait</h1><p>正如 class 能够使用 trait 一样，其它 trait 也能够使用 trait。在 trait 定义时通过使用一个或多个 trait，能够组合其它 trait 中的部分或全部成员。 </p><h2 id="Example-7-从-trait-来组成-trait"><a href="#Example-7-从-trait-来组成-trait" class="headerlink" title="Example #7 从 trait 来组成 trait"></a>Example #7 从 trait 来组成 trait</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">Hello</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Hello &#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">World</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayWorld</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;World!&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">HelloWorld</span> </span>&#123;<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">Hello</span>, <span class="hljs-title">World</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHelloWorld</span> </span>&#123;<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">HelloWorld</span>;<br>&#125;<br><br><span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> MyHelloWorld();<br><span class="hljs-variable">$o</span>-&gt;sayHello();<br><span class="hljs-variable">$o</span>-&gt;sayWorld();<br><span class="hljs-meta">?&gt;</span> <br><span class="hljs-comment">// Hello World!</span><br></code></pre></td></tr></table></figure><h1 id="Trait-的抽象成员"><a href="#Trait-的抽象成员" class="headerlink" title="Trait 的抽象成员"></a>Trait 的抽象成员</h1><p>为了对使用的类施加强制要求，trait 支持抽象方法的使用。 </p><h2 id="Example-8-表示通过抽象方法来进行强制要求"><a href="#Example-8-表示通过抽象方法来进行强制要求" class="headerlink" title="Example #8 表示通过抽象方法来进行强制要求"></a>Example #8 表示通过抽象方法来进行强制要求</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">Hello</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHelloWorld</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Hello&#x27;</span>.<span class="hljs-keyword">$this</span>-&gt;getWorld();<br>    &#125;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getWorld</span>(<span class="hljs-params"></span>)</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHelloWorld</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$world</span>;<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">Hello</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getWorld</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;world;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setWorld</span>(<span class="hljs-params"><span class="hljs-variable">$val</span></span>) </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;world = <span class="hljs-variable">$val</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h1 id="Trait-的静态成员"><a href="#Trait-的静态成员" class="headerlink" title="Trait 的静态成员"></a>Trait 的静态成员</h1><p>Traits 可以被静态成员静态方法定义。 </p><h2 id="Example-9-静态变量"><a href="#Example-9-静态变量" class="headerlink" title="Example #9 静态变量"></a>Example #9 静态变量</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">Counter</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inc</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">static</span> <span class="hljs-variable">$c</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable">$c</span> = <span class="hljs-variable">$c</span> + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$c</span>\n&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C1</span> </span>&#123;<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">Counter</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C2</span> </span>&#123;<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">Counter</span>;<br>&#125;<br><br><span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> C1(); <span class="hljs-variable">$o</span>-&gt;inc(); <span class="hljs-comment">// echo 1</span><br><span class="hljs-variable">$p</span> = <span class="hljs-keyword">new</span> C2(); <span class="hljs-variable">$p</span>-&gt;inc(); <span class="hljs-comment">// echo 1</span><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h2 id="Example-10-静态方法"><a href="#Example-10-静态方法" class="headerlink" title="Example #10 静态方法"></a>Example #10 静态方法</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">StaticExample</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doSomething</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Doing something&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example</span> </span>&#123;<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">StaticExample</span>;<br>&#125;<br><br>Example::doSomething();<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><p>Trait 同样可以定义属性。 </p><h2 id="Example-11-定义属性"><a href="#Example-11-定义属性" class="headerlink" title="Example #11 定义属性"></a>Example #11 定义属性</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">PropertiesTrait</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$x</span> = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PropertiesExample</span> </span>&#123;<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">PropertiesTrait</span>;<br>&#125;<br><br><span class="hljs-variable">$example</span> = <span class="hljs-keyword">new</span> PropertiesExample;<br><span class="hljs-variable">$example</span>-&gt;x;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>Trait 定义了一个属性后，类就不能定义同样名称的属性，否则会产生 fatal error。 有种情况例外：属性是兼容的（同样的访问可见度、初始默认值）。 在 PHP 7.0 之前，属性是兼容的，则会有 E_STRICT 的提醒。 </p><h2 id="Example-12-解决冲突"><a href="#Example-12-解决冲突" class="headerlink" title="Example #12 解决冲突"></a>Example #12 解决冲突</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">PropertiesTrait</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$same</span> = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$different</span> = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PropertiesExample</span> </span>&#123;<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">PropertiesTrait</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$same</span> = <span class="hljs-literal">true</span>; <span class="hljs-comment">// PHP 7.0.0 后没问题，之前版本是 E_STRICT 提醒</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$different</span> = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 致命错误</span><br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【转】各类 HTTP 返回状态代码详解</title>
    <link href="/2017/11/15/php/%E5%90%84%E7%B1%BB%20HTTP%20%E8%BF%94%E5%9B%9E%E7%8A%B6%E6%80%81%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3/"/>
    <url>/2017/11/15/php/%E5%90%84%E7%B1%BB%20HTTP%20%E8%BF%94%E5%9B%9E%E7%8A%B6%E6%80%81%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>如果某项请求发送到您的服务器要求显示您网站上的某个网页（例如，用户通过浏览器访问您的网页或 Googlebot 抓取网页时），服务器将会返回 HTTP 状态代码以响应请求。<br>此状态代码提供关于请求状态的信息， 告诉 Googlebot 关于您的网站和请求的网页的信息。</p><h1 id="一些常见的状态代码包括："><a href="#一些常见的状态代码包括：" class="headerlink" title="一些常见的状态代码包括："></a>一些常见的状态代码包括：</h1><p><code>200</code> – 服务器成功返回网页<br><code>201</code> – 请求成功并且服务器创建了新的资源  </p><p><code>301</code> – 请求的网页已永久移动到新位置<br><code>302</code> – 服务器目前从不同位置的网页响应请求   </p><p><code>400</code> – 服务器不理解请求的语法（错误请求）<br><code>401</code> – 请求要求身份验证（未授权）<br><code>403</code> – 服务器拒绝请求（禁止）<br><code>404</code> – 请求的网页不存在  </p><p><code>500</code> – 服务器内部错误<br><code>502</code> – 网关错误<br><code>503</code> – 服务器暂时不可用<br><code>504</code> – 网关超时  </p><p>下面提供 HTTP 状态代码的完整列表。 点击链接可了解详情。 您也可以访问有关 HTTP 状态代码的 <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">W3C 网页以获得更多信息</a>。</p><h2 id="1xx（临时响应）"><a href="#1xx（临时响应）" class="headerlink" title="1xx（临时响应）"></a>1xx（临时响应）</h2><p>表示临时响应并需要请求者继续执行操作的状态代码。</p><table><thead><tr><th align="left">代码</th><th>说明</th></tr></thead><tbody><tr><td align="left">100（继续）</td><td>请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。</td></tr><tr><td align="left">101（切换协议）</td><td>请求者已要求服务器切换协议，服务器已确认并准备切换。</td></tr></tbody></table><h2 id="2xx（成功）"><a href="#2xx（成功）" class="headerlink" title="2xx（成功）"></a>2xx（成功）</h2><p>表示服务器成功处理了请求的状态代码。</p><table><thead><tr><th align="left">代码</th><th>说明</th></tr></thead><tbody><tr><td align="left">200（成功）</td><td>服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。 如果针对您的 robots.txt 文件显示此状态，则表示 Googlebot 已成功检索到该文件。</td></tr><tr><td align="left">201（已创建）</td><td>请求成功并且服务器创建了新的资源。</td></tr><tr><td align="left">202（已接受）</td><td>服务器已接受请求，但尚未处理。</td></tr><tr><td align="left">203（非授权信息）</td><td>服务器已成功处理了请求，但返回的信息可能来自另一来源。</td></tr><tr><td align="left">204（无内容）</td><td>服务器成功处理了请求，但没有返回任何内容。</td></tr><tr><td align="left">205（重置内容）</td><td>服务器成功处理了请求，但没有返回任何内容。 与 204 响应不同，此响应要求请求者重置文档视图（例如，清除表单内容以输入新内容）。</td></tr><tr><td align="left">206（部分内容）</td><td>服务器成功处理了部分 GET 请求。</td></tr></tbody></table><h2 id="3xx（重定向）"><a href="#3xx（重定向）" class="headerlink" title="3xx（重定向）"></a>3xx（重定向）</h2><p>要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。 Google 建议您在每次请求中使用重定向不要超过 5 次。 您可以使用网站管理员工具查看一下 Googlebot 在抓取重定向网页时是否遇到问题。 诊断下的网 络抓取页面列出了由于重定向错误而导致 Googlebot 无法抓取的网址。</p><table><thead><tr><th align="left">代码</th><th>说明</th></tr></thead><tbody><tr><td align="left">300（多种选择）</td><td>针对请求，服务器可执行多种操作。 服务器可根据请求者（用户代理）选择一项操作，或提供操作列表供请求者选择。</td></tr><tr><td align="left">301（永久移动）</td><td>请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。 您应使用此代码告诉 Googlebot 某个网页或网站已永久移动到新位置。</td></tr><tr><td align="left">302（暂时移动）</td><td>服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。 此代码与响应 GET 或 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个网页或网站已经移动，因为 Googlebot 会继续抓取原有位置并编入索引。</td></tr><tr><td align="left">303（查看其他位置）</td><td>请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。 对于除 HEAD 之外的所有请求，服务器会自动转到其他位置。</td></tr><tr><td align="left">304（未修改）</td><td>自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。如果网页自请求者上次请求后再也没有更改过，您应当将服务器配置为返回此响应（称为 If-Modified-Since HTTP 标头）。 由于服务器可以告诉 Googlebot 自从上次抓取后网页没有更改过，因此可节省带宽和开销。</td></tr><tr><td align="left">305（使用代理）</td><td>请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理。</td></tr><tr><td align="left">307（暂时重定向）</td><td>服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。 此代码与响应 GET 和 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个页面或网站已经移动，因为 Googlebot 会继续抓取原有位置并编入索引。</td></tr></tbody></table><h2 id="4xx（请求错误）"><a href="#4xx（请求错误）" class="headerlink" title="4xx（请求错误）"></a>4xx（请求错误）</h2><p>这些状态代码表示请求可能出错，妨碍了服务器的处理。</p><table><thead><tr><th align="left">代码</th><th>说明</th></tr></thead><tbody><tr><td align="left">400（错误请求）</td><td>服务器不理解请求的语法。</td></tr><tr><td align="left">401（未授权）</td><td>请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</td></tr><tr><td align="left">403（禁止）</td><td>服务器拒绝请求。 如果您看到 Googlebot 在尝试抓取您网站上的有效网页时收到此状态代码（可以在 Google 网站管理员工具诊 断下的网络抓取页面上看到此信息），可能是您的服务器或主机拒绝 Googlebot 访问。</td></tr><tr><td align="left">404（未找到）</td><td>服务器找不到请求的网页。 例如，如果请求服务器上不存在的网页，服务器通常会返回此代码。如果您的网站上没有 robots.txt 文件，而您在 Google 网站管理员工具”诊断”标签的 robots.txt 页上看到此状态，那么这是正确的状态。但是，如果您有 robots.txt 文件而又看到此状态，则说明您的 robots.txt 文件可能命名错误或位于错误的位置（该文件应当位于顶级域名，名为 robots.txt）。如果您看到有关G ooglebot 尝试抓取的网址的此状态（在”诊断”标签的 HTTP 错误页上），则表示 Googlebot 追踪的可能是另一个页面的无效链接（是旧链接或输入有误的链接）。</td></tr><tr><td align="left">405（禁用的方法）</td><td>禁用请求中指定的方法。</td></tr><tr><td align="left">406（不可接受）</td><td>无法使用请求的内容特性响应请求的网页。</td></tr><tr><td align="left">407（需要代理授权）</td><td>此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。 如果服务器返回此响应，还会指明请求者应当使用的代理。</td></tr><tr><td align="left">408（请求超时）</td><td>服务器等候请求时发生超时。</td></tr><tr><td align="left">409（冲突）</td><td>服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。 服务器在响应与前一个请求相冲突的 PUT 请求时可能会返回此代码，同时会附上两个请求的差异列表。</td></tr><tr><td align="left">410（已删除）</td><td>如果请求的资源已永久删除，服务器就会返回此响应。 该代码与 404（未找到）代码相似，但在资源以前存在而现在不存在的情况下，有时会用来替代 404 代码。 如果资源已永久删除，您应当使用 301 指定资源的新位置。</td></tr><tr><td align="left">411（需要有效长度）</td><td>服务器不接受不含有效内容长度标头字段的请求。</td></tr><tr><td align="left">412（未满足前提条件）</td><td>服务器未满足请求者在请求中设置的其中一个前提条件。</td></tr><tr><td align="left">413（请求实体过大）</td><td>服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</td></tr><tr><td align="left">414（请求的 URI 过长）</td><td>请求的 URI（通常为网址）过长，服务器无法处理。</td></tr><tr><td align="left">415（不支持的媒体类型）</td><td>请求的格式不受请求页面的支持。</td></tr><tr><td align="left">416（请求范围不符合要求）</td><td>如果页面无法提供请求的范围，则服务器会返回此状态代码。</td></tr><tr><td align="left">417（未满足期望要求）</td><td>服务器未满足”期望”请求标头字段的要求。</td></tr></tbody></table><h2 id="5xx（服务器错误）"><a href="#5xx（服务器错误）" class="headerlink" title="5xx（服务器错误）"></a>5xx（服务器错误）</h2><p>这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</p><table><thead><tr><th align="left">代码</th><th>说明</th></tr></thead><tbody><tr><td align="left">500（服务器内部错误）</td><td>服务器遇到错误，无法完成请求。</td></tr><tr><td align="left">501（尚未实施）</td><td>服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。</td></tr><tr><td align="left">502（错误网关）</td><td>服务器充当网关或代理，从上游服务器收到无效响应。</td></tr><tr><td align="left">503（服务不可用）</td><td>服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。</td></tr><tr><td align="left">504（网关超时）</td><td>服务器充当网关或代理，但没有及时从上游服务器收到请求。</td></tr><tr><td align="left">505（HTTP 版本不受支持）</td><td>服务器不支持请求中所用的 HTTP 协议版本。</td></tr></tbody></table><p><a href="http://www.chinahtml.com/1006/127570310118872.html">转载：各类 HTTP 返回状态代码详解</a></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【转】session原理，如何修改session生命周期</title>
    <link href="/2017/11/13/php/session%E5%8E%9F%E7%90%86%EF%BC%8C%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9session%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <url>/2017/11/13/php/session%E5%8E%9F%E7%90%86%EF%BC%8C%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9session%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>PHP的Session支持包含一种可以在以后访问中保存某些数据的方法。</p><p>一个访问者访问你的web网站将被分配一个唯一的id，这就是所谓的Session id。这个id可以存储在用户端的一个cookie中，也可以通过URL进行传递。</p><p>Session支持允许你将请求中的数据保存在超全局数组$_SESSION中. 当一个访问者访问你的网站，PHP 将自动检查(如果 <code>session.auto_start</code> 被设置为 1）或者在你要求下检查(明确通过 <code>session_start()</code> 或者隐式通过 <code>session_register()</code>) 当前会话 id 是否是先前发送的请求创建. 如果是这种情况， 那么先前保存的环境将被重建.<br><a href="http://php.net/manual/zh/intro.session.php">http://php.net/manual/zh/intro.session.php</a></p><h1 id="如何实现session的共享？"><a href="#如何实现session的共享？" class="headerlink" title="如何实现session的共享？"></a>如何实现session的共享？</h1><p>首先我们应该明白，为什么要实现共享，如果你的网站是存放在一个机器上，那么是不存在这个问题的，因为会话数据就在这台机器，但是如果你使用了负载均衡把请求分发到不同的机器呢？这个时候会话id在客户端是没有问题的，但是如果用户的两次请求到了两台不同的机器，而它的session数据可能存在其中一台机器，这个时候就会出现取不到session数据的情况，于是session的共享就成了一个问题。 </p><p>事实上，各种web框架早已考虑到这个问题，比如asp.NET，是支持通过配置文件修改session的存储介质为sql server的，所有机器的会话数据都从同一个数据库读，就不会存在不一致的问题；php支持把会话数据存储到某台memcache服务器，你也可以手工把session文件存放的目录改为nfs网络文件系统，从而实现文件的跨机器共享。 </p><p>　　还有一个简单的办法可以用于会话信息不会频繁变更的情况，在机器a设置用户会话的时候，把会话数据post到机器b的一个cgi，机器b的cgi把会话数据存下来，这样机器a和b都会有同一份session数据的拷贝。</p><h1 id="SESSION-的数据保存在哪里呢？"><a href="#SESSION-的数据保存在哪里呢？" class="headerlink" title="SESSION 的数据保存在哪里呢？"></a>SESSION 的数据保存在哪里呢？</h1><h2 id="PHP中的session存储"><a href="#PHP中的session存储" class="headerlink" title="PHP中的session存储"></a>PHP中的session存储</h2><p>SESSION 的数据保存在哪里呢？ </p><p>当然是在服务器端，但不是保存在内存中，而是保存在文件或数据库中。 </p><p>默认情况下，PHP.ini 中设置的 SESSION 保存方式是 files（s<code>ession.save_handler = files</code>），即使用读写文件的方式保存 SESSION 数据，而 SESSION 文件保存的目录由 session.save_path 指定，文件名以 <code>sess_</code> 为前缀，后跟 SESSION ID，如：sess_c72665af28a8b14c0fe11afe3b59b51b。文件中的数据即是序列化之后的 SESSION 数据了。 </p><p>　　 如果访问量大，可能产生的 SESSION 文件会比较多，这时可以设置分级目录进行 SESSION 文件的保存，效率会提高很多，设置方法为：<code>session.save_path=&quot;N;/save_path&quot;</code>，N 为分级的级数，save_path 为开始目录。 </p><p>　　 当写入 SESSION 数据的时候，php 会获取到客户端的 SESSION_ID，然后根据这个 SESSION ID 到指定的 SESSION 文件保存目录中找到相应的 SESSION 文件，不存在则创建之，最后将数据序列化之后写入文件【3】。读取 SESSION 数据是也是类似的操作流程，对读出来的数据需要进行解序列化，生成相应的 SESSION 变量。</p><h1 id="PHP修改Session生命周期方法"><a href="#PHP修改Session生命周期方法" class="headerlink" title="PHP修改Session生命周期方法"></a>PHP修改Session生命周期方法</h1><p> http协议是WEB服务器与客户端(浏览器)相互通信的协议，它是一种无状态协议。所谓无状态，指的是不会维护http请求数据，http请求是独立的，非持久的。而越来越复杂的WEB应用，需要保存一些用户状态信息。这时候，Session这种方案应需而生。PHP从4.1开始支持Session管理。</p><p> 自 PHP 4.2.3 起用php启动 (文件修改时间）来代替了 atime，也就是说如果浏览器带有该session对应的cookie 该cookie的存活期中 在gc_maxlifetime 设置的时间 间隔内刷新浏览器 则该session “永远”不会失效。由此还可以通过  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">setcookie(session_name(),session_id(),time()+N);<br></code></pre></td></tr></table></figure><p>来控制session生命周期,一旦cookie失效浏览器就“瞎”了，因为http本身是“无状态”协议，必须通过cookie来维持身份。</p><p>其实PHP5 Session还提供了一个函数 session_set_cookie_params(); 来设置PHP5 Session的生存期的，该函数必须在 session_start() 函数调用之前调用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 保存一天</span><br><span class="hljs-variable">$lifeTime</span> = <span class="hljs-number">24</span> * <span class="hljs-number">3600</span>;<br>session_set_cookie_params(<span class="hljs-variable">$lifeTime</span>);<br>session_start();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="注"><a href="#注" class="headerlink" title="注"></a>注</h1><ol><li>“session存放在哪里：服务器端的内存中。”指的是Tomcat保存session的方式。对于PHP而言是保存在文件中。上述有提及。</li><li>session不会因为浏览器的关闭而删除。但是存有session ID的cookie的默认过期时间是会话级别。也就是用户关闭了浏览器，那么存储在客户端的session ID便会丢失，但是存储在服务器端的session数据并不会被立即删除。从客户端即浏览器看来，好像session被删除了一样（因为我们丢失了session ID，找不到原来的session数据了）。</li><li>PHP使用Cookie的方法传递session id。尽量不要使用GET方法传递session id,因为这样很不安全。</li></ol>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Session</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线上服务器搭建GIT服务器，实现本地代码上传并同步到服务器</title>
    <link href="/2017/09/23/%E7%BA%BF%E4%B8%8A%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BAGIT%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E4%B8%8A%E4%BC%A0%E5%B9%B6%E5%90%8C%E6%AD%A5%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2017/09/23/%E7%BA%BF%E4%B8%8A%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BAGIT%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E4%B8%8A%E4%BC%A0%E5%B9%B6%E5%90%8C%E6%AD%A5%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近搞了个服务器，来放一些自己的小东西（代码）。想想ftp太麻烦（lower），于是选择了在服务器上搭建一个Git，用来同步代码，特此做一个备忘录（注：我的服务器是centos 7，lnmp环境）。</p><h1 id="一、在服务器安装Git"><a href="#一、在服务器安装Git" class="headerlink" title="一、在服务器安装Git"></a>一、在服务器安装Git</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y git<br></code></pre></td></tr></table></figure><p>在安装完之后你可以运行git进行测试，看看是否安装成功（就不贴图了）。</p><h1 id="二、在服务器上创建裸版本库"><a href="#二、在服务器上创建裸版本库" class="headerlink" title="二、在服务器上创建裸版本库"></a>二、在服务器上创建<code>裸版本库</code></h1><p>ps：远程仓库通常只是一个裸仓库（bare repository）， 即一个没有当前工作目录的仓库。因为该仓库只是一个合作媒介，所以不需要从硬盘上取出最新版本的快照；仓库里存放的仅仅是 Git 的数据。简单地说，裸仓库就是你工作目录中 .git 子目录内的内容。</p><p>在 /opt/git/aurora 下创建一个叫 aurora.git的裸仓库:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir /opt/git/aurora<br><span class="hljs-built_in">cd</span> /opt/git/aurora<br>git init --bare aurora.git      //这里 git init 是初始化空仓库的意思，而参数 --bare 是代表创建裸仓库，这个参数一定记得带上<br></code></pre></td></tr></table></figure><h1 id="三、服务器上的裸仓库克隆"><a href="#三、服务器上的裸仓库克隆" class="headerlink" title="三、服务器上的裸仓库克隆"></a>三、服务器上的裸仓库克隆</h1><p>先确保本地是否安装git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/www<br>git <span class="hljs-built_in">clone</span> git-server:/opt/git/aurora/aurora.git aurora       //其中的git-server即你服务器的公网IP地址<br></code></pre></td></tr></table></figure><p><em>在这里如果没有配置公钥的话，会提示输入密码，这样每次就比较麻烦了，所以这里补充一下配置公钥：</em></p><h1 id="配置公钥"><a href="#配置公钥" class="headerlink" title="配置公钥"></a>配置公钥</h1><h2 id="1-服务器创建一个用户"><a href="#1-服务器创建一个用户" class="headerlink" title="1.服务器创建一个用户"></a>1.服务器创建一个用户</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adduser git         //管理员帐户不需要加sudo<br></code></pre></td></tr></table></figure><h2 id="2-在服务器-git-用户文件夹配置信息"><a href="#2-在服务器-git-用户文件夹配置信息" class="headerlink" title="2.在服务器 git 用户文件夹配置信息"></a>2.在服务器 git 用户文件夹配置信息</h2><p>在<code>git</code>用户文件夹中，创建.ssh文件夹，在.ssh中touch authorized_keys文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir .ssh<br>touch .ssh/authorized_keys<br></code></pre></td></tr></table></figure><h2 id="3-用户生成key"><a href="#3-用户生成key" class="headerlink" title="3.用户生成key"></a>3.用户生成key</h2><p>在客户端生成两个文件，执行如下命令，根据提示输入默认文件名，执行下去就好</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa<br></code></pre></td></tr></table></figure><p>如图：<br><img src="/images/git/ssh-keygen -t rsa.png" ><br>这我是直接将秘钥文件生成在了当前用户目录下的<code>.ssh</code>目录下，也可以在外面生成之后在复制进来。<br>注意到里面多了一个config文件，这是用来配置远程服务器信息的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">host git-server <br>    user git<br>    hostname 114.67.141.xxx<br>    port 22 <br>    identityfile ~/.ssh/aurora<br></code></pre></td></tr></table></figure><ul><li>注意除第一行，其余要缩进一个tab</li><li>这里的git替换为自己之前创建key时输入的用户名</li><li>hostname 后面替换为你的服务器IP地址</li></ul><h2 id="4-将公钥追加到服务器git用户下的authorized-keys文件中"><a href="#4-将公钥追加到服务器git用户下的authorized-keys文件中" class="headerlink" title="4.将公钥追加到服务器git用户下的authorized_keys文件中"></a>4.将公钥追加到服务器<code>git</code>用户下的authorized_keys文件中</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/git/.ssh<br>vim authorized_keys<br></code></pre></td></tr></table></figure><p>将公钥的内容追加到此文件中<br><img src="/images/git/cat_authorized_keys.png" ></p><h2 id="5-重新Clone远程的代码仓库到本地"><a href="#5-重新Clone远程的代码仓库到本地" class="headerlink" title="5.重新Clone远程的代码仓库到本地"></a>5.重新Clone远程的代码仓库到本地</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/www<br>git <span class="hljs-built_in">clone</span> git-server:/opt/git/aurora/aurora.git aurora<br></code></pre></td></tr></table></figure><img src="/images/git/git-clone.png" ><ul><li>git-server：表示我们在config文件配置的服务器IP地址，直接写“git-server”即可，当然，你也可以修改config文件里的名字</li><li>/opt/git/aurora/aurora.git：这个是远程服务器的仓库地址，按照实际情况自行修改</li></ul><p>这样，会在客户端<code>/home/www</code>下创建一个名为aurora的文件夹（.git会被省略）。<br>我们可以做一个测试，在/home/www/aurora文件夹中添加一个文件，并提交。</p><p>推送到远程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push git-server:/opt/git/aurora/aurora.git master<br></code></pre></td></tr></table></figure><img src="/images/git/git-push.png" ><h1 id="实现自动同步到站点目录（www-aurora）"><a href="#实现自动同步到站点目录（www-aurora）" class="headerlink" title="实现自动同步到站点目录（www/aurora）"></a>实现自动同步到站点目录（www/aurora）</h1><p>刚才我们往远程仓库推送了readme.txt件，虽然提示推送成功，但是我们现在在服务器端还看不到效果，如果服务器能够每次在我们上传代码后就将代码直接同步到服务器代码目录就好了。</p><p>自动同步功能用到的是 git 的钩子功能：</p><p>服务器端：进入裸仓库：/opt/git/aurora/aurora.git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt/git/aurora/aurora.git<br></code></pre></td></tr></table></figure><p>创建post-receive文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> hooks<br>vim post-receive<br></code></pre></td></tr></table></figure><p>在里面添加如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>git --work-tree=/home/www/aurora checkout -f<br></code></pre></td></tr></table></figure><p>保存成功，退出，将该文件用户及用户组都设置成git。由于该文件其实就是一个shell文件，我们还应该为其设置可执行权限（同时将/home/www/aurora目录用户及用户组也设置为git，不然客户端会提示没有上传权限）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">chown git:git post-receive<br>chmod +x post-receive<br></code></pre></td></tr></table></figure><p>可以看到，之前提交的文件已经可以看到了</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>1.客户端中ssh登录，会默认读取用户目录下.ssh文件夹的config文件ssh配置信息。<br>2.不论客户端还是服务器端，生成的公钥.pub应拷贝到服务器上，私key自己使用。私钥一旦泄漏，任何人都可以通过该私钥提交代码。</p><h1 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h1><p>本文参考链接：<br><a href="http://www.jianshu.com/p/10b6a1ee7f64">干货 | 简单几步搭建一个远程git服务器</a><br><a href="http://blog.csdn.net/baidu_30000217/article/details/51327289"> 搭建服务器上的GIT并实现自动同步到站点目录（www）</a></p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【转】驼峰命名法和下划线风格的互转</title>
    <link href="/2017/05/22/php/%E9%A9%BC%E5%B3%B0%E5%91%BD%E5%90%8D%E6%B3%95%E5%92%8C%E4%B8%8B%E5%88%92%E7%BA%BF%E9%A3%8E%E6%A0%BC%E7%9A%84%E4%BA%92%E8%BD%AC/"/>
    <url>/2017/05/22/php/%E9%A9%BC%E5%B3%B0%E5%91%BD%E5%90%8D%E6%B3%95%E5%92%8C%E4%B8%8B%E5%88%92%E7%BA%BF%E9%A3%8E%E6%A0%BC%E7%9A%84%E4%BA%92%E8%BD%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="php方法实现"><a href="#php方法实现" class="headerlink" title="php方法实现"></a>php方法实现</h1><p>1、驼峰命名法转下划线风格 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//驼峰命名法转下划线风格  </span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">camelToUnderLine</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;  <br>    <br>  <span class="hljs-variable">$array</span> = <span class="hljs-keyword">array</span>();  <br>  <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;strlen(<span class="hljs-variable">$str</span>);<span class="hljs-variable">$i</span>++)&#123;  <br>      <span class="hljs-keyword">if</span>(<span class="hljs-variable">$str</span>[<span class="hljs-variable">$i</span>] == strtolower(<span class="hljs-variable">$str</span>[<span class="hljs-variable">$i</span>]))&#123;  <br>          <span class="hljs-variable">$array</span>[] = <span class="hljs-variable">$str</span>[<span class="hljs-variable">$i</span>];  <br>      &#125;<span class="hljs-keyword">else</span>&#123;  <br>          <span class="hljs-keyword">if</span>(<span class="hljs-variable">$i</span>&gt;<span class="hljs-number">0</span>)&#123;  <br>              <span class="hljs-variable">$array</span>[] = <span class="hljs-string">&#x27;_&#x27;</span>;  <br>          &#125;  <br>          <span class="hljs-variable">$array</span>[] = strtolower(<span class="hljs-variable">$str</span>[<span class="hljs-variable">$i</span>]);  <br>      &#125;  <br>  &#125;  <br>    <br>  <span class="hljs-variable">$result</span> = implode(<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$array</span>);  <br>  <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> camelToUnderLine(<span class="hljs-string">&#x27;camelToUnderLine&#x27;</span>);<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">string(19) <span class="hljs-string">&quot;camel_to_under_line&quot;</span> <br></code></pre></td></tr></table></figure><p>2、下划线风格转驼峰命名法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//下划线风格转驼峰命名法    </span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">underLineToCamel</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;  <br>    <br>  <span class="hljs-variable">$array</span> = explode(<span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-variable">$str</span>);  <br>  <span class="hljs-variable">$result</span> = <span class="hljs-string">&#x27;&#x27;</span>;  <br>  <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$array</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>)&#123;  <br>      <span class="hljs-variable">$result</span>.= ucfirst(<span class="hljs-variable">$value</span>);  <br>  &#125;  <br>    <br>  <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;  <br>&#125; <br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> underLineToCamel(<span class="hljs-string">&#x27;under_line_to_camel&#x27;</span>);<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">string(16) <span class="hljs-string">&quot;UnderLineToCamel&quot;</span> <br></code></pre></td></tr></table></figure><h1 id="正则方法实现"><a href="#正则方法实现" class="headerlink" title="正则方法实现"></a>正则方法实现</h1><p>1、如何在php中把驼峰样式的字符串转换成下划线样式的字符串。例：输入是FooBar的话，输出则是foo_bar。<br>以下是用正则的方式去完成，既然用到正则，方法肯定就不只一种，我们看下下面的方式</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> strtolower(preg_replace(<span class="hljs-string">&#x27;/(?&lt;=[a-z])([A-Z])/&#x27;</span>, <span class="hljs-string">&#x27;_$1&#x27;</span>, <span class="hljs-string">&#x27;fooBar&#x27;</span>));<br><span class="hljs-comment">//output：foo_bar</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> strtolower(preg_replace(<span class="hljs-string">&#x27;/(?&lt;=[a-z])([A-Z])/&#x27;</span>, <span class="hljs-string">&#x27;_$1&#x27;</span>, <span class="hljs-string">&#x27;foo&#x27;</span>));<br><span class="hljs-comment">//output：foo</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> strtolower(preg_replace(<span class="hljs-string">&#x27;/(?&lt;=[a-z])([A-Z])/&#x27;</span>, <span class="hljs-string">&#x27;_$1&#x27;</span>, <span class="hljs-string">&#x27;fooBarB&#x27;</span>));<br><span class="hljs-comment">//output：foo_bar_b</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br></code></pre></td></tr></table></figure><p>下面我们来解释下，上面正则的意思。具体正则的基本知识，这里篇幅有限就不具体介绍了，文章末尾会放出几篇写的比较好的正则表达式的文章。</p><p>上面的正则里面主要用到了正则表达式中的<code>环视边界匹配</code>的语法。具体定义如下(摘抄)：</p><p><code>环视的字面意思就是左右看看，需要左右符合一些条件，本质上，它也是匹配边界，对边界有一些要求，这个要求是针对左边或右边的字符串的，根据要求不同，分为四种环视：</code></p><div class="bs-callout bs-callout-info">- 肯定顺序环视，语法是`(?=...)`，要求右边的字符串匹配指定的表达式，比如表达式abc(?=def)，(?=def)在字符c右面，即匹配c右面的边界，对这个边界的要求是，它的右边有def，比如abcdef，如果没有，比如abcd，则不匹配；<ul><li><p>否定顺序环视，语法是<code>(?!...)</code>，要求右边的字符串不能匹配指定的表达式，比如表达式s(?!ing)，匹配一般的s，但不匹配后面有ing的s；</p></li><li><p>肯定逆序环视，语法是<code>(?&lt;=...)</code>，要求左边的字符串匹配指定的表达式，比如表达式(?&lt;=\s)abc，(?&lt;=\s)在字符a左边，即匹配a左边的边界，对这个边界的要求是，它的左边必须是空白字符；</p></li><li><p>否定逆序环视，语法是<code>(?&lt;!...)</code>，要求左边的字符串不能匹配指定的表达式，比如表达式(?&lt;!\w)cat，(?&lt;!\w)在字符c左边，即匹配c左边的边界，对这个边界的要求是，它的左边不能是单词字符。</p></div></li></ul><p><code>可以看出，环视也使用括号()，不过，它不是分组，不占用分组编号。</code></p><p>继续回到我们上面的正则表达式，第一个小括号<code>(?&lt;=[a-z])</code>，这是肯定逆序环视的语法，要求匹配的字符串的左边必须有小写的字母。第二个小括号则是一个分组，匹配大写的字母，注意正则中的分组编号是从1开始的，这和我们传统编程下标一般是从0开始不同。而第一个小括号本身就是语法，其不占用分组编号，所以后面的$1，则是匹配的第二个小括号中的内容，并将其前面添加一个_符号，最后再整体将整个字符串转换成小写。</p><p>既然我们已经能把驼峰法转为下划线的样式了，如果反过来又该怎办呢？</p><p>2、如何在php中把下划线样式的字符串转换成驼峰样式的字符串。例：输入是foo_bar的话，输出则是FooBar</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$str</span> = preg_replace_callback(<span class="hljs-string">&#x27;/_+([a-z])/&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-variable">$matches</span></span>)</span>&#123;<br>    print_r(<span class="hljs-variable">$matches</span>);  <span class="hljs-comment">//Array ( [0] =&gt; _b [1] =&gt; b )</span><br>    <span class="hljs-keyword">return</span> strtoupper(<span class="hljs-variable">$matches</span>[<span class="hljs-number">1</span>]);<br>&#125;,<span class="hljs-string">&#x27;foo_bar&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$str</span>;  <span class="hljs-comment">//fooBar</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-variable">$str</span> = preg_replace_callback(<span class="hljs-string">&#x27;/_+([a-z])/&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-variable">$matches</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> strtoupper(<span class="hljs-variable">$matches</span>[<span class="hljs-number">1</span>]);<br>&#125;,<span class="hljs-string">&#x27;foo&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$str</span>;  <span class="hljs-comment">//foo</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-variable">$str</span> = preg_replace_callback(<span class="hljs-string">&#x27;/_+([a-z])/&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-variable">$matches</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> strtoupper(<span class="hljs-variable">$matches</span>[<span class="hljs-number">1</span>]);<br>&#125;,<span class="hljs-string">&#x27;foo_bar_b&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$str</span>;  <span class="hljs-comment">//fooBarB</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br></code></pre></td></tr></table></figure><p>这里我们用到了<code>preg_replace_callback</code>函数，该函数执行一个正则表达式搜索并且使用一个回调进行替换。换言之，就是第一个参数是正则表达式，第二个参数是一个匹配到结果的回调函数，第三个参数是需要匹配的字符串。</p><p class="note">注意，回调函数具体什么时候调用，是每次匹配到结果则调用，调用次数不只为一次，匹配不到则不调用。并且该回调函数的参数是匹配的结果，$matches[0]是完整的匹配，$matches[1]是第一个捕获子组的匹配，以此类推。且回调函数需要把更改的结果return出去，不然则忽略捕获的字符串。</p><h1 id="正则速查表"><a href="#正则速查表" class="headerlink" title="正则速查表"></a>正则速查表</h1><p>下面，我们用表格的形式简要汇总下正则表达式的语法。<br><img width="611" height="270" src="/images/regular/single_character.jpg" /><br><img width="607" height="672" src="/images/regular/character_array.jpg" /><br><img width="604" height="316" src="/images/regular/quantifier.jpg" /><br><img width="609" height="408" src="/images/regular/grouping.jpg" /><br><img width="606" height="627" src="/images/regular/boundary_ring.jpg" /></p><p>下面是几篇比较值得学习的正则表达式的文章，本文部分参考也来源于此。</p><p><a href="https://deerchao.net/tutorials/regex/regex-1.htm">正则表达式30分钟入门教程</a><br><a href="http://www.cnblogs.com/swiftma/p/6947316.html">计算机程序的思维逻辑 (88) - 正则表达式 (上)</a></p><p><a href="http://www.cnblogs.com/kangjianrong/p/7065079.html">本文转载：php 把驼峰样式的字符串转换成下划线样式的字符串</a></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webuploder+PHP实现大文件断点（切片）续传</title>
    <link href="/2017/05/08/php/webuploder+PHP%E5%AE%9E%E7%8E%B0%E5%A4%A7%E6%96%87%E4%BB%B6%E6%96%AD%E7%82%B9%EF%BC%88%E5%88%87%E7%89%87%EF%BC%89%E7%BB%AD%E4%BC%A0/"/>
    <url>/2017/05/08/php/webuploder+PHP%E5%AE%9E%E7%8E%B0%E5%A4%A7%E6%96%87%E4%BB%B6%E6%96%AD%E7%82%B9%EF%BC%88%E5%88%87%E7%89%87%EF%BC%89%E7%BB%AD%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>做手机游戏运营难免会遇到上传超大APP，但受限于宽带、http响应时间等因素，导致文件上传不成功。在网上搜罗了一圈，终于在github上找到了<a href="https://github.com/kazaff">kazaff</a>大神对于<code>webuploader</code><a href="http://blog.kazaff.me/2014/11/14/%E8%81%8A%E8%81%8A%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/">大文件上传</a>的详细介绍。</p><p><em>下面整理一下自己的实现过程吧（kazaff已做了详细介绍，这里只是借鉴一下）：</em><br>文件目录结构：<br><img src='/images/webuploader/webuploader_php_menu.png' /></p><h1 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a><code>index.html</code></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>WebUploader<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-1.11.2.min.js&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/webuploader.js&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/md5.js&quot;</span>  <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/webuploader.css&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">            <span class="hljs-selector-class">.itemDel</span>, <span class="hljs-selector-class">.itemStop</span>, <span class="hljs-selector-class">.itemUpload</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">15px</span>;</span><br><span class="css">                <span class="hljs-attribute">color</span>: blue;</span><br><span class="css">                <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-id">#theList</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">80%</span>;</span><br><span class="css">                <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-id">#theList</span> <span class="hljs-selector-class">.itemStop</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">display</span>: none;</span><br><span class="css">            &#125;</span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;uploader&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;theList&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;picker&quot;</span>&gt;</span>选择文件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:red&quot;</span>&gt;</span>已实现大文件分段，FTP上传需要连接ftp服务器。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/bigFileUploader.js&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><img src='/images/webuploader/index_html.png' /><h1 id="bigFileUploader-js"><a href="#bigFileUploader-js" class="headerlink" title="bigFileUploader.js"></a><code>bigFileUploader.js</code></h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> userInfo = &#123;<span class="hljs-attr">userId</span>:<span class="hljs-string">&quot;up_file&quot;</span>, <span class="hljs-attr">md5</span>:<span class="hljs-string">&quot;&quot;</span>&#125;;   <span class="hljs-comment">//用户会话信息</span><br><span class="hljs-keyword">var</span> chunkSize =  <span class="hljs-number">2</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>;        <span class="hljs-comment">//分块大小</span><br><span class="hljs-keyword">var</span> uniqueFileName = <span class="hljs-literal">null</span>;          <span class="hljs-comment">//文件唯一标识符</span><br><span class="hljs-keyword">var</span> md5Mark = <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">var</span> backEndUrl = <span class="hljs-string">&#x27;serverPHP/upload.php&#x27;</span>;<br><br>WebUploader.Uploader.register(&#123;<br>    <span class="hljs-string">&quot;before-send-file&quot;</span>: <span class="hljs-string">&quot;beforeSendFile&quot;</span><br>    , <span class="hljs-string">&quot;before-send&quot;</span>: <span class="hljs-string">&quot;beforeSend&quot;</span><br>    , <span class="hljs-string">&quot;after-send-file&quot;</span>: <span class="hljs-string">&quot;afterSendFile&quot;</span><br>&#125;, &#123;<br>    <span class="hljs-attr">beforeSendFile</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">file</span>) </span>&#123;<br>        <span class="hljs-comment">//秒传验证</span><br>        <span class="hljs-keyword">var</span> task = <span class="hljs-keyword">new</span> $.Deferred();<br>        <span class="hljs-keyword">var</span> start = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();<br>        (<span class="hljs-keyword">new</span> WebUploader.Uploader()).md5File(file, <span class="hljs-number">0</span>, <span class="hljs-number">10</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>).progress(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">percentage</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(percentage);<br>        &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;总耗时: &quot;</span> + ((<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime()) - start) / <span class="hljs-number">1000</span>);<br><br>            md5Mark = val;<br>            userInfo.md5 = val;<br><br>            $.ajax(&#123;<br>                <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>                <span class="hljs-attr">url</span>: backEndUrl,<br>                <span class="hljs-attr">data</span>: &#123;<br>                    <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;md5Check&quot;</span>,<br>                    <span class="hljs-attr">md5</span>: val<br>                &#125;,<br>                <span class="hljs-attr">cache</span>: <span class="hljs-literal">false</span>,<br>                <span class="hljs-attr">timeout</span>: <span class="hljs-number">1000</span>, <span class="hljs-comment">//todo 超时的话，只能认为该文件不曾上传过</span><br>                <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span><br>            &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data, textStatus, jqXHR</span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(data, <span class="hljs-number">1111</span>);<br>                <span class="hljs-keyword">if</span> (data.ifExist) &#123;   <span class="hljs-comment">//若存在，这返回失败给WebUploader，表明该文件不需要上传</span><br>                    task.reject();<br><br>                    uploader.skipFile(file);<br>                    file.path = data.path;<br>                    UploadComlate(file);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    task.resolve();<br>                    <span class="hljs-comment">//拿到上传文件的唯一名称，用于断点续传</span><br>                    uniqueFileName = md5(<span class="hljs-string">&#x27;&#x27;</span> + userInfo.userId + file.name + file.type + file.lastModifiedDate + file.size);<br>                &#125;<br>            &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">jqXHR, textStatus, errorThrown</span>) </span>&#123;    <span class="hljs-comment">//任何形式的验证失败，都触发重新上传</span><br>                task.resolve();<br>                <span class="hljs-comment">//拿到上传文件的唯一名称，用于断点续传</span><br>                uniqueFileName = md5(<span class="hljs-string">&#x27;&#x27;</span> + userInfo.userId + file.name + file.type + file.lastModifiedDate + file.size);<br>            &#125;);<br>        &#125;);<br>        <span class="hljs-keyword">return</span> $.when(task);<br>    &#125;,<br>    <span class="hljs-attr">beforeSend</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">block</span>) </span>&#123;<br>        <span class="hljs-comment">//分片验证是否已传过，用于断点续传</span><br>        <span class="hljs-keyword">var</span> task = <span class="hljs-keyword">new</span> $.Deferred();<br>        $.ajax(&#123;<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>            <span class="hljs-attr">url</span>: backEndUrl,<br>            <span class="hljs-attr">data</span>: &#123;<br>                <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;chunkCheck&quot;</span>,<br>                <span class="hljs-attr">name</span>: uniqueFileName,<br>                <span class="hljs-attr">chunkIndex</span>: block.chunk,<br>                <span class="hljs-attr">size</span>: block.end - block.start<br>            &#125;,<br>            <span class="hljs-attr">cache</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-attr">timeout</span>: <span class="hljs-number">1000</span>, <span class="hljs-comment">//todo 超时的话，只能认为该分片未上传过</span><br>            <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span><br>        &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data, textStatus, jqXHR</span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (data.ifExist) &#123;   <span class="hljs-comment">//若存在，返回失败给WebUploader，表明该分块不需要上传</span><br>                task.reject();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                task.resolve();<br>            &#125;<br>        &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">jqXHR, textStatus, errorThrown</span>) </span>&#123;    <span class="hljs-comment">//任何形式的验证失败，都触发重新上传</span><br>            task.resolve();<br>        &#125;);<br><br>        <span class="hljs-keyword">return</span> $.when(task);<br>    &#125;,<br>    <span class="hljs-attr">afterSendFile</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">file</span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> chunksTotal = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> ((chunksTotal = <span class="hljs-built_in">Math</span>.ceil(file.size / chunkSize)) &gt; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">//合并请求</span><br>            <span class="hljs-keyword">var</span> task = <span class="hljs-keyword">new</span> $.Deferred();<br>            $.ajax(&#123;<br>                <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>                <span class="hljs-attr">url</span>: backEndUrl,<br>                <span class="hljs-attr">data</span>: &#123;<br>                    <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;chunksMerge&quot;</span>,<br>                    <span class="hljs-attr">name</span>: uniqueFileName,<br>                    <span class="hljs-attr">chunks</span>: chunksTotal,<br>                    <span class="hljs-attr">ext</span>: file.ext,<br>                    <span class="hljs-attr">md5</span>: md5Mark<br>                &#125;,<br>                <span class="hljs-attr">cache</span>: <span class="hljs-literal">false</span>,<br>                <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span><br>            &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data, textStatus, jqXHR</span>) </span>&#123;<br><br>                <span class="hljs-comment">//todo 检查响应是否正常</span><br>                <span class="hljs-comment">//console.log(data);</span><br>                task.resolve();<br>                file.path = data.path;<br>                UploadComlate(file, data);<br><br>            &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">jqXHR, textStatus, errorThrown</span>) </span>&#123;<br>                task.reject();<br>            &#125;);<br><br>            <span class="hljs-keyword">return</span> $.when(task);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            UploadComlate(file);<br>        &#125;<br>    &#125;<br>&#125;);<br><br><span class="hljs-keyword">var</span> uploader = WebUploader.create(&#123;<br>    <span class="hljs-attr">swf</span>: <span class="hljs-string">&quot;Uploader.swf&quot;</span>,<br>    <span class="hljs-attr">server</span>: backEndUrl,<br>    <span class="hljs-attr">pick</span>: <span class="hljs-string">&quot;#picker&quot;</span>,<br>    <span class="hljs-attr">resize</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">dnd</span>: <span class="hljs-string">&quot;#theList&quot;</span>,<br>    <span class="hljs-attr">paste</span>: <span class="hljs-built_in">document</span>.body,<br>    <span class="hljs-attr">disableGlobalDnd</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">thumb</span>: &#123;<br>        <span class="hljs-attr">width</span>: <span class="hljs-number">100</span>,<br>        <span class="hljs-attr">height</span>: <span class="hljs-number">100</span>,<br>        <span class="hljs-attr">quality</span>: <span class="hljs-number">70</span>,<br>        <span class="hljs-attr">allowMagnify</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">crop</span>: <span class="hljs-literal">true</span><br>        <span class="hljs-comment">//, type: &quot;image/jpeg&quot;</span><br>    &#125;,<br>    <span class="hljs-comment">/*, compress: &#123;</span><br><span class="hljs-comment">     quality: 90</span><br><span class="hljs-comment">     , allowMagnify: false</span><br><span class="hljs-comment">     , crop: false</span><br><span class="hljs-comment">     , preserveHeaders: true</span><br><span class="hljs-comment">     , noCompressIfLarger: true</span><br><span class="hljs-comment">     ,compressSize: 100000</span><br><span class="hljs-comment">     &#125;,*/</span><br>    <span class="hljs-attr">compress</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">prepareNextFile</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">chunked</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">chunkSize</span>: chunkSize,<br>    <span class="hljs-attr">formData</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> $.extend(<span class="hljs-literal">true</span>, &#123; &#125;, userInfo);<br>    &#125;,<br>    <span class="hljs-attr">threads</span>:<span class="hljs-number">1</span>,<br>    <span class="hljs-attr">fileNumLimit</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">fileSingleSizeLimit</span>: <span class="hljs-number">1000</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>,<br>    <span class="hljs-attr">duplicate</span>: <span class="hljs-literal">true</span><br>&#125;);<br><br>uploader.on(<span class="hljs-string">&quot;fileQueued&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">file</span>) </span>&#123;<br><br>    $(<span class="hljs-string">&quot;#theList&quot;</span>).append(<span class="hljs-string">&#x27;&lt;li id=&quot;&#x27;</span> + file.id + <span class="hljs-string">&#x27;&quot;&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;img /&gt;&lt;span&gt;&#x27;</span> + file.name + <span class="hljs-string">&#x27;&lt;/span&gt;&lt;span class=&quot;itemUpload&quot;&gt;上传&lt;/span&gt;&lt;span class=&quot;itemStop&quot;&gt;暂停&lt;/span&gt;&lt;span class=&quot;itemDel&quot;&gt;删除&lt;/span&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;div class=&quot;percentage&quot;&gt;&lt;/div&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;/li&gt;&#x27;</span>);<br><br>    <span class="hljs-keyword">var</span> $img = $(<span class="hljs-string">&quot;#&quot;</span> + file.id).find(<span class="hljs-string">&quot;img&quot;</span>);<br><br>     uploader.makeThumb(file, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, src</span>) </span>&#123;<br>     <span class="hljs-keyword">if</span> (error) &#123;<br>     $img.replaceWith(<span class="hljs-string">&quot;&lt;span&gt;不能预览&lt;/span&gt;&quot;</span>);<br>     &#125;<br><br>     $img.attr(<span class="hljs-string">&quot;src&quot;</span>, src);<br>     &#125;);<br><br>&#125;);<br><br>$(<span class="hljs-string">&quot;#theList&quot;</span>).on(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-string">&quot;.itemUpload&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    uploader.upload();<br>    <span class="hljs-comment">//&quot;上传&quot;--&gt;&quot;暂停&quot;</span><br>    $(<span class="hljs-built_in">this</span>).hide();<br>    $(<span class="hljs-string">&quot;.itemStop&quot;</span>).show();<br>&#125;);<br><br>$(<span class="hljs-string">&quot;#theList&quot;</span>).on(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-string">&quot;.itemStop&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    uploader.stop(<span class="hljs-literal">true</span>);<br>    <span class="hljs-comment">//&quot;暂停&quot;--&gt;&quot;上传&quot;</span><br>    $(<span class="hljs-built_in">this</span>).hide();<br>    $(<span class="hljs-string">&quot;.itemUpload&quot;</span>).show();<br>&#125;);<br><br><span class="hljs-comment">//todo 如果要删除的文件正在上传（包括暂停），则需要发送给后端一个请求用来清除服务器端的缓存文件</span><br>$(<span class="hljs-string">&quot;#theList&quot;</span>).on(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-string">&quot;.itemDel&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    uploader.removeFile($(<span class="hljs-built_in">this</span>).parent().attr(<span class="hljs-string">&quot;id&quot;</span>));   <span class="hljs-comment">//从上传文件列表中删除</span><br>    $(<span class="hljs-built_in">this</span>).parent().remove();  <span class="hljs-comment">//从上传列表dom中删除</span><br>&#125;);<br><br>uploader.on(<span class="hljs-string">&quot;uploadProgress&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">file, percentage</span>) </span>&#123;<br>    $(<span class="hljs-string">&quot;#&quot;</span> + file.id + <span class="hljs-string">&quot; .percentage&quot;</span>).text(percentage * <span class="hljs-number">100</span> + <span class="hljs-string">&quot;%&quot;</span>);<br>&#125;);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">UploadComlate</span>(<span class="hljs-params">file, data</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(file, data);<br>    <span class="hljs-keyword">if</span>(file &amp;&amp; data &amp;&amp; data.type == <span class="hljs-number">1</span>)&#123;<br>        $.ajax(&#123;<br>            <span class="hljs-attr">url</span>: backEndUrl,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>            <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span>,<br>            <span class="hljs-attr">cache</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-attr">data</span>:&#123;<br>                <span class="hljs-attr">act</span>: <span class="hljs-string">&quot;upload&quot;</span>,<br>                <span class="hljs-attr">real_name</span>: file.name,<br>                <span class="hljs-attr">tmp_name</span>: data.path,<br>                <span class="hljs-attr">code</span>: data.type,<br>                <span class="hljs-attr">size</span>: file.size<br>            &#125;,<br>            <span class="hljs-attr">success</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>                <span class="hljs-keyword">if</span>(data.code == <span class="hljs-number">1</span>)&#123;<br>                    <span class="hljs-comment">/* $(&quot;#app_url&quot;).val(data.url);</span><br><span class="hljs-comment">                    $(&quot;#app_size&quot;).val(data.size); */</span><br><br>                    $(<span class="hljs-string">&quot;#&quot;</span> + file.id + <span class="hljs-string">&quot; .percentage&quot;</span>).text(<span class="hljs-string">&quot;上传完毕&quot;</span>).css(&#123;<span class="hljs-string">&#x27;color&#x27;</span>:<span class="hljs-string">&#x27;red&#x27;</span>&#125;);<br>                    $(<span class="hljs-string">&quot;.itemStop&quot;</span>).hide();<br>                    $(<span class="hljs-string">&quot;.itemUpload&quot;</span>).hide();<br>                    $(<span class="hljs-string">&quot;.itemDel&quot;</span>).hide();<br>                &#125;<br>                <span class="hljs-keyword">if</span>(data.code == <span class="hljs-number">2</span>)&#123;<br>                    $(<span class="hljs-string">&quot;#&quot;</span> + file.id + <span class="hljs-string">&quot; .percentage&quot;</span>).text(data.mes).css(&#123;<span class="hljs-string">&#x27;color&#x27;</span>:<span class="hljs-string">&#x27;red&#x27;</span>&#125;);<br>                &#125;<br>            &#125;,<br>            <span class="hljs-attr">error</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                $(<span class="hljs-string">&quot;#&quot;</span> + file.id + <span class="hljs-string">&quot; .percentage&quot;</span>).text(<span class="hljs-string">&#x27;网络错误！&#x27;</span>).css(&#123;<span class="hljs-string">&#x27;color&#x27;</span>:<span class="hljs-string">&#x27;red&#x27;</span>&#125;);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="upload-php"><a href="#upload-php" class="headerlink" title="upload.php"></a><code>upload.php</code></h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>@define(<span class="hljs-string">&#x27;ROOT&#x27;</span>, dirname(dirname(<span class="hljs-keyword">__FILE__</span>)));<br><span class="hljs-keyword">include_once</span>(<span class="hljs-string">&#x27;./FileUpload.php&#x27;</span>);<br><span class="hljs-keyword">include_once</span>(<span class="hljs-string">&#x27;./Ftp.php&#x27;</span>);<br><br><br><span class="hljs-keyword">if</span>(@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;act&#x27;</span>] == <span class="hljs-string">&#x27;upload&#x27;</span>)&#123;<br>    <span class="hljs-variable">$data</span> = <span class="hljs-variable">$_POST</span>;<br>    <span class="hljs-variable">$arr</span> = uploadRunApk(<span class="hljs-variable">$data</span>, <span class="hljs-string">&#x27;upload/&#x27;</span> . date(<span class="hljs-string">&quot;Y&quot;</span>) . <span class="hljs-string">&#x27;/&#x27;</span> . date(<span class="hljs-string">&#x27;m&#x27;</span>) . <span class="hljs-string">&#x27;/&#x27;</span>);<br>    <span class="hljs-keyword">echo</span> json_encode(<span class="hljs-variable">$arr</span>);<br>    <span class="hljs-keyword">exit</span>;<br>&#125;<br><br><span class="hljs-variable">$arr</span> = uploadChunked();<br><span class="hljs-keyword">echo</span> json_encode(<span class="hljs-variable">$arr</span>);<br><span class="hljs-keyword">exit</span>;<br><br><span class="hljs-comment">//通过FTP上传到指定位置(这里以上传apk文件为例)</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">uploadRunApk</span>(<span class="hljs-params"><span class="hljs-variable">$file</span>, <span class="hljs-variable">$save_path</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$_SC</span>;<br>    <span class="hljs-variable">$max_file_size_in_bytes</span> = <span class="hljs-number">1073741824</span>;                <span class="hljs-comment">// 1024M in bytes</span><br>    <span class="hljs-comment">//var_dump($file);exit;</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;mes&#x27;</span> =&gt; <span class="hljs-string">&#x27;找不到文件&#x27;</span>, <span class="hljs-string">&#x27;code&#x27;</span> =&gt; <span class="hljs-number">2</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&quot;tmp_name&quot;</span>])) &#123;     <span class="hljs-comment">//is_uploaded_file()</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;mes&#x27;</span> =&gt; <span class="hljs-string">&#x27;文件无法上传&#x27;</span>, <span class="hljs-string">&#x27;code&#x27;</span> =&gt; <span class="hljs-number">2</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;real_name&#x27;</span>])) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;mes&#x27;</span> =&gt; <span class="hljs-string">&#x27;文件名不存在&#x27;</span>, <span class="hljs-string">&#x27;code&#x27;</span> =&gt; <span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-comment">//$file_size = @filesize($file[&quot;tmp_name&quot;]);</span><br>    <span class="hljs-variable">$file_size</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;size&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$file_size</span> || <span class="hljs-variable">$file_size</span> &gt; <span class="hljs-variable">$max_file_size_in_bytes</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;mes&#x27;</span> =&gt; <span class="hljs-string">&#x27;文件size太大&#x27;</span>, <span class="hljs-string">&#x27;code&#x27;</span> =&gt; <span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file_size</span> &lt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;mes&#x27;</span> =&gt; <span class="hljs-string">&#x27;文件大小不能为0&#x27;</span>, <span class="hljs-string">&#x27;code&#x27;</span> =&gt; <span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-variable">$path_info</span> = pathinfo(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;real_name&#x27;</span>]);<br>    <span class="hljs-variable">$file_extension</span> = <span class="hljs-variable">$path_info</span>[<span class="hljs-string">&quot;extension&quot;</span>];<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$file_extension</span> != <span class="hljs-string">&#x27;apk&#x27;</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;mes&#x27;</span> =&gt; <span class="hljs-string">&#x27;文件类型错误:&#x27;</span>, <span class="hljs-string">&#x27;code&#x27;</span> =&gt; <span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-comment">//$fmd5 = md5_file($file[&quot;tmp_name&quot;]);</span><br>    <span class="hljs-comment">//$file_name = $save_path . $fmd5 . &#x27;.&#x27; . $file_extension;</span><br>    <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$save_path</span> . <span class="hljs-variable">$path_info</span>[<span class="hljs-string">&#x27;filename&#x27;</span>] . <span class="hljs-string">&#x27;.&#x27;</span> .<span class="hljs-variable">$file_extension</span>;<br>    <span class="hljs-variable">$ftp</span> = <span class="hljs-keyword">new</span> Ftp(<span class="hljs-variable">$ftp_host</span>, <span class="hljs-variable">$ftp_port</span>, <span class="hljs-variable">$ftp_user</span>, <span class="hljs-variable">$ftp_pass</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$ftp</span>-&gt;up_file(<span class="hljs-variable">$file</span>[<span class="hljs-string">&quot;tmp_name&quot;</span>], <span class="hljs-variable">$file_name</span>)) &#123;<br>        <span class="hljs-variable">$show_name</span> = substr(<span class="hljs-variable">$file_name</span>, strrpos(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;mes&#x27;</span> =&gt; <span class="hljs-string">&#x27;文件上传成功&#x27;</span>, <span class="hljs-string">&#x27;code&#x27;</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;url&#x27;</span> =&gt; <span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;size&#x27;</span> =&gt; <span class="hljs-variable">$file_size</span>, <span class="hljs-string">&#x27;show_name&#x27;</span> =&gt; <span class="hljs-variable">$show_name</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;mes&#x27;</span> =&gt; <span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;code&#x27;</span> =&gt; <span class="hljs-number">2</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">uploadChunked</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//关闭缓存</span><br>    header(<span class="hljs-string">&quot;Expires: Mon, 26 Jul 1997 05:00:00 GMT&quot;</span>);<br>    header(<span class="hljs-string">&quot;Last-Modified: &quot;</span> . gmdate(<span class="hljs-string">&quot;D, d M Y H:i:s&quot;</span>) . <span class="hljs-string">&quot; GMT&quot;</span>);<br>    header(<span class="hljs-string">&quot;Cache-Control: no-store, no-cache, must-revalidate&quot;</span>);<br>    header(<span class="hljs-string">&quot;Cache-Control: post-check=0, pre-check=0&quot;</span>, <span class="hljs-literal">false</span>);<br>    header(<span class="hljs-string">&quot;Pragma: no-cache&quot;</span>);<br><br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$_SC</span>;<br>    <span class="hljs-variable">$uploader</span> = <span class="hljs-keyword">new</span> FileUpload(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;apk&#x27;</span>, <span class="hljs-string">&#x27;jpg&#x27;</span>, <span class="hljs-string">&#x27;png&#x27;</span>, <span class="hljs-string">&#x27;zip&#x27;</span>));<br><br>    <span class="hljs-comment">//用于断点续传，验证指定分块是否已经存在，避免重复上传</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;status&#x27;</span>])) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;status&#x27;</span>] == <span class="hljs-string">&#x27;chunkCheck&#x27;</span>) &#123;<br>            <span class="hljs-variable">$target</span> = <span class="hljs-variable">$uploader</span>-&gt;path . <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;name&#x27;</span>] . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;chunkIndex&#x27;</span>];<br>            <span class="hljs-keyword">if</span> (file_exists(<span class="hljs-variable">$target</span>) &amp;&amp; filesize(<span class="hljs-variable">$target</span>) == <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;size&#x27;</span>]) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;ifExist&#x27;</span> =&gt; <span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;ifExist&#x27;</span> =&gt; <span class="hljs-number">0</span>);<br><br>        &#125; <span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;status&#x27;</span>] == <span class="hljs-string">&#x27;md5Check&#x27;</span>) &#123;<br>            <span class="hljs-comment">//todo 模拟持久层查询</span><br>            <span class="hljs-variable">$dataArr</span> = <span class="hljs-keyword">array</span>(<br>                <span class="hljs-string">&#x27;b0201e4d41b2eeefc7d3d355a44c6f5a&#x27;</span> =&gt; <span class="hljs-string">&#x27;kazaff2.jpg&#x27;</span><br>            );<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$dataArr</span>[<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;md5&#x27;</span>]])) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;ifExist&#x27;</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;path&#x27;</span> =&gt; <span class="hljs-variable">$dataArr</span>[<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;md5&#x27;</span>]]);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;ifExist&#x27;</span> =&gt; <span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;status&#x27;</span>] == <span class="hljs-string">&#x27;chunksMerge&#x27;</span>) &#123;<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$path</span> = <span class="hljs-variable">$uploader</span>-&gt;chunksMerge(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;name&#x27;</span>], <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;chunks&#x27;</span>], <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ext&#x27;</span>])) &#123;<br>                <span class="hljs-comment">//todo 把md5签名存入持久层，供未来的秒传验证</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;status&#x27;</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;path&#x27;</span> =&gt; <span class="hljs-variable">$path</span>, <span class="hljs-string">&#x27;type&#x27;</span> =&gt; <span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;status&#x27;</span> =&gt; <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;chunksMerge&#x27;</span> =&gt; <span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((<span class="hljs-variable">$path</span> = <span class="hljs-variable">$uploader</span>-&gt;upload(<span class="hljs-string">&#x27;file&#x27;</span>, <span class="hljs-variable">$_POST</span>)) !== <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;status&#x27;</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;path&#x27;</span> =&gt; <span class="hljs-variable">$path</span>, <span class="hljs-string">&#x27;type&#x27;</span> =&gt; <span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;status&#x27;</span> =&gt; <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;upload&#x27;</span> =&gt; <span class="hljs-number">0</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="FileUpload-php"><a href="#FileUpload-php" class="headerlink" title="FileUpload.php"></a><code>FileUpload.php</code></h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  PHP通用文件上传类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  支持单文件和多文件上传</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileUpload</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">//要配置的内容</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$path</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$allowtype</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$maxsize</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$israndname</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$originName</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$tmpFileName</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$fileType</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$fileSize</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$newFileName</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$errorNum</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$errorMess</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$isChunk</span> = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$indexOfChunk</span> = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$type</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;path = ROOT . <span class="hljs-string">&#x27;/upload&#x27;</span>;<br>        <span class="hljs-comment">//$this-&gt;allowtype = array(&#x27;jpg&#x27;, &#x27;jpeg&#x27;, &#x27;gif&#x27;, &#x27;png&#x27;, &#x27;mp4&#x27;, &#x27;mp3&#x27;, &#x27;zip&#x27;, &#x27;apk&#x27;, &#x27;pdf&#x27;, &#x27;rar&#x27;);</span><br>        <span class="hljs-keyword">$this</span>-&gt;allowtype = <span class="hljs-variable">$type</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;maxsize = <span class="hljs-number">1073741824</span>;                <span class="hljs-comment">// 1024M in bytes</span><br>        <span class="hljs-keyword">$this</span>-&gt;israndname = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用于设置成员属性($path, $allowtype, $maxsize, $israndname)</span><br><span class="hljs-comment">     * 可以通过连贯操作一次设置多个属性值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $key  成员属性（不区分大小写）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $val  为成员属性设置的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> object 返回自己对象$this, 可以用于连贯操作</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">set</span>(<span class="hljs-params"><span class="hljs-variable">$key</span>, <span class="hljs-variable">$val</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$key</span> = strtolower(<span class="hljs-variable">$key</span>);<br>        <span class="hljs-keyword">if</span> (array_key_exists(<span class="hljs-variable">$key</span>, get_class_vars(get_class(<span class="hljs-keyword">$this</span>)))) &#123;<br>            <span class="hljs-keyword">$this</span>-&gt;setOption(<span class="hljs-variable">$key</span>, <span class="hljs-variable">$val</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//为单个成员属性设置值</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setOption</span>(<span class="hljs-params"><span class="hljs-variable">$key</span>, <span class="hljs-variable">$val</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-variable">$key</span> = <span class="hljs-variable">$val</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$val</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/** 调用该方法上传文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $fileField</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $info</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> bool</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload</span>(<span class="hljs-params"><span class="hljs-variable">$fileField</span>, <span class="hljs-variable">$info</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//判断是否为分块上传</span><br>        <span class="hljs-keyword">$this</span>-&gt;checkChunk(<span class="hljs-variable">$info</span>);<br><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">$this</span>-&gt;checkFilePath(<span class="hljs-keyword">$this</span>-&gt;path))<br>        &#123;<br>            <span class="hljs-comment">//$this-&gt;errorMess = $this-&gt;getError();</span><br>            <span class="hljs-comment">//return false;</span><br>            show_message(<span class="hljs-keyword">$this</span>-&gt;getError(), <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">2</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//将文件上传的信息取出赋给变量</span><br>        <span class="hljs-variable">$name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$fileField</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br>        <span class="hljs-variable">$tmp_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$fileField</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>        <span class="hljs-variable">$size</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$fileField</span>][<span class="hljs-string">&#x27;size&#x27;</span>];<br>        <span class="hljs-variable">$error</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$fileField</span>][<span class="hljs-string">&#x27;error&#x27;</span>];<br><br>        <span class="hljs-comment">//设置文件信息</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;setFiles(<span class="hljs-variable">$name</span>, <span class="hljs-variable">$tmp_name</span>, <span class="hljs-variable">$size</span>, <span class="hljs-variable">$error</span>))<br>        &#123;<br>            <span class="hljs-comment">//如果是分块，则创建一个唯一名称的文件夹用来保存该文件的所有分块</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;isChunk) &#123;<br>                <span class="hljs-variable">$uploadDir</span> = <span class="hljs-keyword">$this</span>-&gt;path;<br>                <span class="hljs-variable">$tmpName</span> = <span class="hljs-keyword">$this</span>-&gt;setDirNameForChunks(<span class="hljs-variable">$info</span>);<br>                <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">$this</span>-&gt;checkFilePath(<span class="hljs-variable">$uploadDir</span> . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$tmpName</span>))<br>                &#123;<br>                    <span class="hljs-comment">//$this-&gt;errorMess = $this-&gt;getError();</span><br>                    <span class="hljs-comment">//return false;</span><br>                    show_message(<span class="hljs-keyword">$this</span>-&gt;getError(), <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">2</span>);<br>                &#125;<br>                <span class="hljs-comment">//创建一个对应的文件，用来记录上传分块文件的修改时间，用于清理长期未完成的垃圾分块</span><br>                touch(<span class="hljs-variable">$uploadDir</span> . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$tmpName</span> . <span class="hljs-string">&#x27;.tmp&#x27;</span>);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;checkFileSize() &amp;&amp; <span class="hljs-keyword">$this</span>-&gt;checkFileType()) &#123;<br>                <span class="hljs-keyword">$this</span>-&gt;setNewFileName();<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;copyFile()) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;path . <span class="hljs-keyword">$this</span>-&gt;newFileName;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//$this-&gt;errorMess = $this-&gt;getError();</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $uniqueFileName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $chunksTotal</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $fileExt</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> bool</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">chunksMerge</span>(<span class="hljs-params"><span class="hljs-variable">$uniqueFileName</span>, <span class="hljs-variable">$chunksTotal</span>, <span class="hljs-variable">$fileExt</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$targetDir</span> = <span class="hljs-keyword">$this</span>-&gt;path . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$uniqueFileName</span>;<br><br>        <span class="hljs-comment">//检查对应文件夹中的分块文件数量是否和总数保持一致</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$chunksTotal</span> &gt; <span class="hljs-number">1</span> &amp;&amp; (count(scandir(<span class="hljs-variable">$targetDir</span>)) - <span class="hljs-number">2</span>) == <span class="hljs-variable">$chunksTotal</span>)<br>        &#123;<br>            <span class="hljs-comment">//同步锁机制</span><br>            <span class="hljs-variable">$lockFd</span> = fopen(<span class="hljs-keyword">$this</span>-&gt;path . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$uniqueFileName</span> . <span class="hljs-string">&#x27;.lock&#x27;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br>            <span class="hljs-keyword">if</span> (!flock(<span class="hljs-variable">$lockFd</span>, LOCK_EX | LOCK_NB))<br>            &#123;<br>                fclose(<span class="hljs-variable">$lockFd</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br><br>            <span class="hljs-comment">//进行合并</span><br>            <span class="hljs-keyword">$this</span>-&gt;fileType = <span class="hljs-variable">$fileExt</span>;<br>            <span class="hljs-variable">$finalName</span> = <span class="hljs-keyword">$this</span>-&gt;path . <span class="hljs-string">&#x27;/&#x27;</span> . (<span class="hljs-keyword">$this</span>-&gt;setOption(<span class="hljs-string">&#x27;newFileName&#x27;</span>, <span class="hljs-keyword">$this</span>-&gt;proRandName()));<br>            <span class="hljs-variable">$file</span> = fopen(<span class="hljs-variable">$finalName</span>, <span class="hljs-string">&#x27;wb&#x27;</span>);<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-variable">$index</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$index</span> &lt; <span class="hljs-variable">$chunksTotal</span>; <span class="hljs-variable">$index</span>++)<br>            &#123;<br>                <span class="hljs-variable">$tmpFile</span> = <span class="hljs-variable">$targetDir</span> . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$index</span>;<br>                <span class="hljs-variable">$chunkFile</span> = fopen(<span class="hljs-variable">$tmpFile</span>, <span class="hljs-string">&#x27;rb&#x27;</span>);<br>                <span class="hljs-variable">$content</span> = fread(<span class="hljs-variable">$chunkFile</span>, filesize(<span class="hljs-variable">$tmpFile</span>));<br>                fclose(<span class="hljs-variable">$chunkFile</span>);<br>                fwrite(<span class="hljs-variable">$file</span>, <span class="hljs-variable">$content</span>);<br><br>                <span class="hljs-comment">//删除chunk文件</span><br>                unlink(<span class="hljs-variable">$tmpFile</span>);<br>            &#125;<br><br>            fclose(<span class="hljs-variable">$file</span>);<br><br>            <span class="hljs-comment">//删除chunk文件夹</span><br>            rmdir(<span class="hljs-variable">$targetDir</span>);<br>            unlink(<span class="hljs-keyword">$this</span>-&gt;path . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$uniqueFileName</span> . <span class="hljs-string">&#x27;.tmp&#x27;</span>);<br><br>            <span class="hljs-comment">//解锁</span><br>            flock(<span class="hljs-variable">$lockFd</span>, LOCK_UN);<br>            fclose(<span class="hljs-variable">$lockFd</span>);<br>            unlink(<span class="hljs-keyword">$this</span>-&gt;path . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$uniqueFileName</span> . <span class="hljs-string">&#x27;.lock&#x27;</span>);<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;path . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-keyword">$this</span>-&gt;newFileName;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//获取上传后的文件名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFileName</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;newFileName;<br>    &#125;<br><br>    <span class="hljs-comment">//上传失败后，调用该方法则返回，上传出错信息</span><br>    <span class="hljs-comment">/*public function getErrorMsg()</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        return $this-&gt;errorMess;</span><br><span class="hljs-comment">    &#125;*/</span><br><br>    <span class="hljs-comment">//设置上传出错信息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getError</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;上传文件&lt;span color=&#x27;red&#x27;&gt;<span class="hljs-subst">&#123;$this-&gt;originName&#125;</span>&lt;/span&gt;时出错：&quot;</span>;<br>        <span class="hljs-keyword">switch</span> (<span class="hljs-keyword">$this</span>-&gt;errorNum) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                <span class="hljs-variable">$str</span> .= <span class="hljs-string">&quot;没有文件被上传&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                <span class="hljs-variable">$str</span> .= <span class="hljs-string">&quot;文件只有部分被上传&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                <span class="hljs-variable">$str</span> .= <span class="hljs-string">&quot;上传文件的大小超过了HTML表单中MAX_FILE_SIZE选项指定的值&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                <span class="hljs-variable">$str</span> .= <span class="hljs-string">&quot;上传的文件超过了php.ini中upload_max_filesize选项限制的值&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> -<span class="hljs-number">1</span>:<br>                <span class="hljs-variable">$str</span> .= <span class="hljs-string">&quot;未允许的类型&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> -<span class="hljs-number">2</span>:<br>                <span class="hljs-variable">$str</span> .= <span class="hljs-string">&quot;文件过大， 上传的文件夹不能超过<span class="hljs-subst">&#123;$this-&gt;maxsize&#125;</span>个字节&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> -<span class="hljs-number">3</span>:<br>                <span class="hljs-variable">$str</span> .= <span class="hljs-string">&quot;上传失败&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> -<span class="hljs-number">4</span>:<br>                <span class="hljs-variable">$str</span> .= <span class="hljs-string">&quot;建立存放上传文件目录失败，请重新指定上传目录&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> -<span class="hljs-number">5</span>:<br>                <span class="hljs-variable">$str</span> .= <span class="hljs-string">&quot;必须指定上传文件的路径&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-variable">$str</span> .= <span class="hljs-string">&quot;未知错误&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span> . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//根据文件的相关信息为分块数据创建文件夹</span><br>    <span class="hljs-comment">//md5(当前登录用户的数据库id + 文件原始名称 + 文件类型 + 文件最后修改时间 + 文件总大小)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setDirNameForChunks</span>(<span class="hljs-params"><span class="hljs-variable">$info</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$str</span> = <span class="hljs-string">&#x27;&#x27;</span> . <span class="hljs-variable">$info</span>[<span class="hljs-string">&#x27;userId&#x27;</span>] . <span class="hljs-variable">$info</span>[<span class="hljs-string">&#x27;name&#x27;</span>] . <span class="hljs-variable">$info</span>[<span class="hljs-string">&#x27;type&#x27;</span>] . <span class="hljs-variable">$info</span>[<span class="hljs-string">&#x27;lastModifiedDate&#x27;</span>] . <span class="hljs-variable">$info</span>[<span class="hljs-string">&#x27;size&#x27;</span>];<br>        <span class="hljs-keyword">return</span> md5(<span class="hljs-variable">$str</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//设置和$_FILES有关的内容</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setFiles</span>(<span class="hljs-params"><span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$tmp_name</span> = <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$size</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$error</span> = <span class="hljs-number">0</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;setOption(<span class="hljs-string">&#x27;errorNum&#x27;</span>, <span class="hljs-variable">$error</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$error</span>) &#123;<br>            <span class="hljs-comment">//return false;</span><br>            show_message(<span class="hljs-keyword">$this</span>-&gt;getError(), <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">2</span>);<br>        &#125;<br>        <span class="hljs-keyword">$this</span>-&gt;setOption(<span class="hljs-string">&#x27;originName&#x27;</span>, <span class="hljs-variable">$name</span>);<br>        <span class="hljs-keyword">$this</span>-&gt;setOption(<span class="hljs-string">&#x27;tmpFileName&#x27;</span>, <span class="hljs-variable">$tmp_name</span>);<br>        <span class="hljs-variable">$aryStr</span> = explode(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-variable">$name</span>);<br>        <span class="hljs-keyword">$this</span>-&gt;setOption(<span class="hljs-string">&quot;fileType&quot;</span>, strtolower(<span class="hljs-variable">$aryStr</span>[count(<span class="hljs-variable">$aryStr</span>) - <span class="hljs-number">1</span>]));<br>        <span class="hljs-keyword">$this</span>-&gt;setOption(<span class="hljs-string">&quot;fileSize&quot;</span>, <span class="hljs-variable">$size</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkChunk</span>(<span class="hljs-params"><span class="hljs-variable">$info</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$info</span>[<span class="hljs-string">&#x27;chunks&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$info</span>[<span class="hljs-string">&#x27;chunks&#x27;</span>] &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">$this</span>-&gt;setOption(<span class="hljs-string">&quot;isChunk&quot;</span>, <span class="hljs-literal">true</span>);<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$info</span>[<span class="hljs-string">&#x27;chunk&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$info</span>[<span class="hljs-string">&#x27;chunk&#x27;</span>] &gt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">$this</span>-&gt;setOption(<span class="hljs-string">&quot;indexOfChunk&quot;</span>, <span class="hljs-variable">$info</span>[<span class="hljs-string">&#x27;chunk&#x27;</span>]);<br><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&#x27;分块索引不合法&#x27;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//设置上传后的文件名称</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setNewFileName</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;isChunk) &#123;        <span class="hljs-comment">//如果是分块，则以分块的索引作为文件名称保存</span><br>            <span class="hljs-keyword">$this</span>-&gt;setOption(<span class="hljs-string">&#x27;newFileName&#x27;</span>, <span class="hljs-keyword">$this</span>-&gt;indexOfChunk);<br>        &#125; <span class="hljs-keyword">elseif</span> (<span class="hljs-keyword">$this</span>-&gt;israndname) &#123;<br>            <span class="hljs-keyword">$this</span>-&gt;setOption(<span class="hljs-string">&#x27;newFileName&#x27;</span>, <span class="hljs-keyword">$this</span>-&gt;proRandName());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">$this</span>-&gt;setOption(<span class="hljs-string">&#x27;newFileName&#x27;</span>, <span class="hljs-keyword">$this</span>-&gt;originName);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//检查上传的文件是否是合法的类型</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkFileType</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (in_array(strtolower(<span class="hljs-keyword">$this</span>-&gt;fileType), <span class="hljs-keyword">$this</span>-&gt;allowtype)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">$this</span>-&gt;setOption(<span class="hljs-string">&#x27;errorNum&#x27;</span>, -<span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//return false;</span><br>            show_message(<span class="hljs-keyword">$this</span>-&gt;getError(), <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">2</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//检查上传的文件是否是允许的大小</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkFileSize</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;fileSize &gt; <span class="hljs-keyword">$this</span>-&gt;maxsize) &#123;<br>            <span class="hljs-keyword">$this</span>-&gt;setOption(<span class="hljs-string">&#x27;errorNum&#x27;</span>, -<span class="hljs-number">5</span>);<br>            <span class="hljs-comment">//return false;</span><br>            show_message(<span class="hljs-keyword">$this</span>-&gt;getError(), <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">2</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//检查是否有存放上传文件的目录</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkFilePath</span>(<span class="hljs-params"><span class="hljs-variable">$target</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$target</span>)) &#123;<br>            <span class="hljs-keyword">$this</span>-&gt;setOption(<span class="hljs-string">&#x27;errorNum&#x27;</span>, -<span class="hljs-number">5</span>);<br>            <span class="hljs-comment">//return false;</span><br>            show_message(<span class="hljs-keyword">$this</span>-&gt;getError(), <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">2</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!file_exists(<span class="hljs-variable">$target</span>) || !is_writable(<span class="hljs-variable">$target</span>)) &#123;<br>            <span class="hljs-keyword">if</span> (!@mkdir(<span class="hljs-variable">$target</span>, <span class="hljs-number">0755</span>)) &#123;<br>                <span class="hljs-keyword">$this</span>-&gt;setOption(<span class="hljs-string">&#x27;errorNum&#x27;</span>, -<span class="hljs-number">4</span>);<br>                <span class="hljs-comment">//return false;</span><br>                show_message(<span class="hljs-keyword">$this</span>-&gt;getError(), <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">2</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">$this</span>-&gt;path = <span class="hljs-variable">$target</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//设置随机文件名</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">proRandName</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$fileName</span> = date(<span class="hljs-string">&#x27;YmdHis&#x27;</span>) . <span class="hljs-string">&quot;_&quot;</span> . rand(<span class="hljs-number">100</span>, <span class="hljs-number">999</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$fileName</span> . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-keyword">$this</span>-&gt;fileType;<br>    &#125;<br><br>    <span class="hljs-comment">//复制上传文件到指定的位置</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">copyFile</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">$this</span>-&gt;errorNum) &#123;<br>            <span class="hljs-variable">$path</span> = rtrim(<span class="hljs-keyword">$this</span>-&gt;path, <span class="hljs-string">&#x27;/&#x27;</span>) . <span class="hljs-string">&#x27;/&#x27;</span>;<br>            <span class="hljs-variable">$path</span> .= <span class="hljs-keyword">$this</span>-&gt;newFileName;<br>            <span class="hljs-keyword">if</span> (@move_uploaded_file(<span class="hljs-keyword">$this</span>-&gt;tmpFileName, <span class="hljs-variable">$path</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">$this</span>-&gt;setOption(<span class="hljs-string">&#x27;errorNum&#x27;</span>, -<span class="hljs-number">3</span>);<br>                <span class="hljs-comment">//return false;</span><br>                show_message(<span class="hljs-keyword">$this</span>-&gt;getError(), <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">2</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//return false;</span><br>            show_message(<span class="hljs-keyword">$this</span>-&gt;getError(), <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">2</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实例</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">//关闭缓存</span><br><span class="hljs-comment">header(&quot;Expires: Mon, 26 Jul 1997 05:00:00 GMT&quot;);</span><br><span class="hljs-comment">header(&quot;Last-Modified: &quot; . gmdate(&quot;D, d M Y H:i:s&quot;) . &quot; GMT&quot;);</span><br><span class="hljs-comment">header(&quot;Cache-Control: no-store, no-cache, must-revalidate&quot;);</span><br><span class="hljs-comment">header(&quot;Cache-Control: post-check=0, pre-check=0&quot;, false);</span><br><span class="hljs-comment">header(&quot;Pragma: no-cache&quot;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">$uploader = new FileUpload();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//用于断点续传，验证指定分块是否已经存在，避免重复上传</span><br><span class="hljs-comment">if (isset($_POST[&#x27;status&#x27;])) &#123;</span><br><span class="hljs-comment">    if ($_POST[&#x27;status&#x27;] == &#x27;chunkCheck&#x27;) &#123;</span><br><span class="hljs-comment">        $target = &#x27;../uploads/&#x27; . $_POST[&#x27;name&#x27;] . &#x27;/&#x27; . $_POST[&#x27;chunkIndex&#x27;];</span><br><span class="hljs-comment">        if (file_exists($target) &amp;&amp; filesize($target) == $_POST[&#x27;size&#x27;]) &#123;</span><br><span class="hljs-comment">            die(&#x27;&#123;&quot;ifExist&quot;:1&#125;&#x27;);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        die(&#x27;&#123;&quot;ifExist&quot;:0&#125;&#x27;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    &#125; elseif ($_POST[&#x27;status&#x27;] == &#x27;md5Check&#x27;) &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        //todo 模拟持久层查询</span><br><span class="hljs-comment">        $dataArr = array(</span><br><span class="hljs-comment">            &#x27;b0201e4d41b2eeefc7d3d355a44c6f5a&#x27; =&gt; &#x27;kazaff2.jpg&#x27;</span><br><span class="hljs-comment">        );</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        if (isset($dataArr[$_POST[&#x27;md5&#x27;]])) &#123;</span><br><span class="hljs-comment">            die(&#x27;&#123;&quot;ifExist&quot;:1, &quot;path&quot;:&quot;&#x27; . $dataArr[$_POST[&#x27;md5&#x27;]] . &#x27;&quot;&#125;&#x27;);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        die(&#x27;&#123;&quot;ifExist&quot;:0&#125;&#x27;);</span><br><span class="hljs-comment">    &#125; elseif ($_POST[&#x27;status&#x27;] == &#x27;chunksMerge&#x27;) &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        if ($path = $uploader-&gt;chunksMerge($_POST[&#x27;name&#x27;], $_POST[&#x27;chunks&#x27;], $_POST[&#x27;ext&#x27;])) &#123;</span><br><span class="hljs-comment">            //todo 把md5签名存入持久层，供未来的秒传验证</span><br><span class="hljs-comment">            die(&#x27;&#123;&quot;status&quot;:1, &quot;path&quot;: &quot;&#x27; . $path . &#x27;&quot;&#125;&#x27;);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        die(&#x27;&#123;&quot;status&quot;:0&#x27;);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">if (($path = $uploader-&gt;upload(&#x27;file&#x27;, $_POST)) !== false) &#123;</span><br><span class="hljs-comment">    die(&#x27;&#123;&quot;status&quot;:1, &quot;path&quot;: &quot;&#x27; . $path . &#x27;&quot;&#125;&#x27;);</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">die(&#x27;&#123;&quot;status&quot;:0&#125;&#x27;);</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>发现自己语言组织能力好差啊，各位看官还是转到<a href="http://blog.kazaff.me/2014/11/14/%E8%81%8A%E8%81%8A%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/">聊聊大文件上传</a>去欣赏吧</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>webuploader</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置phpmyadmin使登录时可填写IP管理多台MySQL 连接多个数据库 自动登录</title>
    <link href="/2017/04/02/mysql/%E9%85%8D%E7%BD%AEphpMyAdmin%E8%BF%9E%E6%8E%A5%E5%A4%9A%E5%8F%B0mysql%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2017/04/02/mysql/%E9%85%8D%E7%BD%AEphpMyAdmin%E8%BF%9E%E6%8E%A5%E5%A4%9A%E5%8F%B0mysql%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="一、设置phpMyAdmin自动登录"><a href="#一、设置phpMyAdmin自动登录" class="headerlink" title="一、设置phpMyAdmin自动登录"></a>一、设置phpMyAdmin自动登录</h1><p>首先在根目录找到<code>config.sample.inc.php</code>复制一份文件名改为<code>config.inc.php</code>（如果已经存在 <code>config.inc.php</code> 文件，则直接修改该文件即可）。<br>打开<code>config.inc.php</code> 找到 <code>$cfg[&#39;Servers&#39;][$i][&#39;auth_type&#39;]</code>，将代码如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$cfg</span>[<span class="hljs-string">&#x27;Servers&#x27;</span>][<span class="hljs-variable">$i</span>][<span class="hljs-string">&#x27;auth_type&#x27;</span>] = <span class="hljs-string">&#x27;cookie&#x27;</span>;<br></code></pre></td></tr></table></figure><p>改成代码如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$cfg</span>[<span class="hljs-string">&#x27;Servers&#x27;</span>][<span class="hljs-variable">$i</span>][<span class="hljs-string">&#x27;auth_type&#x27;</span>] = <span class="hljs-string">&#x27;config&#x27;</span>;<br></code></pre></td></tr></table></figure><p>然后在下面追加如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$cfg</span>[<span class="hljs-string">&#x27;Servers&#x27;</span>][<span class="hljs-variable">$i</span>][<span class="hljs-string">&#x27;user&#x27;</span>]          = <span class="hljs-string">&#x27;root&#x27;</span>;      <span class="hljs-comment">// 设置的mysql用户名</span><br><span class="hljs-variable">$cfg</span>[<span class="hljs-string">&#x27;Servers&#x27;</span>][<span class="hljs-variable">$i</span>][<span class="hljs-string">&#x27;password&#x27;</span>]      = <span class="hljs-string">&#x27;root&#x27;</span>;    <span class="hljs-comment">// 设置的mysql密码</span><br></code></pre></td></tr></table></figure><h1 id="二、设置phpMyAdmin连接多台Mysql服务器"><a href="#二、设置phpMyAdmin连接多台Mysql服务器" class="headerlink" title="二、设置phpMyAdmin连接多台Mysql服务器"></a>二、设置phpMyAdmin连接多台Mysql服务器</h1><p><em>默认安装phpMyAdmin，通常只能连一台MySql服务器，其配置信息是保存在phpMyAdmin的配置文件里的，当我们需要在多台服务器之间进行切换登陆的时候，修改起来非常麻烦。遵照下面的配置方法，我们可以方便的使用phpMyAdmin连接多台MySql</em></p><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><p>登陆phpMyAdmin时只需输入用户名、密码，服务器地址为下拉列表可选，登陆后也可选择其他服务器快速切换。</p><h3 id="操作步骤："><a href="#操作步骤：" class="headerlink" title="操作步骤："></a>操作步骤：</h3><ol><li><p>备份phpMyAdmin根目录下的<code>config.sample.inc.php</code> 文件为 <code>config.sample.inc.php.bak</code>  (此操作避免修改失误所造成的损失)</p></li><li><p>备份phpMyAdmin根目录下的<code>config.inc.php</code> 文件为 <code>config.inc.php.bak</code>  (此操作避免修改失误所造成的损失)</p></li><li><p>将phpMyAdmin根目录下的<code>config.sample.inc.php</code> 文件重命名为<code>config.inc.php</code></p></li><li><p>修改<code>config.inc.php</code>文件，找到 <code>First server</code> 注释部分，将其修改为以下内容：</p></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$hosts</span> = <span class="hljs-keyword">array</span>(<br>‘<span class="hljs-number">1</span>’=&gt;<span class="hljs-keyword">array</span>(‘host’=&gt;’localhost’,’user’=&gt;’root’,’password’=&gt;’<span class="hljs-number">123456</span>′),<br>‘<span class="hljs-number">2</span>’=&gt;<span class="hljs-keyword">array</span>(‘host’=&gt;’<span class="hljs-number">192.168</span>.<span class="hljs-number">0.1</span>′,’user’=&gt;’ciray’,’password’=&gt;’<span class="hljs-number">123456</span>′)<br>);<br></code></pre></td></tr></table></figure><p><code>$hosts</code>数组下标从1开始，<code>host</code>的值为服务器ip地址，<code>user</code>是对应的MySql登陆用户名，<code>password</code>的值为MySql的登陆密码，请修改成你自己的</p><p><code>$hosts</code>数组配置了两台服务器，如果你有多台服务器，请按数组下标递增的顺序添加配置信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * First server</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">1</span>; <span class="hljs-variable">$i</span> &lt;= count(<span class="hljs-variable">$hosts</span>); <span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-comment">/* Authentication type */</span><br>    <span class="hljs-variable">$cfg</span>[‘Servers’][<span class="hljs-variable">$i</span>][‘auth_type’] = ‘cookie<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">    /* Server parameters */</span><br><span class="hljs-string">    $cfg[‘Servers’][$i][‘host’] = $hosts[$i][‘host’];   //修改host</span><br><span class="hljs-string">    $cfg[‘Servers’][$i][‘connect_type’] = ‘tcp&#x27;</span>;<br>    <span class="hljs-variable">$cfg</span>[‘Servers’][<span class="hljs-variable">$i</span>][‘compress’] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">/* Select mysqli if your server has it */</span><br>    <span class="hljs-variable">$cfg</span>[‘Servers’][<span class="hljs-variable">$i</span>][‘extension’] = ‘mysql<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">    $cfg[‘Servers’][$i][‘AllowNoPassword’] = true;</span><br><span class="hljs-string">    $cfg[‘Servers’][$i][‘user’] = $hosts[$i][‘user’];  //修改用户名</span><br><span class="hljs-string">    $cfg[‘Servers’][$i][‘password’] = $hosts[$i][‘password’]; //密码</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>请注意我们使用一个for循环来配置所有服务器的信息，循环变量$i的初始值为1，遍历<code>$hosts</code>数组中的配置信息，循环体中的内容无须更改。</p><p>修改完成后保存文件，重新登陆，如果可以看到phpMyAdmin登陆界面中出现服务器候选列表，说明修改正确</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP的冒泡算法</title>
    <link href="/2017/03/14/php/PHP%E7%9A%84%E5%86%92%E6%B3%A1%E7%AE%97%E6%B3%95/"/>
    <url>/2017/03/14/php/PHP%E7%9A%84%E5%86%92%E6%B3%A1%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/* 冒泡算法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@para</span> $arr 传人进去排序的数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> $newArr 排序之后的数组</span><br><span class="hljs-comment"> */</span><br> <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">maopao</span>(<span class="hljs-params"><span class="hljs-variable">$arr</span></span>)</span>&#123;<br>    <span class="hljs-comment">//一共是多少趟</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = count(<span class="hljs-variable">$arr</span>)-<span class="hljs-number">1</span>; <span class="hljs-variable">$i</span>&gt;<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>--)&#123;<br>        <span class="hljs-variable">$flag</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//每一趟进行相邻两个数进行比较</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$j</span> &lt; <span class="hljs-variable">$i</span>; <span class="hljs-variable">$j</span>++)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$j</span>]&gt;<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$j</span>+<span class="hljs-number">1</span>])&#123;<br>                <span class="hljs-variable">$temp</span> = <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$j</span>];<br>                <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$j</span>] = <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$j</span>+<span class="hljs-number">1</span>];<br>                <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$j</span>+<span class="hljs-number">1</span>] =<span class="hljs-variable">$temp</span>;<br>                <span class="hljs-variable">$flag</span> = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag</span> == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$arr</span>;<br>&#125;<br><span class="hljs-variable">$arr</span>=<span class="hljs-keyword">array</span>(<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">10</span>,<span class="hljs-number">50</span>,<span class="hljs-number">20</span>,<span class="hljs-number">60</span>);<br>print_r(maopao(<span class="hljs-variable">$arr</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><hr><p>print:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">Array</span><br>(<br>    [<span class="hljs-number">0</span>] =&gt; <span class="hljs-number">10</span><br>    [<span class="hljs-number">1</span>] =&gt; <span class="hljs-number">20</span><br>    [<span class="hljs-number">2</span>] =&gt; <span class="hljs-number">30</span><br>    [<span class="hljs-number">3</span>] =&gt; <span class="hljs-number">40</span><br>    [<span class="hljs-number">4</span>] =&gt; <span class="hljs-number">50</span><br>    [<span class="hljs-number">5</span>] =&gt; <span class="hljs-number">60</span><br>)<br><span class="hljs-comment">//冒泡算法：</span><br>原理是临近的数字两两进行比较,按照从小到大或者从大到小的顺序进行交换,<br>这样一趟过去后,最大或最小的数字被交换到了最后一位,<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP遍历文件夹下子目录和文件</title>
    <link href="/2017/03/14/php/PHP%E9%81%8D%E5%8E%86%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E5%AD%90%E7%9B%AE%E5%BD%95%E5%92%8C%E6%96%87%E4%BB%B6/"/>
    <url>/2017/03/14/php/PHP%E9%81%8D%E5%8E%86%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E5%AD%90%E7%9B%AE%E5%BD%95%E5%92%8C%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read_all_dir</span> (<span class="hljs-params"> <span class="hljs-variable">$dir</span> </span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-variable">$result</span> = <span class="hljs-keyword">array</span>();<br><span class="hljs-variable">$handle</span> = opendir(<span class="hljs-variable">$dir</span>);<br><span class="hljs-keyword">if</span> ( <span class="hljs-variable">$handle</span> )<br>&#123;<br><span class="hljs-keyword">while</span> ( ( <span class="hljs-variable">$file</span> = readdir ( <span class="hljs-variable">$handle</span> ) ) !== <span class="hljs-literal">false</span> )<br>&#123;<br><span class="hljs-keyword">if</span> ( <span class="hljs-variable">$file</span> != <span class="hljs-string">&#x27;.&#x27;</span> &amp;&amp; <span class="hljs-variable">$file</span> != <span class="hljs-string">&#x27;..&#x27;</span>)<br>&#123;<br><span class="hljs-variable">$cur_path</span> = <span class="hljs-variable">$dir</span> . DIRECTORY_SEPARATOR . <span class="hljs-variable">$file</span>;<br><span class="hljs-keyword">if</span> ( is_dir ( <span class="hljs-variable">$cur_path</span> ) )<br>&#123;<br><span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;dir&#x27;</span>][<span class="hljs-variable">$cur_path</span>] = read_all_dir ( <span class="hljs-variable">$cur_path</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;file&#x27;</span>][] = <span class="hljs-variable">$cur_path</span>;<br>&#125;<br>&#125;<br>&#125;<br>closedir(<span class="hljs-variable">$handle</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>&#125;<br><br><span class="hljs-variable">$result</span> = read_all_dir(<span class="hljs-string">&#x27;/home/www/hexo&#x27;</span>);<br>var_dump(<span class="hljs-variable">$result</span>);<br></code></pre></td></tr></table></figure><hr><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">print</span>:<br><br><span class="hljs-keyword">array</span>(<span class="hljs-number">2</span>) &#123;<br>  [<span class="hljs-string">&quot;file&quot;</span>]=&gt;<br>  <span class="hljs-keyword">array</span>(<span class="hljs-number">4</span>) &#123;<br>    [<span class="hljs-number">0</span>]=&gt;<br>    <span class="hljs-keyword">string</span>(<span class="hljs-number">27</span>) <span class="hljs-string">&quot;/home/www/hexo/package.json&quot;</span><br>    [<span class="hljs-number">1</span>]=&gt;<br>    <span class="hljs-keyword">string</span>(<span class="hljs-number">22</span>) <span class="hljs-string">&quot;/home/www/hexo/db.json&quot;</span><br>    [<span class="hljs-number">2</span>]=&gt;<br>    <span class="hljs-keyword">string</span>(<span class="hljs-number">25</span>) <span class="hljs-string">&quot;/home/www/hexo/.npmignore&quot;</span><br>    [<span class="hljs-number">3</span>]=&gt;<br>    <span class="hljs-keyword">string</span>(<span class="hljs-number">26</span>) <span class="hljs-string">&quot;/home/www/hexo/_config.yml&quot;</span><br>  &#125;<br>  [<span class="hljs-string">&quot;dir&quot;</span>]=&gt;<br>  <span class="hljs-keyword">array</span>(<span class="hljs-number">7</span>) &#123;<br>    [<span class="hljs-string">&quot;/home/www/hexo/.idea&quot;</span>]=&gt;<br>    <span class="hljs-keyword">array</span>(<span class="hljs-number">2</span>) &#123;<br>      [<span class="hljs-string">&quot;file&quot;</span>]=&gt;<br>      <span class="hljs-keyword">array</span>(<span class="hljs-number">7</span>) &#123;<br>        [<span class="hljs-number">0</span>]=&gt;<br>        <span class="hljs-keyword">string</span>(<span class="hljs-number">34</span>) <span class="hljs-string">&quot;/home/www/hexo/.idea/encodings.xml&quot;</span><br>        [<span class="hljs-number">1</span>]=&gt;<br>        <span class="hljs-keyword">string</span>(<span class="hljs-number">30</span>) <span class="hljs-string">&quot;/home/www/hexo/.idea/blade.xml&quot;</span><br>        [<span class="hljs-number">2</span>]=&gt;<br>        <span class="hljs-keyword">string</span>(<span class="hljs-number">42</span>) <span class="hljs-string">&quot;/home/www/hexo/.idea/jsLibraryMappings.xml&quot;</span><br>        [<span class="hljs-number">3</span>]=&gt;<br>        <span class="hljs-keyword">string</span>(<span class="hljs-number">34</span>) <span class="hljs-string">&quot;/home/www/hexo/.idea/workspace.xml&quot;</span><br>        [<span class="hljs-number">4</span>]=&gt;<br>        <span class="hljs-keyword">string</span>(<span class="hljs-number">29</span>) <span class="hljs-string">&quot;/home/www/hexo/.idea/hexo.iml&quot;</span><br>        [<span class="hljs-number">5</span>]=&gt;<br>        <span class="hljs-keyword">string</span>(<span class="hljs-number">29</span>) <span class="hljs-string">&quot;/home/www/hexo/.idea/misc.xml&quot;</span><br>        [<span class="hljs-number">6</span>]=&gt;<br>        <span class="hljs-keyword">string</span>(<span class="hljs-number">32</span>) <span class="hljs-string">&quot;/home/www/hexo/.idea/modules.xml&quot;</span><br>      &#125;<br>      [<span class="hljs-string">&quot;dir&quot;</span>]=&gt;<br>      <span class="hljs-keyword">array</span>(<span class="hljs-number">2</span>) &#123;<br>        [<span class="hljs-string">&quot;/home/www/hexo/.idea/libraries&quot;</span>]=&gt;<br>        <span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>) &#123;<br>          [<span class="hljs-string">&quot;file&quot;</span>]=&gt;<br>          <span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>) &#123;<br>            [<span class="hljs-number">0</span>]=&gt;<br>            <span class="hljs-keyword">string</span>(<span class="hljs-number">52</span>) <span class="hljs-string">&quot;/home/www/hexo/.idea/libraries/hexo_node_modules.xml&quot;</span><br>          &#125;<br>        &#125;<br>        [<span class="hljs-string">&quot;/home/www/hexo/.idea/copyright&quot;</span>]=&gt;<br>        <span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>) &#123;<br>          [<span class="hljs-string">&quot;file&quot;</span>]=&gt;<br>          <span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>) &#123;<br>            [<span class="hljs-number">0</span>]=&gt;<br>            <span class="hljs-keyword">string</span>(<span class="hljs-number">52</span>) <span class="hljs-string">&quot;/home/www/hexo/.idea/copyright/profiles_settings.xml&quot;</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>    ... ...<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP header() 函数</title>
    <link href="/2017/02/22/php/PHP%20header()%20%E5%87%BD%E6%95%B0/"/>
    <url>/2017/02/22/php/PHP%20header()%20%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h1><p>header() 函数向客户端发送<code>原始的 HTTP 报头</code>。<br>认识到一点很重要，即必须在任何实际的输出被发送之前调用 header() 函数（在 PHP 4 以及更高的版本中，您可以使用输出缓存来解决此问题）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;html&gt;<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 结果出错</span><br><span class="hljs-comment">// 在调用 header() 之前已存在输出</span><br>header(<span class="hljs-string">&#x27;Location: http://www.example.com/&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">header(<span class="hljs-keyword">string</span>,replace,http_response_code)<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>string</td><td>必需。规定要发送的报头字符串。</td></tr><tr><td>replace</td><td>可选。指示该报头是否替换之前的报头，或添加第二个报头。默认是 true（替换）。false（允许相同类型的多个报头）。</td></tr><tr><td>http_response_code</td><td>可选。把 HTTP 响应代码强制为指定的值。（PHP 4 以及更高版本可用）</td></tr></tbody></table><h1 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h1><h2 id="下载对话框"><a href="#下载对话框" class="headerlink" title="下载对话框"></a>下载对话框</h2><p>如果你想提醒用户去保存你发送的数据，例如保存一个生成的PDF文件。你可以使用» Content-Disposition的报文信息来提供一个推荐的文件名，并且强制浏览器显示一个文件下载的对话框</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// We&#x27;ll be outputting a PDF</span><br>header(<span class="hljs-string">&#x27;Content-type: application/pdf&#x27;</span>);<br><br><span class="hljs-comment">// It will be called downloaded.pdf</span><br>header(<span class="hljs-string">&#x27;Content-Disposition: attachment; filename=&quot;downloaded.pdf&quot;&#x27;</span>);<br><br><span class="hljs-comment">// The PDF source is in original.pdf</span><br>readfile(<span class="hljs-string">&#x27;original.pdf&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="缓存指令"><a href="#缓存指令" class="headerlink" title="缓存指令"></a>缓存指令</h2><p>PHP脚本总是会生成一些动态内容，而这些内容是不应该被缓存的，不管是客户端浏览器还是在服务器端和客户端浏览器之间的任何代理。我们可以像这样来强制设置浏览器和各个代理层不缓存数据：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>header(<span class="hljs-string">&quot;Cache-Control: no-cache, must-revalidate&quot;</span>); <span class="hljs-comment">// HTTP/1.1</span><br>header(<span class="hljs-string">&quot;Expires: Sat, 26 Jul 1997 05:00:00 GMT&quot;</span>); <span class="hljs-comment">// Date in the past</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p class="note">Note:也许你会遇到这样的情况，那就是即使你没使用上面这段代码，你的页面也没有被缓存。大多数情况是因为用户可以自己设置他们的浏览器从而改变浏览器默认的缓存行为。一旦发送了上面这段报文信息，那么你就应该重写那些可能用到缓存了的代码。此外，在启用session的情况下，`session_cache_limiter()`和session.cache_limiter的配置可以用来自动地生成正确的缓存相关的头信息。</p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p class="note">Note:数据头只会在SAPI支持时得到处理和输出。</p><p class="note">Note:你所有需要输出到浏览器的数据将会一直缓存在服务器端，直到你发送他们，这将造成比较大的资源开销。你可以是用输出缓冲来避开这个问题。你可以通过在脚本里使用ob_start()和ob_end_flush()或者直接在你的php.ini文件里设置output_buffering，也可以直接在服务器的配置文件里设置。</p><p class="note">Note:HTTP状态信息的报文永远都是最新被发送到客户端的，而不管header()是否是在最先发送的。报文状态码可能会被重写，当调用header()来设定新的状态码，除非HTTP报文已经被发送了</p><p class="note">Note: 如果安全模式（safe mode）被激活，那么脚本的uid将会被添加到WWW-Authenticate的realm部分，前提是你设置了这个头信息的情况下（使用 HTTP 认证）。</p><p class="note">Note:HTTP/1.1需要一个绝对的网络资源地址（URI）来作为一个参数供» Location:使用，在其中必须包含了协议，主机地址还有完整的路径，但是一些客户端可以接受相对的网络资源地址。你可以在一个相对的网路资源地址的基础上使用$_SERVER['HTTP_HOST']，$_SERVER['PHP_SELF']和dirname()来组装一个绝对的网路资源地址。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/* Redirect to a different page in the current directory that was requested */</span><br><span class="hljs-variable">$host</span>  = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_HOST&#x27;</span>];<br><span class="hljs-variable">$uri</span>   = rtrim(dirname(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>]), <span class="hljs-string">&#x27;/\\&#x27;</span>);<br><span class="hljs-variable">$extra</span> = <span class="hljs-string">&#x27;mypage.php&#x27;</span>;<br>header(<span class="hljs-string">&quot;Location: http://<span class="hljs-subst">$host</span><span class="hljs-subst">$uri</span>/<span class="hljs-subst">$extra</span>&quot;</span>);<br><span class="hljs-keyword">exit</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></p><p class="note">Note:在执行Location header跳转的时候，Session ID无法通传递的，即使session.use_trans_sid是激活状态的。只能通过手动传递using SID的值来实现。</p><h1 id="PHP-header函数的几大作用"><a href="#PHP-header函数的几大作用" class="headerlink" title="PHP header函数的几大作用"></a>PHP header函数的几大作用</h1><p>1、重定向 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">header(<span class="hljs-string">&#x27;Location: http://www.example.com/&#x27;</span>);<br></code></pre></td></tr></table></figure><p>2、指定内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">header(<span class="hljs-string">&#x27;Content-type: application/pdf&#x27;</span>);<br></code></pre></td></tr></table></figure><p>3、附件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">header(<span class="hljs-string">&#x27;Content-type: application/pdf&#x27;</span>);   <br><span class="hljs-comment">//指定内容为附件，指定下载显示的名字</span><br>header(<span class="hljs-string">&#x27;Content-Disposition: attachment; filename=&quot;downloaded.pdf&quot;&#x27;</span>);<br><span class="hljs-comment">//打开文件，并输出</span><br>readfile(<span class="hljs-string">&#x27;original.pdf&#x27;</span>);<br></code></pre></td></tr></table></figure><p>以上代码可以在浏览器产生文件对话框的效果</p><p>4、让用户获取最新的资料和数据而不是缓存</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">header(<span class="hljs-string">&quot;Cache-Control: no-cache, must-revalidate&quot;</span>); <span class="hljs-comment">// HTTP/1.1</span><br>header(<span class="hljs-string">&quot;Expires: Sat, 26 Jul 1997 05:00:00 GMT&quot;</span>);   <span class="hljs-comment">// 设置临界时间</span><br></code></pre></td></tr></table></figure><h2 id="详细例子："><a href="#详细例子：" class="headerlink" title="详细例子："></a>详细例子：</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>header(<span class="hljs-string">&#x27;HTTP/1.1 200 OK&#x27;</span>); <span class="hljs-comment">// ok 正常访问</span><br>header(<span class="hljs-string">&#x27;HTTP/1.1 404 Not Found&#x27;</span>); <span class="hljs-comment">//通知浏览器 页面不存在</span><br>header(<span class="hljs-string">&#x27;HTTP/1.1 301 Moved Permanently&#x27;</span>); <span class="hljs-comment">//设置地址被永久的重定向 301</span><br>header(<span class="hljs-string">&#x27;Location: http://www.ithhc.cn/&#x27;</span>); <span class="hljs-comment">//跳转到一个新的地址</span><br>header(<span class="hljs-string">&#x27;Refresh: 10; url=http://www.ithhc.cn/&#x27;</span>); <span class="hljs-comment">//延迟转向 也就是隔几秒跳转</span><br>header(<span class="hljs-string">&#x27;X-Powered-By: PHP/6.0.0&#x27;</span>); <span class="hljs-comment">//修改 X-Powered-By信息</span><br>header(<span class="hljs-string">&#x27;Content-language: en&#x27;</span>); <span class="hljs-comment">//文档语言</span><br>header(<span class="hljs-string">&#x27;Content-Length: 1234&#x27;</span>); <span class="hljs-comment">//设置内容长度</span><br>header(<span class="hljs-string">&#x27;Last-Modified: &#x27;</span>.gmdate(<span class="hljs-string">&#x27;D, d M Y H:i:s&#x27;</span>, <span class="hljs-variable">$time</span>).<span class="hljs-string">&#x27; GMT&#x27;</span>); <span class="hljs-comment">//告诉浏览器最后一次修改时间</span><br>header(<span class="hljs-string">&#x27;HTTP/1.1 304 Not Modified&#x27;</span>); <span class="hljs-comment">//告诉浏览器文档内容没有发生改变</span><br> <br><span class="hljs-comment">###内容类型###</span><br>header(<span class="hljs-string">&#x27;Content-Type: text/html; charset=utf-8&#x27;</span>); <span class="hljs-comment">//网页编码</span><br>header(<span class="hljs-string">&#x27;Content-Type: text/plain&#x27;</span>); <span class="hljs-comment">//纯文本格式</span><br>header(<span class="hljs-string">&#x27;Content-Type: image/jpeg&#x27;</span>); <span class="hljs-comment">//JPG、JPEG </span><br>header(<span class="hljs-string">&#x27;Content-Type: application/zip&#x27;</span>); <span class="hljs-comment">// ZIP文件</span><br>header(<span class="hljs-string">&#x27;Content-Type: application/pdf&#x27;</span>); <span class="hljs-comment">// PDF文件</span><br>header(<span class="hljs-string">&#x27;Content-Type: audio/mpeg&#x27;</span>); <span class="hljs-comment">// 音频文件 </span><br>header(<span class="hljs-string">&#x27;Content-type: text/css&#x27;</span>); <span class="hljs-comment">//css文件</span><br>header(<span class="hljs-string">&#x27;Content-type: text/javascript&#x27;</span>); <span class="hljs-comment">//js文件</span><br>header(<span class="hljs-string">&#x27;Content-type: application/json&#x27;</span>); <span class="hljs-comment">//json</span><br>header(<span class="hljs-string">&#x27;Content-type: application/pdf&#x27;</span>); <span class="hljs-comment">//pdf</span><br>header(<span class="hljs-string">&#x27;Content-type: text/xml&#x27;</span>); <span class="hljs-comment">//xml</span><br>header(<span class="hljs-string">&#x27;Content-Type: application/x-shockw**e-flash&#x27;</span>); <span class="hljs-comment">//Flash动画</span><br> <br><span class="hljs-comment">######</span><br> <br><span class="hljs-comment">###声明一个下载的文件###</span><br>header(<span class="hljs-string">&#x27;Content-Type: application/octet-stream&#x27;</span>);<br>header(<span class="hljs-string">&#x27;Content-Disposition: attachment; filename=&quot;ITblog.zip&quot;&#x27;</span>);<br>header(<span class="hljs-string">&#x27;Content-Transfer-Encoding: binary&#x27;</span>);<br>readfile(<span class="hljs-string">&#x27;test.zip&#x27;</span>);<br><span class="hljs-comment">######</span><br> <br><span class="hljs-comment">###对当前文档禁用缓存###</span><br>header(<span class="hljs-string">&#x27;Cache-Control: no-cache, no-store, max-age=0, must-revalidate&#x27;</span>);<br>header(<span class="hljs-string">&#x27;Expires: Mon, 26 Jul 1997 05:00:00 GMT&#x27;</span>);<br><span class="hljs-comment">######</span><br> <br><span class="hljs-comment">###显示一个需要验证的登陆对话框### </span><br>header(<span class="hljs-string">&#x27;HTTP/1.1 401 Unauthorized&#x27;</span>); <br>header(<span class="hljs-string">&#x27;WWW-Authenticate: Basic realm=&quot;Top Secret&quot;&#x27;</span>); <br><span class="hljs-comment">######</span><br> <br> <br><span class="hljs-comment">###声明一个需要下载的xls文件###</span><br>header(<span class="hljs-string">&#x27;Content-Disposition: attachment; filename=ithhc.xlsx&#x27;</span>);<br>header(<span class="hljs-string">&#x27;Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&#x27;</span>);<br>header(<span class="hljs-string">&#x27;Content-Length: &#x27;</span>.filesize(<span class="hljs-string">&#x27;./test.xls&#x27;</span>)); <br>header(<span class="hljs-string">&#x27;Content-Transfer-Encoding: binary&#x27;</span>); <br>header(<span class="hljs-string">&#x27;Cache-Control: must-revalidate&#x27;</span>); <br>header(<span class="hljs-string">&#x27;Pragma: public&#x27;</span>); <br>readfile(<span class="hljs-string">&#x27;./test.xls&#x27;</span>); <br><span class="hljs-comment">######</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
